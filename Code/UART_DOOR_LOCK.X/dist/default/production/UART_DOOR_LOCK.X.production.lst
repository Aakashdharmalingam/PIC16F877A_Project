

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Sun Jan 05 20:33:54 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	inittext,global,class=CODE,space=0,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    11                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    14                           	dabs	1,0x7E,2
    15     0000                     
    16                           ; Generated 12/10/2023 GMT
    17                           ; 
    18                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution. Publication is not required when
    32                           ;        this file is used in an embedded application.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F877A Definitions
    48                           ; 
    49                           ; SFR Addresses
    50     0004                     fsr             equ	4
    51     0004                     fsr0            equ	4
    52     0000                     indf            equ	0
    53     0000                     indf0           equ	0
    54     0002                     pc              equ	2
    55     0002                     pcl             equ	2
    56     000A                     pclath          equ	10
    57     0003                     status          equ	3
    58     0000                     INDF            equ	0	;# 
    59     0001                     TMR0            equ	1	;# 
    60     0002                     PCL             equ	2	;# 
    61     0003                     STATUS          equ	3	;# 
    62     0004                     FSR             equ	4	;# 
    63     0005                     PORTA           equ	5	;# 
    64     0006                     PORTB           equ	6	;# 
    65     0007                     PORTC           equ	7	;# 
    66     0008                     PORTD           equ	8	;# 
    67     0009                     PORTE           equ	9	;# 
    68     000A                     PCLATH          equ	10	;# 
    69     000B                     INTCON          equ	11	;# 
    70     000C                     PIR1            equ	12	;# 
    71     000D                     PIR2            equ	13	;# 
    72     000E                     TMR1            equ	14	;# 
    73     000E                     TMR1L           equ	14	;# 
    74     000F                     TMR1H           equ	15	;# 
    75     0010                     T1CON           equ	16	;# 
    76     0011                     TMR2            equ	17	;# 
    77     0012                     T2CON           equ	18	;# 
    78     0013                     SSPBUF          equ	19	;# 
    79     0014                     SSPCON          equ	20	;# 
    80     0015                     CCPR1           equ	21	;# 
    81     0015                     CCPR1L          equ	21	;# 
    82     0016                     CCPR1H          equ	22	;# 
    83     0017                     CCP1CON         equ	23	;# 
    84     0018                     RCSTA           equ	24	;# 
    85     0019                     TXREG           equ	25	;# 
    86     001A                     RCREG           equ	26	;# 
    87     001B                     CCPR2           equ	27	;# 
    88     001B                     CCPR2L          equ	27	;# 
    89     001C                     CCPR2H          equ	28	;# 
    90     001D                     CCP2CON         equ	29	;# 
    91     001E                     ADRESH          equ	30	;# 
    92     001F                     ADCON0          equ	31	;# 
    93     0081                     OPTION_REG      equ	129	;# 
    94     0085                     TRISA           equ	133	;# 
    95     0086                     TRISB           equ	134	;# 
    96     0087                     TRISC           equ	135	;# 
    97     0088                     TRISD           equ	136	;# 
    98     0089                     TRISE           equ	137	;# 
    99     008C                     PIE1            equ	140	;# 
   100     008D                     PIE2            equ	141	;# 
   101     008E                     PCON            equ	142	;# 
   102     0091                     SSPCON2         equ	145	;# 
   103     0092                     PR2             equ	146	;# 
   104     0093                     SSPADD          equ	147	;# 
   105     0094                     SSPSTAT         equ	148	;# 
   106     0098                     TXSTA           equ	152	;# 
   107     0099                     SPBRG           equ	153	;# 
   108     009C                     CMCON           equ	156	;# 
   109     009D                     CVRCON          equ	157	;# 
   110     009E                     ADRESL          equ	158	;# 
   111     009F                     ADCON1          equ	159	;# 
   112     010C                     EEDATA          equ	268	;# 
   113     010D                     EEADR           equ	269	;# 
   114     010E                     EEDATH          equ	270	;# 
   115     010F                     EEADRH          equ	271	;# 
   116     018C                     EECON1          equ	396	;# 
   117     018D                     EECON2          equ	397	;# 
   118     0000                     INDF            equ	0	;# 
   119     0001                     TMR0            equ	1	;# 
   120     0002                     PCL             equ	2	;# 
   121     0003                     STATUS          equ	3	;# 
   122     0004                     FSR             equ	4	;# 
   123     0005                     PORTA           equ	5	;# 
   124     0006                     PORTB           equ	6	;# 
   125     0007                     PORTC           equ	7	;# 
   126     0008                     PORTD           equ	8	;# 
   127     0009                     PORTE           equ	9	;# 
   128     000A                     PCLATH          equ	10	;# 
   129     000B                     INTCON          equ	11	;# 
   130     000C                     PIR1            equ	12	;# 
   131     000D                     PIR2            equ	13	;# 
   132     000E                     TMR1            equ	14	;# 
   133     000E                     TMR1L           equ	14	;# 
   134     000F                     TMR1H           equ	15	;# 
   135     0010                     T1CON           equ	16	;# 
   136     0011                     TMR2            equ	17	;# 
   137     0012                     T2CON           equ	18	;# 
   138     0013                     SSPBUF          equ	19	;# 
   139     0014                     SSPCON          equ	20	;# 
   140     0015                     CCPR1           equ	21	;# 
   141     0015                     CCPR1L          equ	21	;# 
   142     0016                     CCPR1H          equ	22	;# 
   143     0017                     CCP1CON         equ	23	;# 
   144     0018                     RCSTA           equ	24	;# 
   145     0019                     TXREG           equ	25	;# 
   146     001A                     RCREG           equ	26	;# 
   147     001B                     CCPR2           equ	27	;# 
   148     001B                     CCPR2L          equ	27	;# 
   149     001C                     CCPR2H          equ	28	;# 
   150     001D                     CCP2CON         equ	29	;# 
   151     001E                     ADRESH          equ	30	;# 
   152     001F                     ADCON0          equ	31	;# 
   153     0081                     OPTION_REG      equ	129	;# 
   154     0085                     TRISA           equ	133	;# 
   155     0086                     TRISB           equ	134	;# 
   156     0087                     TRISC           equ	135	;# 
   157     0088                     TRISD           equ	136	;# 
   158     0089                     TRISE           equ	137	;# 
   159     008C                     PIE1            equ	140	;# 
   160     008D                     PIE2            equ	141	;# 
   161     008E                     PCON            equ	142	;# 
   162     0091                     SSPCON2         equ	145	;# 
   163     0092                     PR2             equ	146	;# 
   164     0093                     SSPADD          equ	147	;# 
   165     0094                     SSPSTAT         equ	148	;# 
   166     0098                     TXSTA           equ	152	;# 
   167     0099                     SPBRG           equ	153	;# 
   168     009C                     CMCON           equ	156	;# 
   169     009D                     CVRCON          equ	157	;# 
   170     009E                     ADRESL          equ	158	;# 
   171     009F                     ADCON1          equ	159	;# 
   172     010C                     EEDATA          equ	268	;# 
   173     010D                     EEADR           equ	269	;# 
   174     010E                     EEDATH          equ	270	;# 
   175     010F                     EEADRH          equ	271	;# 
   176     018C                     EECON1          equ	396	;# 
   177     018D                     EECON2          equ	397	;# 
   178                           
   179                           	psect	idataBANK0
   180     06E2                     __pidataBANK0:
   181                           
   182                           ;initializer for main@F1502
   183     06E2  3455               	retlw	85
   184     06E3  344E               	retlw	78
   185     06E4  344C               	retlw	76
   186     06E5  344F               	retlw	79
   187     06E6  3443               	retlw	67
   188     06E7  344B               	retlw	75
   189     06E8  3400               	retlw	0
   190                           
   191                           ;initializer for main@F1505
   192     06E9  3431               	retlw	49
   193     06EA  3432               	retlw	50
   194     06EB  3433               	retlw	51
   195     06EC  3434               	retlw	52
   196     06ED  3400               	retlw	0
   197                           
   198                           ;initializer for main@F1500
   199     06EE  344C               	retlw	76
   200     06EF  344F               	retlw	79
   201     06F0  3443               	retlw	67
   202     06F1  344B               	retlw	75
   203     06F2  3400               	retlw	0
   204     001A                     _RCREG          set	26
   205     0018                     _RCSTA          set	24
   206     0007                     _PORTC          set	7
   207     0006                     _PORTB          set	6
   208     0039                     _RC1            set	57
   209     0038                     _RC0            set	56
   210     0065                     _RCIF           set	101
   211     0099                     _SPBRG          set	153
   212     0098                     _TXSTA          set	152
   213     0087                     _TRISC          set	135
   214     0086                     _TRISB          set	134
   215                           
   216                           	psect	cinit
   217     07EE                     start_initialization:	
   218                           ; #config settings
   219                           
   220     07EE                     __initialization:
   221                           
   222                           ; Initialize objects allocated to BANK0
   223     07EE  1383               	bcf	3,7	;select IRP bank0
   224     07EF  3052               	movlw	low (__pdataBANK0+17)
   225     07F0  00FD               	movwf	btemp+-1
   226     07F1  3006               	movlw	high __pidataBANK0
   227     07F2  00FE               	movwf	btemp
   228     07F3  30E2               	movlw	low __pidataBANK0
   229     07F4  00FF               	movwf	btemp+1
   230     07F5  3041               	movlw	low __pdataBANK0
   231     07F6  0084               	movwf	4
   232     07F7  120A  118A  26F7  120A  118A  	fcall	init_ram0
   233     07FC                     end_of_initialization:	
   234                           ;End of C runtime variable initialization code
   235                           
   236     07FC                     __end_of__initialization:
   237     07FC  0183               	clrf	3
   238     07FD  120A  118A  2F53   	ljmp	_main	;jump to C main() function
   239                           
   240                           	psect	dataBANK0
   241     0041                     __pdataBANK0:
   242     0041                     main@F1502:
   243     0041                     	ds	7
   244     0048                     main@F1505:
   245     0048                     	ds	5
   246     004D                     main@F1500:
   247     004D                     	ds	5
   248                           
   249                           	psect	inittext
   250     06F3                     init_fetch0:	
   251                           ;	Called with low address in FSR and high address in W
   252                           
   253     06F3  087E               	movf	btemp,w
   254     06F4  008A               	movwf	10
   255     06F5  087F               	movf	btemp+1,w
   256     06F6  0082               	movwf	2
   257     06F7                     init_ram0:	
   258                           ;Called with:
   259                           ;	high address of idata address in btemp 
   260                           ;	low address of idata address in btemp+1 
   261                           ;	low address of data in FSR
   262                           ;	high address + 1 of data in btemp-1
   263                           
   264     06F7  120A  118A  26F3  120A  118A  	fcall	init_fetch0
   265     06FC  0080               	movwf	0
   266     06FD  0A84               	incf	4,f
   267     06FE  0804               	movf	4,w
   268     06FF  067D               	xorwf	btemp+-1,w
   269     0700  1903               	btfsc	3,2
   270     0701  3400               	retlw	0
   271     0702  0AFF               	incf	btemp+1,f
   272     0703  1903               	btfsc	3,2
   273     0704  0AFE               	incf	btemp,f
   274     0705  2EF7               	goto	init_ram0
   275                           
   276                           	psect	cstackCOMMON
   277     0070                     __pcstackCOMMON:
   278     0070                     ?_display:
   279     0070                     ?_main:	
   280                           ; 1 bytes @ 0x0
   281                           
   282     0070                     display@RS:	
   283                           ; 1 bytes @ 0x0
   284                           
   285                           
   286                           ; 2 bytes @ 0x0
   287     0070                     	ds	2
   288     0072                     display@DC:
   289                           
   290                           ; 2 bytes @ 0x2
   291     0072                     	ds	2
   292     0074                     ??_display:
   293                           
   294                           ; 1 bytes @ 0x4
   295     0074                     	ds	2
   296     0076                     ?_display_string:
   297     0076                     display_string@s:	
   298                           ; 1 bytes @ 0x6
   299                           
   300                           
   301                           ; 1 bytes @ 0x6
   302     0076                     	ds	1
   303     0077                     ??_display_string:
   304                           
   305                           ; 1 bytes @ 0x7
   306     0077                     	ds	3
   307     007A                     display_string@i:
   308                           
   309                           ; 2 bytes @ 0xA
   310     007A                     	ds	2
   311                           
   312                           	psect	cstackBANK0
   313     0020                     __pcstackBANK0:
   314     0020                     ??_main:
   315                           
   316                           ; 1 bytes @ 0x0
   317     0020                     	ds	4
   318     0024                     main@b:
   319                           
   320                           ; 7 bytes @ 0x4
   321     0024                     	ds	7
   322     002B                     main@e:
   323                           
   324                           ; 5 bytes @ 0xB
   325     002B                     	ds	5
   326     0030                     main@c:
   327                           
   328                           ; 10 bytes @ 0x10
   329     0030                     	ds	10
   330     003A                     main@a:
   331                           
   332                           ; 5 bytes @ 0x1A
   333     003A                     	ds	5
   334     003F                     main@i:
   335                           
   336                           ; 2 bytes @ 0x1F
   337     003F                     	ds	2
   338                           
   339                           	psect	maintext
   340     0753                     __pmaintext:	
   341 ;;
   342 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   343 ;;
   344 ;; *************** function _main *****************
   345 ;; Defined at:
   346 ;;		line 25 in file "newmain.c"
   347 ;; Parameters:    Size  Location     Type
   348 ;;		None
   349 ;; Auto vars:     Size  Location     Type
   350 ;;  i               2   31[BANK0 ] int 
   351 ;;  c              10   16[BANK0 ] unsigned char [10]
   352 ;;  b               7    4[BANK0 ] unsigned char [7]
   353 ;;  a               5   26[BANK0 ] unsigned char [5]
   354 ;;  e               5   11[BANK0 ] unsigned char [5]
   355 ;; Return value:  Size  Location     Type
   356 ;;                  1    wreg      void 
   357 ;; Registers used:
   358 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   359 ;; Tracked objects:
   360 ;;		On entry : B00/0
   361 ;;		On exit  : 0/0
   362 ;;		Unchanged: 0/0
   363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   364 ;;      Params:         0       0       0       0       0
   365 ;;      Locals:         0      29       0       0       0
   366 ;;      Temps:          0       4       0       0       0
   367 ;;      Totals:         0      33       0       0       0
   368 ;;Total ram usage:       33 bytes
   369 ;; Hardware stack levels required when called: 2
   370 ;; This function calls:
   371 ;;		_display
   372 ;;		_display_string
   373 ;; This function is called by:
   374 ;;		Startup code after reset
   375 ;; This function uses a non-reentrant model
   376 ;;
   377                           
   378     0753                     _main:	
   379                           ;psect for function _main
   380                           
   381     0753                     l669:	
   382                           ;incstack = 0
   383                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   384                           
   385                           
   386                           ;newmain.c: 27:     char a[]={"LOCK"};
   387     0753  303A               	movlw	main@a& (0+255)
   388     0754  0084               	movwf	4
   389     0755  1283               	bcf	3,5	;RP0=0, select bank0
   390     0756  1303               	bcf	3,6	;RP1=0, select bank0
   391     0757  084D               	movf	main@F1500,w
   392     0758  1383               	bcf	3,7	;select IRP bank0
   393     0759  0080               	movwf	0
   394     075A  0A84               	incf	4,f
   395     075B  084E               	movf	main@F1500+1,w
   396     075C  0080               	movwf	0
   397     075D  0A84               	incf	4,f
   398     075E  084F               	movf	main@F1500+2,w
   399     075F  0080               	movwf	0
   400     0760  0A84               	incf	4,f
   401     0761  0850               	movf	main@F1500+3,w
   402     0762  0080               	movwf	0
   403     0763  0A84               	incf	4,f
   404     0764  0851               	movf	main@F1500+4,w
   405     0765  0080               	movwf	0
   406     0766                     l671:
   407                           
   408                           ;newmain.c: 28:     char b[]={"UNLOCK"};
   409     0766  3041               	movlw	main@F1502& (0+255)
   410     0767  0084               	movwf	4
   411     0768  3024               	movlw	low main@b
   412     0769  00A0               	movwf	??_main
   413     076A  3007               	movlw	7
   414     076B  00A1               	movwf	??_main+1
   415     076C                     u100:
   416     076C  1383               	bcf	3,7	;select IRP bank0
   417     076D  0800               	movf	0,w
   418     076E  00A2               	movwf	??_main+2
   419     076F  0A04               	incf	4,w
   420     0770  00A3               	movwf	??_main+3
   421     0771  0820               	movf	??_main,w
   422     0772  0084               	movwf	4
   423     0773  0822               	movf	??_main+2,w
   424     0774  0080               	movwf	0
   425     0775  0A04               	incf	4,w
   426     0776  00A0               	movwf	??_main
   427     0777  0823               	movf	??_main+3,w
   428     0778  0084               	movwf	4
   429     0779  0BA1               	decfsz	??_main+1,f
   430     077A  2F6C               	goto	u100
   431     077B                     l673:
   432                           
   433                           ;newmain.c: 29:     char c[10];;newmain.c: 30:     char e[]={"1234"};
   434     077B  302B               	movlw	main@e& (0+255)
   435     077C  0084               	movwf	4
   436     077D  0848               	movf	main@F1505,w
   437     077E  0080               	movwf	0
   438     077F  0A84               	incf	4,f
   439     0780  0849               	movf	main@F1505+1,w
   440     0781  0080               	movwf	0
   441     0782  0A84               	incf	4,f
   442     0783  084A               	movf	main@F1505+2,w
   443     0784  0080               	movwf	0
   444     0785  0A84               	incf	4,f
   445     0786  084B               	movf	main@F1505+3,w
   446     0787  0080               	movwf	0
   447     0788  0A84               	incf	4,f
   448     0789  084C               	movf	main@F1505+4,w
   449     078A  0080               	movwf	0
   450     078B                     l675:
   451                           
   452                           ;newmain.c: 32:     TRISB=0;
   453     078B  1683               	bsf	3,5	;RP0=1, select bank1
   454     078C  1303               	bcf	3,6	;RP1=0, select bank1
   455     078D  0186               	clrf	6	;volatile
   456     078E                     l677:
   457                           
   458                           ;newmain.c: 33:     TRISC=0;
   459     078E  0187               	clrf	7	;volatile
   460     078F                     l679:
   461                           
   462                           ;newmain.c: 34:     PORTB=0;
   463     078F  1283               	bcf	3,5	;RP0=0, select bank0
   464     0790  1303               	bcf	3,6	;RP1=0, select bank0
   465     0791  0186               	clrf	6	;volatile
   466     0792                     l681:
   467                           
   468                           ;newmain.c: 35:     PORTC=0;
   469     0792  0187               	clrf	7	;volatile
   470     0793                     l683:
   471                           
   472                           ;newmain.c: 40:     TXSTA=0x24;
   473     0793  3024               	movlw	36
   474     0794  1683               	bsf	3,5	;RP0=1, select bank1
   475     0795  1303               	bcf	3,6	;RP1=0, select bank1
   476     0796  0098               	movwf	24	;volatile
   477     0797                     l685:
   478                           
   479                           ;newmain.c: 41:     RCSTA=0x90;
   480     0797  3090               	movlw	144
   481     0798  1283               	bcf	3,5	;RP0=0, select bank0
   482     0799  1303               	bcf	3,6	;RP1=0, select bank0
   483     079A  0098               	movwf	24	;volatile
   484     079B                     l687:
   485                           
   486                           ;newmain.c: 42:     SPBRG=64;
   487     079B  3040               	movlw	64
   488     079C  1683               	bsf	3,5	;RP0=1, select bank1
   489     079D  1303               	bcf	3,6	;RP1=0, select bank1
   490     079E  0099               	movwf	25	;volatile
   491     079F                     l689:
   492                           
   493                           ;newmain.c: 43:     display(0, 0x0e);
   494     079F  3000               	movlw	0
   495     07A0  00F0               	movwf	display@RS
   496     07A1  00F1               	movwf	display@RS+1
   497     07A2  300E               	movlw	14
   498     07A3  00F2               	movwf	display@DC
   499     07A4  3000               	movlw	0
   500     07A5  00F3               	movwf	display@DC+1
   501     07A6  120A  118A  2706  120A  118A  	fcall	_display
   502     07AB                     l691:
   503                           
   504                           ;newmain.c: 44:     display_string(a);
   505     07AB  303A               	movlw	(low (main@a| 0))& (0+255)
   506     07AC  00F6               	movwf	display_string@s
   507     07AD  120A  118A  2729  120A  118A  	fcall	_display_string
   508     07B2                     l693:
   509                           
   510                           ;newmain.c: 45:     for(int i=0;i<4;i++)
   511     07B2  1283               	bcf	3,5	;RP0=0, select bank0
   512     07B3  1303               	bcf	3,6	;RP1=0, select bank0
   513     07B4  01BF               	clrf	main@i
   514     07B5  01C0               	clrf	main@i+1
   515     07B6                     l41:
   516     07B6  1283               	bcf	3,5	;RP0=0, select bank0
   517     07B7  1303               	bcf	3,6	;RP1=0, select bank0
   518     07B8  1E8C               	btfss	12,5	;volatile
   519     07B9  2FBB               	goto	u111
   520     07BA  2FBC               	goto	u110
   521     07BB                     u111:
   522     07BB  2FB6               	goto	l41
   523     07BC                     u110:
   524     07BC                     l699:
   525                           
   526                           ;newmain.c: 48:         c[i]=RCREG;
   527     07BC  083F               	movf	main@i,w
   528     07BD  3E30               	addlw	(low (main@c| 0))& (0+255)
   529     07BE  0084               	movwf	4
   530     07BF  081A               	movf	26,w	;volatile
   531     07C0  1383               	bcf	3,7	;select IRP bank0
   532     07C1  0080               	movwf	0
   533     07C2                     l701:
   534                           
   535                           ;newmain.c: 49:         RCIF=0;
   536     07C2  128C               	bcf	12,5	;volatile
   537     07C3                     l703:
   538                           
   539                           ;newmain.c: 50:         display(1, c[i]);
   540     07C3  3001               	movlw	1
   541     07C4  00F0               	movwf	display@RS
   542     07C5  3000               	movlw	0
   543     07C6  00F1               	movwf	display@RS+1
   544     07C7  083F               	movf	main@i,w
   545     07C8  3E30               	addlw	(low (main@c| 0))& (0+255)
   546     07C9  0084               	movwf	4
   547     07CA  0800               	movf	0,w
   548     07CB  00A0               	movwf	??_main
   549     07CC  01A1               	clrf	??_main+1
   550     07CD  0820               	movf	??_main,w
   551     07CE  00F2               	movwf	display@DC
   552     07CF  0821               	movf	??_main+1,w
   553     07D0  00F3               	movwf	display@DC+1
   554     07D1  120A  118A  2706  120A  118A  	fcall	_display
   555     07D6                     l705:
   556                           
   557                           ;newmain.c: 51:     }
   558     07D6  3001               	movlw	1
   559     07D7  1283               	bcf	3,5	;RP0=0, select bank0
   560     07D8  1303               	bcf	3,6	;RP1=0, select bank0
   561     07D9  07BF               	addwf	main@i,f
   562     07DA  1803               	skipnc
   563     07DB  0AC0               	incf	main@i+1,f
   564     07DC  3000               	movlw	0
   565     07DD  07C0               	addwf	main@i+1,f
   566     07DE                     l707:
   567     07DE  0840               	movf	main@i+1,w
   568     07DF  3A80               	xorlw	128
   569     07E0  00FF               	movwf	btemp+1
   570     07E1  3080               	movlw	128
   571     07E2  027F               	subwf	btemp+1,w
   572     07E3  1D03               	skipz
   573     07E4  2FE7               	goto	u125
   574     07E5  3004               	movlw	4
   575     07E6  023F               	subwf	main@i,w
   576     07E7                     u125:
   577     07E7  1C03               	skipc
   578     07E8  2FEA               	goto	u121
   579     07E9  2FEB               	goto	u120
   580     07EA                     u121:
   581     07EA  2FB6               	goto	l41
   582     07EB                     u120:
   583     07EB                     l44:
   584     07EB  120A  118A  2800   	ljmp	start
   585     07EE                     __end_of_main:
   586                           
   587                           	psect	text1
   588     0729                     __ptext1:	
   589 ;; *************** function _display_string *****************
   590 ;; Defined at:
   591 ;;		line 68 in file "newmain.c"
   592 ;; Parameters:    Size  Location     Type
   593 ;;  s               1    6[COMMON] PTR unsigned char 
   594 ;;		 -> main@a(5), 
   595 ;; Auto vars:     Size  Location     Type
   596 ;;  i               2   10[COMMON] int 
   597 ;; Return value:  Size  Location     Type
   598 ;;                  1    wreg      void 
   599 ;; Registers used:
   600 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   601 ;; Tracked objects:
   602 ;;		On entry : 0/0
   603 ;;		On exit  : 0/0
   604 ;;		Unchanged: 0/0
   605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   606 ;;      Params:         1       0       0       0       0
   607 ;;      Locals:         2       0       0       0       0
   608 ;;      Temps:          3       0       0       0       0
   609 ;;      Totals:         6       0       0       0       0
   610 ;;Total ram usage:        6 bytes
   611 ;; Hardware stack levels used: 1
   612 ;; Hardware stack levels required when called: 1
   613 ;; This function calls:
   614 ;;		_display
   615 ;; This function is called by:
   616 ;;		_main
   617 ;; This function uses a non-reentrant model
   618 ;;
   619                           
   620     0729                     _display_string:	
   621                           ;psect for function _display_string
   622                           
   623     0729                     l661:	
   624                           ;incstack = 0
   625                           ; Regs used in _display_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   626                           
   627                           
   628                           ;newmain.c: 68: void display_string(char *s);newmain.c: 69: {;newmain.c: 70:     for(int
      +                           i=0; s[i]!='\0'; i++)
   629     0729  01FA               	clrf	display_string@i
   630     072A  01FB               	clrf	display_string@i+1
   631     072B  2F47               	goto	l667
   632     072C                     l663:
   633                           
   634                           ;newmain.c: 71:         display(1, s[i]);
   635     072C  3001               	movlw	1
   636     072D  00F0               	movwf	display@RS
   637     072E  3000               	movlw	0
   638     072F  00F1               	movwf	display@RS+1
   639     0730  087A               	movf	display_string@i,w
   640     0731  0776               	addwf	display_string@s,w
   641     0732  00F7               	movwf	??_display_string
   642     0733  0877               	movf	??_display_string,w
   643     0734  0084               	movwf	4
   644     0735  0800               	movf	0,w
   645     0736  00F8               	movwf	??_display_string+1
   646     0737  01F9               	clrf	??_display_string+2
   647     0738  0878               	movf	??_display_string+1,w
   648     0739  00F2               	movwf	display@DC
   649     073A  0879               	movf	??_display_string+2,w
   650     073B  00F3               	movwf	display@DC+1
   651     073C  120A  118A  2706  120A  118A  	fcall	_display
   652     0741                     l665:
   653     0741  3001               	movlw	1
   654     0742  07FA               	addwf	display_string@i,f
   655     0743  1803               	skipnc
   656     0744  0AFB               	incf	display_string@i+1,f
   657     0745  3000               	movlw	0
   658     0746  07FB               	addwf	display_string@i+1,f
   659     0747                     l667:
   660     0747  087A               	movf	display_string@i,w
   661     0748  0776               	addwf	display_string@s,w
   662     0749  00F7               	movwf	??_display_string
   663     074A  0877               	movf	??_display_string,w
   664     074B  0084               	movwf	4
   665     074C  1383               	bcf	3,7	;select IRP bank0
   666     074D  0800               	movf	0,w
   667     074E  1D03               	btfss	3,2
   668     074F  2F51               	goto	u91
   669     0750  2F52               	goto	u90
   670     0751                     u91:
   671     0751  2F2C               	goto	l663
   672     0752                     u90:
   673     0752                     l53:
   674     0752  0008               	return
   675     0753                     __end_of_display_string:
   676                           
   677                           	psect	text2
   678     0706                     __ptext2:	
   679 ;; *************** function _display *****************
   680 ;; Defined at:
   681 ;;		line 59 in file "newmain.c"
   682 ;; Parameters:    Size  Location     Type
   683 ;;  RS              2    0[COMMON] int 
   684 ;;  DC              2    2[COMMON] int 
   685 ;; Auto vars:     Size  Location     Type
   686 ;;		None
   687 ;; Return value:  Size  Location     Type
   688 ;;                  1    wreg      void 
   689 ;; Registers used:
   690 ;;		wreg
   691 ;; Tracked objects:
   692 ;;		On entry : 0/0
   693 ;;		On exit  : 0/0
   694 ;;		Unchanged: 0/0
   695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   696 ;;      Params:         4       0       0       0       0
   697 ;;      Locals:         0       0       0       0       0
   698 ;;      Temps:          2       0       0       0       0
   699 ;;      Totals:         6       0       0       0       0
   700 ;;Total ram usage:        6 bytes
   701 ;; Hardware stack levels used: 1
   702 ;; This function calls:
   703 ;;		Nothing
   704 ;; This function is called by:
   705 ;;		_main
   706 ;;		_display_string
   707 ;; This function uses a non-reentrant model
   708 ;;
   709                           
   710     0706                     _display:	
   711                           ;psect for function _display
   712                           
   713     0706                     l653:	
   714                           ;incstack = 0
   715                           ; Regs used in _display: [wreg]
   716                           
   717                           
   718                           ;newmain.c: 59: void display(int RS, int DC);newmain.c: 60: {;newmain.c: 61:     RC0=RS;
   719     0706  1870               	btfsc	display@RS,0
   720     0707  2F09               	goto	u71
   721     0708  2F0D               	goto	u70
   722     0709                     u71:
   723     0709  1283               	bcf	3,5	;RP0=0, select bank0
   724     070A  1303               	bcf	3,6	;RP1=0, select bank0
   725     070B  1407               	bsf	7,0	;volatile
   726     070C  2F10               	goto	u84
   727     070D                     u70:
   728     070D  1283               	bcf	3,5	;RP0=0, select bank0
   729     070E  1303               	bcf	3,6	;RP1=0, select bank0
   730     070F  1007               	bcf	7,0	;volatile
   731     0710                     u84:
   732     0710                     l655:
   733                           
   734                           ;newmain.c: 62:     PORTB=DC;
   735     0710  0872               	movf	display@DC,w
   736     0711  0086               	movwf	6	;volatile
   737     0712                     l657:
   738                           
   739                           ;newmain.c: 63:     RC1=1;
   740     0712  1487               	bsf	7,1	;volatile
   741                           
   742                           ;newmain.c: 64:     _delay((unsigned long)((10)*(10000000/4000.0)));
   743     0713  3021               	movlw	33
   744     0714  00F5               	movwf	??_display+1
   745     0715  3076               	movlw	118
   746     0716  00F4               	movwf	??_display
   747     0717                     u137:
   748     0717  0BF4               	decfsz	??_display,f
   749     0718  2F17               	goto	u137
   750     0719  0BF5               	decfsz	??_display+1,f
   751     071A  2F17               	goto	u137
   752     071B  0000               	nop
   753     071C                     l659:
   754                           
   755                           ;newmain.c: 65:     RC1=0;
   756     071C  1283               	bcf	3,5	;RP0=0, select bank0
   757     071D  1303               	bcf	3,6	;RP1=0, select bank0
   758     071E  1087               	bcf	7,1	;volatile
   759                           
   760                           ;newmain.c: 66:     _delay((unsigned long)((10)*(10000000/4000.0)));
   761     071F  3021               	movlw	33
   762     0720  00F5               	movwf	??_display+1
   763     0721  3076               	movlw	118
   764     0722  00F4               	movwf	??_display
   765     0723                     u147:
   766     0723  0BF4               	decfsz	??_display,f
   767     0724  2F23               	goto	u147
   768     0725  0BF5               	decfsz	??_display+1,f
   769     0726  2F23               	goto	u147
   770     0727  0000               	nop
   771     0728                     l47:
   772     0728  0008               	return
   773     0729                     __end_of_display:
   774     0002                     ___latbits      equ	2
   775     007E                     btemp           set	126	;btemp
   776     007E                     wtemp0          set	126
   777                           
   778                           	psect	config
   779                           
   780                           ;Config register CONFIG @ 0x2007
   781                           ;	Oscillator Selection bits
   782                           ;	FOSC = HS, HS oscillator
   783                           ;	Watchdog Timer Enable bit
   784                           ;	WDTE = OFF, WDT disabled
   785                           ;	Power-up Timer Enable bit
   786                           ;	PWRTE = OFF, PWRT disabled
   787                           ;	Brown-out Reset Enable bit
   788                           ;	BOREN = OFF, BOR disabled
   789                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   790                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   791                           ;	Data EEPROM Memory Code Protection bit
   792                           ;	CPD = OFF, Data EEPROM code protection off
   793                           ;	Flash Program Memory Write Enable bits
   794                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   795                           ;	In-Circuit Debugger Mode bit
   796                           ;	DEBUG = 0x1, unprogrammed default
   797                           ;	Flash Program Memory Code Protection bit
   798                           ;	CP = OFF, Code protection off
   799     2007                     	org	8199
   800     2007  3F3A               	dw	16186

Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     33      50
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    display_string@s	PTR unsigned char  size(1) Largest target is 5
		 -> main@a(BANK0[5]), 


Critical Paths under _main in COMMON

    _main->_display_string
    _display_string->_display

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                33    33      0     355
                                              0 BANK0     33    33      0
                            _display
                     _display_string
 ---------------------------------------------------------------------------------
 (1) _display_string                                       6     5      1     141
                                              6 COMMON     6     5      1
                            _display
 ---------------------------------------------------------------------------------
 (2) _display                                              6     2      4      50
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _display
   _display_string
     _display

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BANK0               80     33      50     62.5%
BITBANK0            80      0       0      0.0%
COMMON              14     12      12     85.7%
BITCOMMON           14      0       0      0.0%
DATA                 0      0      62      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Sun Jan 05 20:33:54 2025

                      pc 0002                       l41 07B6                       l44 07EB  
                     l53 0752                       l47 0728                       u70 070D  
                     u71 0709                       u90 0752                       u91 0751  
                     u84 0710                       fsr 0004                      l701 07C2  
                    l703 07C3                      l705 07D6                      l707 07DE  
                    l653 0706                      l661 0729                      l655 0710  
                    l663 072C                      l671 0766                      l657 0712  
                    l665 0741                      l681 0792                      l673 077B  
                    l659 071C                      l667 0747                      l691 07AB  
                    l683 0793                      l675 078B                      l693 07B2  
                    l685 0797                      l677 078E                      l669 0753  
                    l687 079B                      l679 078F                      l689 079F  
                    l699 07BC                      _RC0 0038                      _RC1 0039  
                    u100 076C                      u110 07BC                      u111 07BB  
                    u120 07EB                      u121 07EA                      u125 07E7  
                    u137 0717                      u147 0723                      fsr0 0004  
                    indf 0000   __end_of_display_string 0753                     _RCIF 0065  
                   _main 0753                     btemp 007E                     start 0000  
                  ?_main 0070                    _RCREG 001A                    _RCSTA 0018  
                  _SPBRG 0099                    _PORTB 0006                    _PORTC 0007  
                  _TRISB 0086                    _TRISC 0087                    _TXSTA 0098  
        ?_display_string 0076          __end_of_display 0729                    main@a 003A  
                  main@b 0024                    main@c 0030                    main@e 002B  
                  main@i 003F                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 07EE             __end_of_main 07EE  
                 ??_main 0020                ??_display 0074  __end_of__initialization 07FC  
         __pcstackCOMMON 0070             __pidataBANK0 06E2               __pmaintext 0753  
       ??_display_string 0077                  __ptext1 0729                  __ptext2 0706  
                _display 0706     end_of_initialization 07FC      start_initialization 07EE  
             init_fetch0 06F3              __pdataBANK0 0041                ___latbits 0002  
          __pcstackBANK0 0020                 ?_display 0070                main@F1500 004D  
              main@F1502 0041                main@F1505 0048                display@DC 0072  
              display@RS 0070                 init_ram0 06F7          display_string@i 007A  
        display_string@s 0076           _display_string 0729  
