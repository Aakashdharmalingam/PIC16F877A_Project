

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Thu Dec 19 15:01:06 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,space=0,delta=2,noexec
     6                           	psect	idataBANK3,global,class=CODE,space=0,delta=2,noexec
     7                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     8                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,noexec
    14                           	psect	inittext,global,class=CODE,space=0,delta=2
    15                           	psect	clrtext,global,class=CODE,space=0,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    20                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2,group=3
    21                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2,group=1
    22                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2,group=1
    23                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2,group=1
    24                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2,group=2
    25                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2,group=1
    26                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2,group=1
    27                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2,group=3
    28                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2,group=3
    29                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2,group=3
    30                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2,group=3
    31                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2,group=2
    32                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2,group=2
    33                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    35                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    36                           	dabs	1,0x7E,2
    37     0000                     
    38                           ; Generated 12/10/2023 GMT
    39                           ; 
    40                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution. Publication is not required when
    54                           ;        this file is used in an embedded application.
    55                           ; 
    56                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    57                           ;        software without specific prior written permission.
    58                           ; 
    59                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    60                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    61                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    62                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    63                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    64                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    65                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    66                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    67                           ; 
    68                           ; 
    69                           ; Code-generator required, PIC16F877A Definitions
    70                           ; 
    71                           ; SFR Addresses
    72     0004                     fsr             equ	4
    73     0004                     fsr0            equ	4
    74     0000                     indf            equ	0
    75     0000                     indf0           equ	0
    76     0002                     pc              equ	2
    77     0002                     pcl             equ	2
    78     000A                     pclath          equ	10
    79     0003                     status          equ	3
    80     0000                     INDF            equ	0	;# 
    81     0001                     TMR0            equ	1	;# 
    82     0002                     PCL             equ	2	;# 
    83     0003                     STATUS          equ	3	;# 
    84     0004                     FSR             equ	4	;# 
    85     0005                     PORTA           equ	5	;# 
    86     0006                     PORTB           equ	6	;# 
    87     0007                     PORTC           equ	7	;# 
    88     0008                     PORTD           equ	8	;# 
    89     0009                     PORTE           equ	9	;# 
    90     000A                     PCLATH          equ	10	;# 
    91     000B                     INTCON          equ	11	;# 
    92     000C                     PIR1            equ	12	;# 
    93     000D                     PIR2            equ	13	;# 
    94     000E                     TMR1            equ	14	;# 
    95     000E                     TMR1L           equ	14	;# 
    96     000F                     TMR1H           equ	15	;# 
    97     0010                     T1CON           equ	16	;# 
    98     0011                     TMR2            equ	17	;# 
    99     0012                     T2CON           equ	18	;# 
   100     0013                     SSPBUF          equ	19	;# 
   101     0014                     SSPCON          equ	20	;# 
   102     0015                     CCPR1           equ	21	;# 
   103     0015                     CCPR1L          equ	21	;# 
   104     0016                     CCPR1H          equ	22	;# 
   105     0017                     CCP1CON         equ	23	;# 
   106     0018                     RCSTA           equ	24	;# 
   107     0019                     TXREG           equ	25	;# 
   108     001A                     RCREG           equ	26	;# 
   109     001B                     CCPR2           equ	27	;# 
   110     001B                     CCPR2L          equ	27	;# 
   111     001C                     CCPR2H          equ	28	;# 
   112     001D                     CCP2CON         equ	29	;# 
   113     001E                     ADRESH          equ	30	;# 
   114     001F                     ADCON0          equ	31	;# 
   115     0081                     OPTION_REG      equ	129	;# 
   116     0085                     TRISA           equ	133	;# 
   117     0086                     TRISB           equ	134	;# 
   118     0087                     TRISC           equ	135	;# 
   119     0088                     TRISD           equ	136	;# 
   120     0089                     TRISE           equ	137	;# 
   121     008C                     PIE1            equ	140	;# 
   122     008D                     PIE2            equ	141	;# 
   123     008E                     PCON            equ	142	;# 
   124     0091                     SSPCON2         equ	145	;# 
   125     0092                     PR2             equ	146	;# 
   126     0093                     SSPADD          equ	147	;# 
   127     0094                     SSPSTAT         equ	148	;# 
   128     0098                     TXSTA           equ	152	;# 
   129     0099                     SPBRG           equ	153	;# 
   130     009C                     CMCON           equ	156	;# 
   131     009D                     CVRCON          equ	157	;# 
   132     009E                     ADRESL          equ	158	;# 
   133     009F                     ADCON1          equ	159	;# 
   134     010C                     EEDATA          equ	268	;# 
   135     010D                     EEADR           equ	269	;# 
   136     010E                     EEDATH          equ	270	;# 
   137     010F                     EEADRH          equ	271	;# 
   138     018C                     EECON1          equ	396	;# 
   139     018D                     EECON2          equ	397	;# 
   140     0000                     INDF            equ	0	;# 
   141     0001                     TMR0            equ	1	;# 
   142     0002                     PCL             equ	2	;# 
   143     0003                     STATUS          equ	3	;# 
   144     0004                     FSR             equ	4	;# 
   145     0005                     PORTA           equ	5	;# 
   146     0006                     PORTB           equ	6	;# 
   147     0007                     PORTC           equ	7	;# 
   148     0008                     PORTD           equ	8	;# 
   149     0009                     PORTE           equ	9	;# 
   150     000A                     PCLATH          equ	10	;# 
   151     000B                     INTCON          equ	11	;# 
   152     000C                     PIR1            equ	12	;# 
   153     000D                     PIR2            equ	13	;# 
   154     000E                     TMR1            equ	14	;# 
   155     000E                     TMR1L           equ	14	;# 
   156     000F                     TMR1H           equ	15	;# 
   157     0010                     T1CON           equ	16	;# 
   158     0011                     TMR2            equ	17	;# 
   159     0012                     T2CON           equ	18	;# 
   160     0013                     SSPBUF          equ	19	;# 
   161     0014                     SSPCON          equ	20	;# 
   162     0015                     CCPR1           equ	21	;# 
   163     0015                     CCPR1L          equ	21	;# 
   164     0016                     CCPR1H          equ	22	;# 
   165     0017                     CCP1CON         equ	23	;# 
   166     0018                     RCSTA           equ	24	;# 
   167     0019                     TXREG           equ	25	;# 
   168     001A                     RCREG           equ	26	;# 
   169     001B                     CCPR2           equ	27	;# 
   170     001B                     CCPR2L          equ	27	;# 
   171     001C                     CCPR2H          equ	28	;# 
   172     001D                     CCP2CON         equ	29	;# 
   173     001E                     ADRESH          equ	30	;# 
   174     001F                     ADCON0          equ	31	;# 
   175     0081                     OPTION_REG      equ	129	;# 
   176     0085                     TRISA           equ	133	;# 
   177     0086                     TRISB           equ	134	;# 
   178     0087                     TRISC           equ	135	;# 
   179     0088                     TRISD           equ	136	;# 
   180     0089                     TRISE           equ	137	;# 
   181     008C                     PIE1            equ	140	;# 
   182     008D                     PIE2            equ	141	;# 
   183     008E                     PCON            equ	142	;# 
   184     0091                     SSPCON2         equ	145	;# 
   185     0092                     PR2             equ	146	;# 
   186     0093                     SSPADD          equ	147	;# 
   187     0094                     SSPSTAT         equ	148	;# 
   188     0098                     TXSTA           equ	152	;# 
   189     0099                     SPBRG           equ	153	;# 
   190     009C                     CMCON           equ	156	;# 
   191     009D                     CVRCON          equ	157	;# 
   192     009E                     ADRESL          equ	158	;# 
   193     009F                     ADCON1          equ	159	;# 
   194     010C                     EEDATA          equ	268	;# 
   195     010D                     EEADR           equ	269	;# 
   196     010E                     EEDATH          equ	270	;# 
   197     010F                     EEADRH          equ	271	;# 
   198     018C                     EECON1          equ	396	;# 
   199     018D                     EECON2          equ	397	;# 
   200                           
   201                           	psect	idataBANK0
   202     0147                     __pidataBANK0:
   203                           
   204                           ;initializer for main@F1341
   205     0147  3448               	retlw	72
   206     0148  3449               	retlw	73
   207     0149  3447               	retlw	71
   208     014A  3448               	retlw	72
   209     014B  345F               	retlw	95
   210     014C  3454               	retlw	84
   211     014D  3445               	retlw	69
   212     014E  344D               	retlw	77
   213     014F  3450               	retlw	80
   214     0150  3400               	retlw	0
   215                           
   216                           	psect	idataBANK1
   217     015C                     __pidataBANK1:
   218                           
   219                           ;initializer for main@F1339
   220     015C  3456               	retlw	86
   221     015D  3445               	retlw	69
   222     015E  3452               	retlw	82
   223     015F  3459               	retlw	89
   224     0160  345F               	retlw	95
   225     0161  3454               	retlw	84
   226     0162  3445               	retlw	69
   227     0163  344D               	retlw	77
   228     0164  3450               	retlw	80
   229     0165  3400               	retlw	0
   230                           
   231                           ;initializer for main@F1337
   232     0166  3443               	retlw	67
   233     0167  344F               	retlw	79
   234     0168  344C               	retlw	76
   235     0169  3444               	retlw	68
   236     016A  3400               	retlw	0
   237                           
   238                           	psect	idataBANK3
   239     0151                     __pidataBANK3:
   240                           
   241                           ;initializer for main@F1343
   242     0151  3445               	retlw	69
   243     0152  3458               	retlw	88
   244     0153  3454               	retlw	84
   245     0154  3452               	retlw	82
   246     0155  3445               	retlw	69
   247     0156  344D               	retlw	77
   248     0157  345F               	retlw	95
   249     0158  3448               	retlw	72
   250     0159  344F               	retlw	79
   251     015A  3454               	retlw	84
   252     015B  3400               	retlw	0
   253     001E                     _ADRESH         set	30
   254     0006                     _PORTB          set	6
   255     0007                     _PORTC          set	7
   256     0008                     _PORTD          set	8
   257     001F                     _ADCON0         set	31
   258     0041                     _RD1            set	65
   259     0040                     _RD0            set	64
   260     00FA                     _GO_nDONE       set	250
   261     009E                     _ADRESL         set	158
   262     0087                     _TRISC          set	135
   263     0088                     _TRISD          set	136
   264     009F                     _ADCON1         set	159
   265                           
   266                           	psect	strings
   267     0003                     __pstrings:
   268     0003                     stringtab:
   269     0003                     __stringtab:
   270     0003                     stringcode:	
   271                           ;	String table - string pointers are 1 byte each
   272                           
   273     0003                     stringdir:
   274     0003  3000               	movlw	high stringdir
   275     0004  008A               	movwf	10
   276     0005  0804               	movf	4,w
   277     0006  0A84               	incf	4,f
   278     0007  0782               	addwf	2,f
   279     0008                     __stringbase:
   280     0008  3400               	retlw	0
   281     0009                     __end_of__stringtab:
   282     0009                     STR_1:
   283     0009  3425               	retlw	37	;'%'
   284     000A  3430               	retlw	48	;'0'
   285     000B  3434               	retlw	52	;'4'
   286     000C  3464               	retlw	100	;'d'
   287     000D  3400               	retlw	0
   288                           
   289                           	psect	cinit
   290     07C5                     start_initialization:	
   291                           ; #config settings
   292                           
   293     07C5                     __initialization:
   294                           
   295                           ; Initialize objects allocated to BANK3
   296     07C5  1783               	bsf	3,7	;select IRP bank2
   297     07C6  30BB               	movlw	low (__pdataBANK3+11)
   298     07C7  00FD               	movwf	btemp+-1
   299     07C8  3001               	movlw	high __pidataBANK3
   300     07C9  00FE               	movwf	btemp
   301     07CA  3051               	movlw	low __pidataBANK3
   302     07CB  00FF               	movwf	btemp+1
   303     07CC  30B0               	movlw	low __pdataBANK3
   304     07CD  0084               	movwf	4
   305     07CE  120A  118A  2180  120A  118A  	fcall	init_ram0
   306                           
   307                           ; Initialize objects allocated to BANK1
   308     07D3  1383               	bcf	3,7	;select IRP bank0
   309     07D4  30E7               	movlw	low (__pdataBANK1+15)
   310     07D5  00FD               	movwf	btemp+-1
   311     07D6  3001               	movlw	high __pidataBANK1
   312     07D7  00FE               	movwf	btemp
   313     07D8  305C               	movlw	low __pidataBANK1
   314     07D9  00FF               	movwf	btemp+1
   315     07DA  30D8               	movlw	low __pdataBANK1
   316     07DB  0084               	movwf	4
   317     07DC  120A  118A  2180  120A  118A  	fcall	init_ram0
   318                           
   319                           ; Initialize objects allocated to BANK0
   320     07E1  306B               	movlw	low (__pdataBANK0+10)
   321     07E2  00FD               	movwf	btemp+-1
   322     07E3  3001               	movlw	high __pidataBANK0
   323     07E4  00FE               	movwf	btemp
   324     07E5  3047               	movlw	low __pidataBANK0
   325     07E6  00FF               	movwf	btemp+1
   326     07E7  3061               	movlw	low __pdataBANK0
   327     07E8  0084               	movwf	4
   328     07E9  120A  118A  2180  120A  118A  	fcall	init_ram0
   329                           
   330                           ; Clear objects allocated to BANK3
   331     07EE  1783               	bsf	3,7	;select IRP bank2
   332     07EF  3090               	movlw	low __pbssBANK3
   333     07F0  0084               	movwf	4
   334     07F1  30B0               	movlw	low (__pbssBANK3+32)
   335     07F2  120A  118A  213F  120A  118A  	fcall	clear_ram0
   336                           
   337                           ; Clear objects allocated to BANK0
   338     07F7  01EB               	clrf	__pbssBANK0& (0+127)
   339     07F8  01EC               	clrf	(__pbssBANK0+1)& (0+127)
   340     07F9  01ED               	clrf	(__pbssBANK0+2)& (0+127)
   341     07FA  01EE               	clrf	(__pbssBANK0+3)& (0+127)
   342     07FB  01EF               	clrf	(__pbssBANK0+4)& (0+127)
   343     07FC                     end_of_initialization:	
   344                           ;End of C runtime variable initialization code
   345                           
   346     07FC                     __end_of__initialization:
   347     07FC  0183               	clrf	3
   348     07FD  120A  118A  2DE2   	ljmp	_main	;jump to C main() function
   349                           
   350                           	psect	bssBANK0
   351     006B                     __pbssBANK0:
   352     006B                     _width:
   353     006B                     	ds	2
   354     006D                     _prec:
   355     006D                     	ds	2
   356     006F                     _flags:
   357     006F                     	ds	1
   358                           
   359                           	psect	dataBANK0
   360     0061                     __pdataBANK0:
   361     0061                     main@F1341:
   362     0061                     	ds	10
   363                           
   364                           	psect	dataBANK1
   365     00D8                     __pdataBANK1:
   366     00D8                     main@F1339:
   367     00D8                     	ds	10
   368     00E2                     main@F1337:
   369     00E2                     	ds	5
   370                           
   371                           	psect	bssBANK3
   372     0190                     __pbssBANK3:
   373     0190                     _dbuf:
   374     0190                     	ds	32
   375                           
   376                           	psect	dataBANK3
   377     01B0                     __pdataBANK3:
   378     01B0                     main@F1343:
   379     01B0                     	ds	11
   380                           
   381                           	psect	inittext
   382     017C                     init_fetch0:	
   383                           ;	Called with low address in FSR and high address in W
   384                           
   385     017C  087E               	movf	btemp,w
   386     017D  008A               	movwf	10
   387     017E  087F               	movf	btemp+1,w
   388     017F  0082               	movwf	2
   389     0180                     init_ram0:	
   390                           ;Called with:
   391                           ;	high address of idata address in btemp 
   392                           ;	low address of idata address in btemp+1 
   393                           ;	low address of data in FSR
   394                           ;	high address + 1 of data in btemp-1
   395                           
   396     0180  120A  118A  217C  120A  118A  	fcall	init_fetch0
   397     0185  0080               	movwf	0
   398     0186  0A84               	incf	4,f
   399     0187  0804               	movf	4,w
   400     0188  067D               	xorwf	btemp+-1,w
   401     0189  1903               	btfsc	3,2
   402     018A  3400               	retlw	0
   403     018B  0AFF               	incf	btemp+1,f
   404     018C  1903               	btfsc	3,2
   405     018D  0AFE               	incf	btemp,f
   406     018E  2980               	goto	init_ram0
   407                           
   408                           	psect	clrtext
   409     013F                     clear_ram0:	
   410                           ;	Called with FSR containing the base address, and
   411                           ;	W with the last address+1
   412                           
   413     013F  0064               	clrwdt	;clear the watchdog before getting into this loop
   414     0140                     clrloop0:
   415     0140  0180               	clrf	0	;clear RAM location pointed to by FSR
   416     0141  0A84               	incf	4,f	;increment pointer
   417     0142  0604               	xorwf	4,w	;XOR with final address
   418     0143  1903               	btfsc	3,2	;have we reached the end yet?
   419     0144  3400               	retlw	0	;all done for this memory range, return
   420     0145  0604               	xorwf	4,w	;XOR again to restore value
   421     0146  2940               	goto	clrloop0	;do the next byte
   422                           
   423                           	psect	cstackBANK1
   424     00A0                     __pcstackBANK1:
   425     00A0                     main@extrem:
   426                           
   427                           ; 11 bytes @ 0x0
   428     00A0                     	ds	11
   429     00AB                     main@very:
   430                           
   431                           ; 10 bytes @ 0xB
   432     00AB                     	ds	10
   433     00B5                     main@high:
   434                           
   435                           ; 10 bytes @ 0x15
   436     00B5                     	ds	10
   437     00BF                     main@arr:
   438                           
   439                           ; 10 bytes @ 0x1F
   440     00BF                     	ds	10
   441     00C9                     main@cold:
   442                           
   443                           ; 5 bytes @ 0x29
   444     00C9                     	ds	5
   445     00CE                     main@low_bit:
   446                           
   447                           ; 2 bytes @ 0x2E
   448     00CE                     	ds	2
   449     00D0                     main@high_bit:
   450                           
   451                           ; 2 bytes @ 0x30
   452     00D0                     	ds	2
   453     00D2                     main@bits:
   454                           
   455                           ; 2 bytes @ 0x32
   456     00D2                     	ds	2
   457     00D4                     main@i:
   458                           
   459                           ; 2 bytes @ 0x34
   460     00D4                     	ds	2
   461     00D6                     main@actual:
   462                           
   463                           ; 2 bytes @ 0x36
   464     00D6                     	ds	2
   465                           
   466                           	psect	cstackCOMMON
   467     0070                     __pcstackCOMMON:
   468     0070                     ?_display:
   469     0070                     ?_putch:	
   470                           ; 1 bytes @ 0x0
   471                           
   472     0070                     ?_main:	
   473                           ; 1 bytes @ 0x0
   474                           
   475     0070                     ?_fputc:	
   476                           ; 1 bytes @ 0x0
   477                           
   478     0070                     ?___wmul:	
   479                           ; 2 bytes @ 0x0
   480                           
   481     0070                     ?___awdiv:	
   482                           ; 2 bytes @ 0x0
   483                           
   484     0070                     ?___awmod:	
   485                           ; 2 bytes @ 0x0
   486                           
   487     0070                     putch@c:	
   488                           ; 2 bytes @ 0x0
   489                           
   490     0070                     display@RS:	
   491                           ; 1 bytes @ 0x0
   492                           
   493     0070                     ___wmul@multiplier:	
   494                           ; 2 bytes @ 0x0
   495                           
   496     0070                     ___awdiv@divisor:	
   497                           ; 2 bytes @ 0x0
   498                           
   499     0070                     ___awmod@divisor:	
   500                           ; 2 bytes @ 0x0
   501                           
   502     0070                     fputc@c:	
   503                           ; 2 bytes @ 0x0
   504                           
   505     0070                     ??_putch:	
   506                           ; 2 bytes @ 0x0
   507                           
   508                           
   509                           ; 1 bytes @ 0x0
   510     0070                     	ds	2
   511     0072                     display@DC:
   512     0072                     ___wmul@multiplicand:	
   513                           ; 2 bytes @ 0x2
   514                           
   515     0072                     ___awdiv@dividend:	
   516                           ; 2 bytes @ 0x2
   517                           
   518     0072                     ___awmod@dividend:	
   519                           ; 2 bytes @ 0x2
   520                           
   521     0072                     fputc@fp:	
   522                           ; 2 bytes @ 0x2
   523                           
   524                           
   525                           ; 2 bytes @ 0x2
   526     0072                     	ds	2
   527     0074                     ___awdiv@counter:
   528     0074                     ___awmod@counter:	
   529                           ; 1 bytes @ 0x4
   530                           
   531     0074                     ___wmul@product:	
   532                           ; 1 bytes @ 0x4
   533                           
   534     0074                     ??_display:	
   535                           ; 2 bytes @ 0x4
   536                           
   537     0074                     ??_fputc:	
   538                           ; 1 bytes @ 0x4
   539                           
   540     0074                     ??___wmul:	
   541                           ; 1 bytes @ 0x4
   542                           
   543     0074                     ??___awdiv:	
   544                           ; 1 bytes @ 0x4
   545                           
   546     0074                     ??___awmod:	
   547                           ; 1 bytes @ 0x4
   548                           
   549                           
   550                           ; 1 bytes @ 0x4
   551     0074                     	ds	1
   552     0075                     ___awdiv@sign:
   553     0075                     ___awmod@sign:	
   554                           ; 1 bytes @ 0x5
   555                           
   556                           
   557                           ; 1 bytes @ 0x5
   558     0075                     	ds	1
   559     0076                     ?_display_string:
   560     0076                     ?_abs:	
   561                           ; 1 bytes @ 0x6
   562                           
   563     0076                     ?_read_prec_or_width:	
   564                           ; 2 bytes @ 0x6
   565                           
   566     0076                     display_string@a:	
   567                           ; 2 bytes @ 0x6
   568                           
   569     0076                     read_prec_or_width@fmt:	
   570                           ; 1 bytes @ 0x6
   571                           
   572     0076                     ___awdiv@quotient:	
   573                           ; 1 bytes @ 0x6
   574                           
   575     0076                     abs@a:	
   576                           ; 2 bytes @ 0x6
   577                           
   578                           
   579                           ; 2 bytes @ 0x6
   580     0076                     	ds	1
   581     0077                     read_prec_or_width@ap:
   582     0077                     ??_display_string:	
   583                           ; 1 bytes @ 0x7
   584                           
   585                           
   586                           ; 1 bytes @ 0x7
   587     0077                     	ds	1
   588     0078                     read_prec_or_width@c:
   589     0078                     ??_abs:	
   590                           ; 1 bytes @ 0x8
   591                           
   592     0078                     ??_read_prec_or_width:	
   593                           ; 1 bytes @ 0x8
   594                           
   595                           
   596                           ; 1 bytes @ 0x8
   597     0078                     	ds	1
   598     0079                     read_prec_or_width@n:
   599                           
   600                           ; 2 bytes @ 0x9
   601     0079                     	ds	1
   602     007A                     display_string@i:
   603                           
   604                           ; 2 bytes @ 0xA
   605     007A                     	ds	3
   606     007D                     ??_pad:
   607                           
   608                           ; 1 bytes @ 0xD
   609     007D                     	ds	1
   610     007E                     ??_vfprintf:
   611     007E                     ??_dtoa:	
   612                           ; 1 bytes @ 0xE
   613                           
   614                           
   615                           	psect	cstackBANK0
   616     0020                     __pcstackBANK0:	
   617                           ; 1 bytes @ 0xE
   618                           
   619     0020                     ?_fputs:
   620     0020                     fputs@s:	
   621                           ; 2 bytes @ 0x0
   622                           
   623                           
   624                           ; 1 bytes @ 0x0
   625     0020                     	ds	1
   626     0021                     fputs@fp:
   627                           
   628                           ; 2 bytes @ 0x1
   629     0021                     	ds	2
   630     0023                     ??_fputs:
   631                           
   632                           ; 1 bytes @ 0x3
   633     0023                     	ds	2
   634     0025                     fputs@c:
   635                           
   636                           ; 1 bytes @ 0x5
   637     0025                     	ds	1
   638     0026                     fputs@i:
   639                           
   640                           ; 2 bytes @ 0x6
   641     0026                     	ds	2
   642     0028                     ?_pad:
   643     0028                     pad@fp:	
   644                           ; 1 bytes @ 0x8
   645                           
   646                           
   647                           ; 2 bytes @ 0x8
   648     0028                     	ds	2
   649     002A                     pad@buf:
   650                           
   651                           ; 1 bytes @ 0xA
   652     002A                     	ds	1
   653     002B                     pad@p:
   654                           
   655                           ; 2 bytes @ 0xB
   656     002B                     	ds	2
   657     002D                     pad@i:
   658                           
   659                           ; 2 bytes @ 0xD
   660     002D                     	ds	2
   661     002F                     ?_dtoa:
   662     002F                     dtoa@fp:	
   663                           ; 1 bytes @ 0xF
   664                           
   665                           
   666                           ; 2 bytes @ 0xF
   667     002F                     	ds	2
   668     0031                     dtoa@d:
   669                           
   670                           ; 2 bytes @ 0x11
   671     0031                     	ds	2
   672     0033                     _dtoa$603:
   673                           
   674                           ; 2 bytes @ 0x13
   675     0033                     	ds	2
   676     0035                     dtoa@p:
   677                           
   678                           ; 1 bytes @ 0x15
   679     0035                     	ds	1
   680     0036                     dtoa@w:
   681                           
   682                           ; 2 bytes @ 0x16
   683     0036                     	ds	2
   684     0038                     dtoa@s:
   685                           
   686                           ; 1 bytes @ 0x18
   687     0038                     	ds	1
   688     0039                     dtoa@i:
   689                           
   690                           ; 2 bytes @ 0x19
   691     0039                     	ds	2
   692     003B                     ?_vfpfcnvrt:
   693     003B                     vfpfcnvrt@fp:	
   694                           ; 1 bytes @ 0x1B
   695                           
   696                           
   697                           ; 2 bytes @ 0x1B
   698     003B                     	ds	2
   699     003D                     vfpfcnvrt@fmt:
   700                           
   701                           ; 1 bytes @ 0x1D
   702     003D                     	ds	1
   703     003E                     vfpfcnvrt@ap:
   704                           
   705                           ; 1 bytes @ 0x1E
   706     003E                     	ds	1
   707     003F                     ??_vfpfcnvrt:
   708                           
   709                           ; 1 bytes @ 0x1F
   710     003F                     	ds	2
   711     0041                     vfpfcnvrt@convarg:
   712                           
   713                           ; 4 bytes @ 0x21
   714     0041                     	ds	4
   715     0045                     vfpfcnvrt@done:
   716                           
   717                           ; 1 bytes @ 0x25
   718     0045                     	ds	1
   719     0046                     vfpfcnvrt@cp:
   720                           
   721                           ; 1 bytes @ 0x26
   722     0046                     	ds	1
   723     0047                     ?_vfprintf:
   724     0047                     vfprintf@fp:	
   725                           ; 2 bytes @ 0x27
   726                           
   727                           
   728                           ; 2 bytes @ 0x27
   729     0047                     	ds	2
   730     0049                     vfprintf@fmt:
   731                           
   732                           ; 1 bytes @ 0x29
   733     0049                     	ds	1
   734     004A                     vfprintf@ap:
   735                           
   736                           ; 1 bytes @ 0x2A
   737     004A                     	ds	1
   738     004B                     vfprintf@cfmt:
   739                           
   740                           ; 1 bytes @ 0x2B
   741     004B                     	ds	1
   742     004C                     ?_sprintf:
   743     004C                     sprintf@s:	
   744                           ; 2 bytes @ 0x2C
   745                           
   746                           
   747                           ; 1 bytes @ 0x2C
   748     004C                     	ds	1
   749     004D                     sprintf@fmt:
   750                           
   751                           ; 1 bytes @ 0x2D
   752     004D                     	ds	3
   753     0050                     ??_sprintf:
   754                           
   755                           ; 1 bytes @ 0x30
   756     0050                     	ds	1
   757     0051                     sprintf@ap:
   758                           
   759                           ; 1 bytes @ 0x31
   760     0051                     	ds	1
   761     0052                     sprintf@f:
   762                           
   763                           ; 11 bytes @ 0x32
   764     0052                     	ds	11
   765     005D                     ??_main:
   766                           
   767                           ; 1 bytes @ 0x3D
   768     005D                     	ds	4
   769                           
   770                           	psect	maintext
   771     05E2                     __pmaintext:	
   772 ;;
   773 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   774 ;;
   775 ;; *************** function _main *****************
   776 ;; Defined at:
   777 ;;		line 35 in file "newmain.c"
   778 ;; Parameters:    Size  Location     Type
   779 ;;		None
   780 ;; Auto vars:     Size  Location     Type
   781 ;;  i               2   52[BANK1 ] int 
   782 ;;  actual          2   54[BANK1 ] int 
   783 ;;  extrem         11    0[BANK1 ] unsigned char [11]
   784 ;;  arr            10   31[BANK1 ] unsigned char [10]
   785 ;;  high           10   21[BANK1 ] unsigned char [10]
   786 ;;  very           10   11[BANK1 ] unsigned char [10]
   787 ;;  cold            5   41[BANK1 ] unsigned char [5]
   788 ;;  bits            2   50[BANK1 ] int 
   789 ;;  high_bit        2   48[BANK1 ] int 
   790 ;;  low_bit         2   46[BANK1 ] int 
   791 ;; Return value:  Size  Location     Type
   792 ;;                  1    wreg      void 
   793 ;; Registers used:
   794 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   795 ;; Tracked objects:
   796 ;;		On entry : B00/0
   797 ;;		On exit  : 0/0
   798 ;;		Unchanged: 0/0
   799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   800 ;;      Params:         0       0       0       0       0
   801 ;;      Locals:         0       0      56       0       0
   802 ;;      Temps:          0       4       0       0       0
   803 ;;      Totals:         0       4      56       0       0
   804 ;;Total ram usage:       60 bytes
   805 ;; Hardware stack levels required when called: 8
   806 ;; This function calls:
   807 ;;		___awdiv
   808 ;;		_display
   809 ;;		_display_string
   810 ;;		_sprintf
   811 ;; This function is called by:
   812 ;;		Startup code after reset
   813 ;; This function uses a non-reentrant model
   814 ;;
   815                           
   816     05E2                     _main:	
   817                           ;psect for function _main
   818                           
   819     05E2                     l1391:	
   820                           ;incstack = 0
   821                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   822                           
   823                           
   824                           ;newmain.c: 36:     char arr[10];;newmain.c: 37:     int low_bit;;newmain.c: 38:     int
      +                           high_bit;;newmain.c: 39:     int bits;;newmain.c: 40:     char cold[]={"COLD"};
   825     05E2  30C9               	movlw	main@cold& (0+255)
   826     05E3  0084               	movwf	4
   827     05E4  1683               	bsf	3,5	;RP0=1, select bank1
   828     05E5  1303               	bcf	3,6	;RP1=0, select bank1
   829     05E6  0862               	movf	main@F1337^(0+128),w
   830     05E7  1383               	bcf	3,7	;select IRP bank1
   831     05E8  0080               	movwf	0
   832     05E9  0A84               	incf	4,f
   833     05EA  0863               	movf	(main@F1337^(0+128)+1),w
   834     05EB  0080               	movwf	0
   835     05EC  0A84               	incf	4,f
   836     05ED  0864               	movf	(main@F1337^(0+128)+2),w
   837     05EE  0080               	movwf	0
   838     05EF  0A84               	incf	4,f
   839     05F0  0865               	movf	(main@F1337^(0+128)+3),w
   840     05F1  0080               	movwf	0
   841     05F2  0A84               	incf	4,f
   842     05F3  0866               	movf	(main@F1337^(0+128)+4),w
   843     05F4  0080               	movwf	0
   844     05F5                     l1393:
   845                           
   846                           ;newmain.c: 41:     char very[]={"VERY_TEMP"};
   847     05F5  30D8               	movlw	main@F1339& (0+255)
   848     05F6  0084               	movwf	4
   849     05F7  30AB               	movlw	low main@very
   850     05F8  1283               	bcf	3,5	;RP0=0, select bank0
   851     05F9  1303               	bcf	3,6	;RP1=0, select bank0
   852     05FA  00DD               	movwf	??_main
   853     05FB  300A               	movlw	10
   854     05FC  00DE               	movwf	??_main+1
   855     05FD                     u1240:
   856     05FD  1383               	bcf	3,7	;select IRP bank1
   857     05FE  0800               	movf	0,w
   858     05FF  00DF               	movwf	??_main+2
   859     0600  0A04               	incf	4,w
   860     0601  00E0               	movwf	??_main+3
   861     0602  085D               	movf	??_main,w
   862     0603  0084               	movwf	4
   863     0604  085F               	movf	??_main+2,w
   864     0605  0080               	movwf	0
   865     0606  0A04               	incf	4,w
   866     0607  00DD               	movwf	??_main
   867     0608  0860               	movf	??_main+3,w
   868     0609  0084               	movwf	4
   869     060A  0BDE               	decfsz	??_main+1,f
   870     060B  2DFD               	goto	u1240
   871     060C                     l1395:
   872                           
   873                           ;newmain.c: 42:     char high[]={"HIGH_TEMP"};
   874     060C  3061               	movlw	main@F1341& (0+255)
   875     060D  0084               	movwf	4
   876     060E  30B5               	movlw	low main@high
   877     060F  00DD               	movwf	??_main
   878     0610  300A               	movlw	10
   879     0611  00DE               	movwf	??_main+1
   880     0612                     u1250:
   881     0612  1383               	bcf	3,7	;select IRP bank0
   882     0613  0800               	movf	0,w
   883     0614  00DF               	movwf	??_main+2
   884     0615  0A04               	incf	4,w
   885     0616  00E0               	movwf	??_main+3
   886     0617  085D               	movf	??_main,w
   887     0618  0084               	movwf	4
   888     0619  085F               	movf	??_main+2,w
   889     061A  0080               	movwf	0
   890     061B  0A04               	incf	4,w
   891     061C  00DD               	movwf	??_main
   892     061D  0860               	movf	??_main+3,w
   893     061E  0084               	movwf	4
   894     061F  0BDE               	decfsz	??_main+1,f
   895     0620  2E12               	goto	u1250
   896     0621                     l1397:
   897                           
   898                           ;newmain.c: 43:     char extrem[]={"EXTREM_HOT"};
   899     0621  30B0               	movlw	main@F1343& (0+255)
   900     0622  0084               	movwf	4
   901     0623  30A0               	movlw	low main@extrem
   902     0624  00DD               	movwf	??_main
   903     0625  300B               	movlw	11
   904     0626  00DE               	movwf	??_main+1
   905     0627                     u1260:
   906     0627  1783               	bsf	3,7	;select IRP bank3
   907     0628  0800               	movf	0,w
   908     0629  00DF               	movwf	??_main+2
   909     062A  0A04               	incf	4,w
   910     062B  00E0               	movwf	??_main+3
   911     062C  085D               	movf	??_main,w
   912     062D  0084               	movwf	4
   913     062E  1383               	bcf	3,7	;select IRP bank1
   914     062F  085F               	movf	??_main+2,w
   915     0630  0080               	movwf	0
   916     0631  0A04               	incf	4,w
   917     0632  00DD               	movwf	??_main
   918     0633  0860               	movf	??_main+3,w
   919     0634  0084               	movwf	4
   920     0635  0BDE               	decfsz	??_main+1,f
   921     0636  2E27               	goto	u1260
   922     0637                     l1399:
   923                           
   924                           ;newmain.c: 44:     ADCON0 =0x01;
   925     0637  3001               	movlw	1
   926     0638  009F               	movwf	31	;volatile
   927     0639                     l1401:
   928                           
   929                           ;newmain.c: 45:     ADCON1 =0x80;
   930     0639  3080               	movlw	128
   931     063A  1683               	bsf	3,5	;RP0=1, select bank1
   932     063B  1303               	bcf	3,6	;RP1=0, select bank1
   933     063C  009F               	movwf	31	;volatile
   934     063D                     l1403:
   935                           
   936                           ;newmain.c: 47:     TRISD=TRISC=0;
   937     063D  0187               	clrf	7	;volatile
   938     063E  0188               	clrf	8	;volatile
   939     063F                     l1405:
   940                           
   941                           ;newmain.c: 48:     PORTD=PORTC=0;
   942     063F  1283               	bcf	3,5	;RP0=0, select bank0
   943     0640  1303               	bcf	3,6	;RP1=0, select bank0
   944     0641  0187               	clrf	7	;volatile
   945     0642  0188               	clrf	8	;volatile
   946     0643                     l1407:
   947                           
   948                           ;newmain.c: 49:     PORTB=0;
   949     0643  0186               	clrf	6	;volatile
   950     0644                     l1409:
   951                           
   952                           ;newmain.c: 51:     display(0, 0x0e);
   953     0644  3000               	movlw	0
   954     0645  00F0               	movwf	display@RS
   955     0646  00F1               	movwf	display@RS+1
   956     0647  300E               	movlw	14
   957     0648  00F2               	movwf	display@DC
   958     0649  3000               	movlw	0
   959     064A  00F3               	movwf	display@DC+1
   960     064B  120A  118A  218F  120A  118A  	fcall	_display
   961     0650                     l1411:
   962                           
   963                           ;newmain.c: 52:     display(0, 0x38);
   964     0650  3000               	movlw	0
   965     0651  00F0               	movwf	display@RS
   966     0652  00F1               	movwf	display@RS+1
   967     0653  3038               	movlw	56
   968     0654  00F2               	movwf	display@DC
   969     0655  3000               	movlw	0
   970     0656  00F3               	movwf	display@DC+1
   971     0657  120A  118A  218F  120A  118A  	fcall	_display
   972     065C                     l1413:
   973                           
   974                           ;newmain.c: 55:     {;newmain.c: 56:         GO_nDONE = 1;
   975     065C  1283               	bcf	3,5	;RP0=0, select bank0
   976     065D  1303               	bcf	3,6	;RP1=0, select bank0
   977     065E  151F               	bsf	31,2	;volatile
   978     065F                     l46:	
   979                           ;newmain.c: 57:         while(GO_nDONE==1){}
   980                           
   981     065F  191F               	btfsc	31,2	;volatile
   982     0660  2E62               	goto	u1271
   983     0661  2E63               	goto	u1270
   984     0662                     u1271:
   985     0662  2E5F               	goto	l46
   986     0663                     u1270:
   987     0663                     l1415:
   988                           
   989                           ;newmain.c: 58:         low_bit = ADRESL;
   990     0663  1683               	bsf	3,5	;RP0=1, select bank1
   991     0664  1303               	bcf	3,6	;RP1=0, select bank1
   992     0665  081E               	movf	30,w	;volatile
   993     0666  1283               	bcf	3,5	;RP0=0, select bank0
   994     0667  1303               	bcf	3,6	;RP1=0, select bank0
   995     0668  00DD               	movwf	??_main
   996     0669  01DE               	clrf	??_main+1
   997     066A  085D               	movf	??_main,w
   998     066B  1683               	bsf	3,5	;RP0=1, select bank1
   999     066C  1303               	bcf	3,6	;RP1=0, select bank1
  1000     066D  00CE               	movwf	main@low_bit^(0+128)
  1001     066E  1283               	bcf	3,5	;RP0=0, select bank0
  1002     066F  1303               	bcf	3,6	;RP1=0, select bank0
  1003     0670  085E               	movf	??_main+1,w
  1004     0671  1683               	bsf	3,5	;RP0=1, select bank1
  1005     0672  1303               	bcf	3,6	;RP1=0, select bank1
  1006     0673  00CF               	movwf	(main@low_bit+1)^(0+128)
  1007                           
  1008                           ;newmain.c: 59:         high_bit = ADRESH;
  1009     0674  1283               	bcf	3,5	;RP0=0, select bank0
  1010     0675  1303               	bcf	3,6	;RP1=0, select bank0
  1011     0676  081E               	movf	30,w	;volatile
  1012     0677  00DD               	movwf	??_main
  1013     0678  01DE               	clrf	??_main+1
  1014     0679  085D               	movf	??_main,w
  1015     067A  1683               	bsf	3,5	;RP0=1, select bank1
  1016     067B  1303               	bcf	3,6	;RP1=0, select bank1
  1017     067C  00D0               	movwf	main@high_bit^(0+128)
  1018     067D  1283               	bcf	3,5	;RP0=0, select bank0
  1019     067E  1303               	bcf	3,6	;RP1=0, select bank0
  1020     067F  085E               	movf	??_main+1,w
  1021     0680  1683               	bsf	3,5	;RP0=1, select bank1
  1022     0681  1303               	bcf	3,6	;RP1=0, select bank1
  1023     0682  00D1               	movwf	(main@high_bit+1)^(0+128)
  1024     0683                     l1417:
  1025                           
  1026                           ;newmain.c: 61:         bits = low_bit | high_bit<<8;
  1027     0683  0851               	movf	(main@high_bit+1)^(0+128),w
  1028     0684  1283               	bcf	3,5	;RP0=0, select bank0
  1029     0685  1303               	bcf	3,6	;RP1=0, select bank0
  1030     0686  00DE               	movwf	??_main+1
  1031     0687  1683               	bsf	3,5	;RP0=1, select bank1
  1032     0688  1303               	bcf	3,6	;RP1=0, select bank1
  1033     0689  0850               	movf	main@high_bit^(0+128),w
  1034     068A  1283               	bcf	3,5	;RP0=0, select bank0
  1035     068B  1303               	bcf	3,6	;RP1=0, select bank0
  1036     068C  00DD               	movwf	??_main
  1037     068D  085D               	movf	??_main,w
  1038     068E  00DE               	movwf	??_main+1
  1039     068F  01DD               	clrf	??_main
  1040     0690  1683               	bsf	3,5	;RP0=1, select bank1
  1041     0691  1303               	bcf	3,6	;RP1=0, select bank1
  1042     0692  084E               	movf	main@low_bit^(0+128),w
  1043     0693  1283               	bcf	3,5	;RP0=0, select bank0
  1044     0694  1303               	bcf	3,6	;RP1=0, select bank0
  1045     0695  045D               	iorwf	??_main,w
  1046     0696  1683               	bsf	3,5	;RP0=1, select bank1
  1047     0697  1303               	bcf	3,6	;RP1=0, select bank1
  1048     0698  00D2               	movwf	main@bits^(0+128)
  1049     0699  084F               	movf	(main@low_bit+1)^(0+128),w
  1050     069A  1283               	bcf	3,5	;RP0=0, select bank0
  1051     069B  1303               	bcf	3,6	;RP1=0, select bank0
  1052     069C  045E               	iorwf	??_main+1,w
  1053     069D  1683               	bsf	3,5	;RP0=1, select bank1
  1054     069E  1303               	bcf	3,6	;RP1=0, select bank1
  1055     069F  00D3               	movwf	(main@bits+1)^(0+128)
  1056     06A0                     l1419:
  1057                           
  1058                           ;newmain.c: 62:         int actual = (bits-102)/2;
  1059     06A0  3002               	movlw	2
  1060     06A1  00F0               	movwf	___awdiv@divisor
  1061     06A2  3000               	movlw	0
  1062     06A3  00F1               	movwf	___awdiv@divisor+1
  1063     06A4  0852               	movf	main@bits^(0+128),w
  1064     06A5  3E9A               	addlw	154
  1065     06A6  00F2               	movwf	___awdiv@dividend
  1066     06A7  0853               	movf	(main@bits+1)^(0+128),w
  1067     06A8  1803               	skipnc
  1068     06A9  3E01               	addlw	1
  1069     06AA  3EFF               	addlw	255
  1070     06AB  00F3               	movwf	___awdiv@dividend+1
  1071     06AC  120A  118A  236F  120A  118A  	fcall	___awdiv
  1072     06B1  0871               	movf	?___awdiv+1,w
  1073     06B2  1683               	bsf	3,5	;RP0=1, select bank1
  1074     06B3  1303               	bcf	3,6	;RP1=0, select bank1
  1075     06B4  00D7               	movwf	(main@actual+1)^(0+128)
  1076     06B5  0870               	movf	?___awdiv,w
  1077     06B6  00D6               	movwf	main@actual^(0+128)
  1078     06B7                     l1421:
  1079                           
  1080                           ;newmain.c: 64:         sprintf(arr, "%04d", actual);
  1081     06B7  30BF               	movlw	(low (main@arr| 0))& (0+255)
  1082     06B8  1283               	bcf	3,5	;RP0=0, select bank0
  1083     06B9  1303               	bcf	3,6	;RP1=0, select bank0
  1084     06BA  00CC               	movwf	sprintf@s
  1085     06BB  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1086     06BC  00CD               	movwf	sprintf@fmt
  1087     06BD  1683               	bsf	3,5	;RP0=1, select bank1
  1088     06BE  1303               	bcf	3,6	;RP1=0, select bank1
  1089     06BF  0857               	movf	(main@actual+1)^(0+128),w
  1090     06C0  1283               	bcf	3,5	;RP0=0, select bank0
  1091     06C1  1303               	bcf	3,6	;RP1=0, select bank0
  1092     06C2  00CF               	movwf	?_sprintf+3
  1093     06C3  1683               	bsf	3,5	;RP0=1, select bank1
  1094     06C4  1303               	bcf	3,6	;RP1=0, select bank1
  1095     06C5  0856               	movf	main@actual^(0+128),w
  1096     06C6  1283               	bcf	3,5	;RP0=0, select bank0
  1097     06C7  1303               	bcf	3,6	;RP1=0, select bank0
  1098     06C8  00CE               	movwf	?_sprintf+2
  1099     06C9  120A  118A  21D5  120A  118A  	fcall	_sprintf
  1100     06CE                     l1423:
  1101                           
  1102                           ;newmain.c: 65:         display(0,0x80);
  1103     06CE  3000               	movlw	0
  1104     06CF  00F0               	movwf	display@RS
  1105     06D0  00F1               	movwf	display@RS+1
  1106     06D1  3080               	movlw	128
  1107     06D2  00F2               	movwf	display@DC
  1108     06D3  3000               	movlw	0
  1109     06D4  00F3               	movwf	display@DC+1
  1110     06D5  120A  118A  218F  120A  118A  	fcall	_display
  1111     06DA                     l1425:
  1112                           
  1113                           ;newmain.c: 66:         for(int i=0;arr[i]!='\0';i++)
  1114     06DA  1683               	bsf	3,5	;RP0=1, select bank1
  1115     06DB  1303               	bcf	3,6	;RP1=0, select bank1
  1116     06DC  01D4               	clrf	main@i^(0+128)
  1117     06DD  01D5               	clrf	(main@i+1)^(0+128)
  1118     06DE  2EFC               	goto	l1431
  1119     06DF                     l1427:
  1120                           
  1121                           ;newmain.c: 67:         {;newmain.c: 68:             display(1, arr[i]);
  1122     06DF  3001               	movlw	1
  1123     06E0  00F0               	movwf	display@RS
  1124     06E1  3000               	movlw	0
  1125     06E2  00F1               	movwf	display@RS+1
  1126     06E3  0854               	movf	main@i^(0+128),w
  1127     06E4  3EBF               	addlw	(low (main@arr| 0))& (0+255)
  1128     06E5  0084               	movwf	4
  1129     06E6  0800               	movf	0,w
  1130     06E7  1283               	bcf	3,5	;RP0=0, select bank0
  1131     06E8  1303               	bcf	3,6	;RP1=0, select bank0
  1132     06E9  00DD               	movwf	??_main
  1133     06EA  01DE               	clrf	??_main+1
  1134     06EB  085D               	movf	??_main,w
  1135     06EC  00F2               	movwf	display@DC
  1136     06ED  085E               	movf	??_main+1,w
  1137     06EE  00F3               	movwf	display@DC+1
  1138     06EF  120A  118A  218F  120A  118A  	fcall	_display
  1139     06F4                     l1429:
  1140                           
  1141                           ;newmain.c: 69:         }
  1142     06F4  3001               	movlw	1
  1143     06F5  1683               	bsf	3,5	;RP0=1, select bank1
  1144     06F6  1303               	bcf	3,6	;RP1=0, select bank1
  1145     06F7  07D4               	addwf	main@i^(0+128),f
  1146     06F8  1803               	skipnc
  1147     06F9  0AD5               	incf	(main@i+1)^(0+128),f
  1148     06FA  3000               	movlw	0
  1149     06FB  07D5               	addwf	(main@i+1)^(0+128),f
  1150     06FC                     l1431:
  1151     06FC  0854               	movf	main@i^(0+128),w
  1152     06FD  3EBF               	addlw	(low (main@arr| 0))& (0+255)
  1153     06FE  0084               	movwf	4
  1154     06FF  1383               	bcf	3,7	;select IRP bank1
  1155     0700  0800               	movf	0,w
  1156     0701  1D03               	btfss	3,2
  1157     0702  2F04               	goto	u1281
  1158     0703  2F05               	goto	u1280
  1159     0704                     u1281:
  1160     0704  2EDF               	goto	l1427
  1161     0705                     u1280:
  1162     0705                     l1433:
  1163                           
  1164                           ;newmain.c: 71:         if(actual <= 0)
  1165     0705  0857               	movf	(main@actual+1)^(0+128),w
  1166     0706  3A80               	xorlw	128
  1167     0707  00FF               	movwf	btemp+1
  1168     0708  3080               	movlw	128
  1169     0709  027F               	subwf	btemp+1,w
  1170     070A  1D03               	skipz
  1171     070B  2F0E               	goto	u1295
  1172     070C  3001               	movlw	1
  1173     070D  0256               	subwf	main@actual^(0+128),w
  1174     070E                     u1295:
  1175     070E  1803               	skipnc
  1176     070F  2F11               	goto	u1291
  1177     0710  2F12               	goto	u1290
  1178     0711                     u1291:
  1179     0711  2F26               	goto	l52
  1180     0712                     u1290:
  1181     0712                     l1435:
  1182                           
  1183                           ;newmain.c: 72:         {;newmain.c: 73:             display(0, 0xc0);
  1184     0712  3000               	movlw	0
  1185     0713  00F0               	movwf	display@RS
  1186     0714  00F1               	movwf	display@RS+1
  1187     0715  30C0               	movlw	192
  1188     0716  00F2               	movwf	display@DC
  1189     0717  3000               	movlw	0
  1190     0718  00F3               	movwf	display@DC+1
  1191     0719  120A  118A  218F  120A  118A  	fcall	_display
  1192     071E                     l1437:
  1193                           
  1194                           ;newmain.c: 74:             display_string(cold);
  1195     071E  30C9               	movlw	(low (main@cold| 0))& (0+255)
  1196     071F  00F6               	movwf	display_string@a
  1197     0720  120A  118A  221D  120A  118A  	fcall	_display_string
  1198                           
  1199                           ;newmain.c: 75:         }
  1200     0725  2E5C               	goto	l1413
  1201     0726                     l52:	
  1202                           ;newmain.c: 76:         else if(actual >= 0 && actual <=20)
  1203                           
  1204     0726  1683               	bsf	3,5	;RP0=1, select bank1
  1205     0727  1303               	bcf	3,6	;RP1=0, select bank1
  1206     0728  1BD7               	btfsc	(main@actual+1)^(0+128),7
  1207     0729  2F2B               	goto	u1301
  1208     072A  2F2C               	goto	u1300
  1209     072B                     u1301:
  1210     072B  2F3A               	goto	l1445
  1211     072C                     u1300:
  1212     072C                     l1439:
  1213     072C  0857               	movf	(main@actual+1)^(0+128),w
  1214     072D  3A80               	xorlw	128
  1215     072E  00FF               	movwf	btemp+1
  1216     072F  3080               	movlw	128
  1217     0730  027F               	subwf	btemp+1,w
  1218     0731  1D03               	skipz
  1219     0732  2F35               	goto	u1315
  1220     0733  3015               	movlw	21
  1221     0734  0256               	subwf	main@actual^(0+128),w
  1222     0735                     u1315:
  1223     0735  1803               	skipnc
  1224     0736  2F38               	goto	u1311
  1225     0737  2F39               	goto	u1310
  1226     0738                     u1311:
  1227     0738  2F3A               	goto	l1445
  1228     0739                     u1310:
  1229     0739  2F12               	goto	l1435
  1230     073A                     l1445:
  1231     073A  1683               	bsf	3,5	;RP0=1, select bank1
  1232     073B  1303               	bcf	3,6	;RP1=0, select bank1
  1233     073C  0857               	movf	(main@actual+1)^(0+128),w
  1234     073D  3A80               	xorlw	128
  1235     073E  00FF               	movwf	btemp+1
  1236     073F  3080               	movlw	128
  1237     0740  027F               	subwf	btemp+1,w
  1238     0741  1D03               	skipz
  1239     0742  2F45               	goto	u1325
  1240     0743  3015               	movlw	21
  1241     0744  0256               	subwf	main@actual^(0+128),w
  1242     0745                     u1325:
  1243     0745  1C03               	skipc
  1244     0746  2F48               	goto	u1321
  1245     0747  2F49               	goto	u1320
  1246     0748                     u1321:
  1247     0748  2F6C               	goto	l1453
  1248     0749                     u1320:
  1249     0749                     l1447:
  1250     0749  1683               	bsf	3,5	;RP0=1, select bank1
  1251     074A  1303               	bcf	3,6	;RP1=0, select bank1
  1252     074B  0857               	movf	(main@actual+1)^(0+128),w
  1253     074C  3A80               	xorlw	128
  1254     074D  00FF               	movwf	btemp+1
  1255     074E  3080               	movlw	128
  1256     074F  027F               	subwf	btemp+1,w
  1257     0750  1D03               	skipz
  1258     0751  2F54               	goto	u1335
  1259     0752  3029               	movlw	41
  1260     0753  0256               	subwf	main@actual^(0+128),w
  1261     0754                     u1335:
  1262     0754  1803               	skipnc
  1263     0755  2F57               	goto	u1331
  1264     0756  2F58               	goto	u1330
  1265     0757                     u1331:
  1266     0757  2F6C               	goto	l1453
  1267     0758                     u1330:
  1268     0758                     l1449:
  1269                           
  1270                           ;newmain.c: 82:         {;newmain.c: 83:             display(0, 0xc0);
  1271     0758  3000               	movlw	0
  1272     0759  00F0               	movwf	display@RS
  1273     075A  00F1               	movwf	display@RS+1
  1274     075B  30C0               	movlw	192
  1275     075C  00F2               	movwf	display@DC
  1276     075D  3000               	movlw	0
  1277     075E  00F3               	movwf	display@DC+1
  1278     075F  120A  118A  218F  120A  118A  	fcall	_display
  1279     0764                     l1451:
  1280                           
  1281                           ;newmain.c: 84:             display_string(high);
  1282     0764  30B5               	movlw	(low (main@high| 0))& (0+255)
  1283     0765  00F6               	movwf	display_string@a
  1284     0766  120A  118A  221D  120A  118A  	fcall	_display_string
  1285                           
  1286                           ;newmain.c: 85:         }
  1287     076B  2E5C               	goto	l1413
  1288     076C                     l1453:
  1289     076C  1683               	bsf	3,5	;RP0=1, select bank1
  1290     076D  1303               	bcf	3,6	;RP1=0, select bank1
  1291     076E  0857               	movf	(main@actual+1)^(0+128),w
  1292     076F  3A80               	xorlw	128
  1293     0770  00FF               	movwf	btemp+1
  1294     0771  3080               	movlw	128
  1295     0772  027F               	subwf	btemp+1,w
  1296     0773  1D03               	skipz
  1297     0774  2F77               	goto	u1345
  1298     0775  3029               	movlw	41
  1299     0776  0256               	subwf	main@actual^(0+128),w
  1300     0777                     u1345:
  1301     0777  1C03               	skipc
  1302     0778  2F7A               	goto	u1341
  1303     0779  2F7B               	goto	u1340
  1304     077A                     u1341:
  1305     077A  2F9E               	goto	l1461
  1306     077B                     u1340:
  1307     077B                     l1455:
  1308     077B  1683               	bsf	3,5	;RP0=1, select bank1
  1309     077C  1303               	bcf	3,6	;RP1=0, select bank1
  1310     077D  0857               	movf	(main@actual+1)^(0+128),w
  1311     077E  3A80               	xorlw	128
  1312     077F  00FF               	movwf	btemp+1
  1313     0780  3080               	movlw	128
  1314     0781  027F               	subwf	btemp+1,w
  1315     0782  1D03               	skipz
  1316     0783  2F86               	goto	u1355
  1317     0784  303D               	movlw	61
  1318     0785  0256               	subwf	main@actual^(0+128),w
  1319     0786                     u1355:
  1320     0786  1803               	skipnc
  1321     0787  2F89               	goto	u1351
  1322     0788  2F8A               	goto	u1350
  1323     0789                     u1351:
  1324     0789  2F9E               	goto	l1461
  1325     078A                     u1350:
  1326     078A                     l1457:
  1327                           
  1328                           ;newmain.c: 87:         {;newmain.c: 88:             display(0,0xc0);
  1329     078A  3000               	movlw	0
  1330     078B  00F0               	movwf	display@RS
  1331     078C  00F1               	movwf	display@RS+1
  1332     078D  30C0               	movlw	192
  1333     078E  00F2               	movwf	display@DC
  1334     078F  3000               	movlw	0
  1335     0790  00F3               	movwf	display@DC+1
  1336     0791  120A  118A  218F  120A  118A  	fcall	_display
  1337     0796                     l1459:
  1338                           
  1339                           ;newmain.c: 89:             display_string(very);
  1340     0796  30AB               	movlw	(low (main@very| 0))& (0+255)
  1341     0797  00F6               	movwf	display_string@a
  1342     0798  120A  118A  221D  120A  118A  	fcall	_display_string
  1343                           
  1344                           ;newmain.c: 90:         }
  1345     079D  2E5C               	goto	l1413
  1346     079E                     l1461:
  1347     079E  1683               	bsf	3,5	;RP0=1, select bank1
  1348     079F  1303               	bcf	3,6	;RP1=0, select bank1
  1349     07A0  0857               	movf	(main@actual+1)^(0+128),w
  1350     07A1  3A80               	xorlw	128
  1351     07A2  00FF               	movwf	btemp+1
  1352     07A3  3080               	movlw	128
  1353     07A4  027F               	subwf	btemp+1,w
  1354     07A5  1D03               	skipz
  1355     07A6  2FA9               	goto	u1365
  1356     07A7  303D               	movlw	61
  1357     07A8  0256               	subwf	main@actual^(0+128),w
  1358     07A9                     u1365:
  1359     07A9  1C03               	skipc
  1360     07AA  2FAC               	goto	u1361
  1361     07AB  2FAD               	goto	u1360
  1362     07AC                     u1361:
  1363     07AC  2FC1               	goto	l55
  1364     07AD                     u1360:
  1365     07AD                     l1463:
  1366                           
  1367                           ;newmain.c: 92:         {;newmain.c: 93:             display(0,0xc0);
  1368     07AD  3000               	movlw	0
  1369     07AE  00F0               	movwf	display@RS
  1370     07AF  00F1               	movwf	display@RS+1
  1371     07B0  30C0               	movlw	192
  1372     07B1  00F2               	movwf	display@DC
  1373     07B2  3000               	movlw	0
  1374     07B3  00F3               	movwf	display@DC+1
  1375     07B4  120A  118A  218F  120A  118A  	fcall	_display
  1376     07B9                     l1465:
  1377                           
  1378                           ;newmain.c: 94:             display_string(extrem);
  1379     07B9  30A0               	movlw	(low (main@extrem| 0))& (0+255)
  1380     07BA  00F6               	movwf	display_string@a
  1381     07BB  120A  118A  221D  120A  118A  	fcall	_display_string
  1382     07C0  2E5C               	goto	l1413
  1383     07C1                     l55:
  1384     07C1  2E5C               	goto	l1413
  1385     07C2  120A  118A  2800   	ljmp	start
  1386     07C5                     __end_of_main:
  1387                           
  1388                           	psect	text1
  1389     01D5                     __ptext1:	
  1390 ;; *************** function _sprintf *****************
  1391 ;; Defined at:
  1392 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_sprintf.c"
  1393 ;; Parameters:    Size  Location     Type
  1394 ;;  s               1   44[BANK0 ] PTR unsigned char 
  1395 ;;		 -> main@arr(10), 
  1396 ;;  fmt             1   45[BANK0 ] PTR const unsigned char 
  1397 ;;		 -> STR_1(5), 
  1398 ;; Auto vars:     Size  Location     Type
  1399 ;;  f              11   50[BANK0 ] struct _IO_FILE
  1400 ;;  ret             2    0        int 
  1401 ;;  ap              1   49[BANK0 ] PTR void [1]
  1402 ;;		 -> ?_sprintf(2), 
  1403 ;; Return value:  Size  Location     Type
  1404 ;;                  2   44[BANK0 ] int 
  1405 ;; Registers used:
  1406 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1407 ;; Tracked objects:
  1408 ;;		On entry : 0/0
  1409 ;;		On exit  : 0/0
  1410 ;;		Unchanged: 0/0
  1411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1412 ;;      Params:         0       4       0       0       0
  1413 ;;      Locals:         0      12       0       0       0
  1414 ;;      Temps:          0       1       0       0       0
  1415 ;;      Totals:         0      17       0       0       0
  1416 ;;Total ram usage:       17 bytes
  1417 ;; Hardware stack levels used: 1
  1418 ;; Hardware stack levels required when called: 7
  1419 ;; This function calls:
  1420 ;;		_vfprintf
  1421 ;; This function is called by:
  1422 ;;		_main
  1423 ;; This function uses a non-reentrant model
  1424 ;;
  1425                           
  1426     01D5                     _sprintf:	
  1427                           ;psect for function _sprintf
  1428                           
  1429     01D5                     l1369:	
  1430                           ;incstack = 0
  1431                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1432                           
  1433     01D5  304E               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  1434     01D6  1283               	bcf	3,5	;RP0=0, select bank0
  1435     01D7  1303               	bcf	3,6	;RP1=0, select bank0
  1436     01D8  00D1               	movwf	sprintf@ap
  1437     01D9                     l1371:
  1438     01D9  084C               	movf	sprintf@s,w
  1439     01DA  00D2               	movwf	sprintf@f
  1440     01DB  3000               	movlw	0
  1441     01DC  00D3               	movwf	sprintf@f+1
  1442     01DD                     l1373:
  1443     01DD  01D4               	clrf	sprintf@f+2
  1444     01DE  01D5               	clrf	sprintf@f+3
  1445     01DF                     l1375:
  1446     01DF  01DB               	clrf	sprintf@f+9
  1447     01E0  01DC               	clrf	sprintf@f+10
  1448     01E1                     l1377:
  1449     01E1  3052               	movlw	low sprintf@f
  1450     01E2  00C7               	movwf	vfprintf@fp
  1451     01E3  3000               	movlw	high sprintf@f
  1452     01E4  00C8               	movwf	vfprintf@fp+1
  1453     01E5  084D               	movf	sprintf@fmt,w
  1454     01E6  00C9               	movwf	vfprintf@fmt
  1455     01E7  3051               	movlw	(low (sprintf@ap| 0))& (0+255)
  1456     01E8  00CA               	movwf	vfprintf@ap
  1457     01E9  120A  118A  21B2  120A  118A  	fcall	_vfprintf
  1458     01EE                     l1379:
  1459     01EE  1283               	bcf	3,5	;RP0=0, select bank0
  1460     01EF  1303               	bcf	3,6	;RP1=0, select bank0
  1461     01F0  0854               	movf	sprintf@f+2,w
  1462     01F1  074C               	addwf	sprintf@s,w
  1463     01F2  00D0               	movwf	??_sprintf
  1464     01F3  0850               	movf	??_sprintf,w
  1465     01F4  0084               	movwf	4
  1466     01F5  1383               	bcf	3,7	;select IRP bank0
  1467     01F6  0180               	clrf	0
  1468     01F7                     l621:
  1469     01F7  0008               	return
  1470     01F8                     __end_of_sprintf:
  1471                           
  1472                           	psect	text2
  1473     01B2                     __ptext2:	
  1474 ;; *************** function _vfprintf *****************
  1475 ;; Defined at:
  1476 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  1477 ;; Parameters:    Size  Location     Type
  1478 ;;  fp              2   39[BANK0 ] PTR struct _IO_FILE
  1479 ;;		 -> sprintf@f(11), 
  1480 ;;  fmt             1   41[BANK0 ] PTR const unsigned char 
  1481 ;;		 -> STR_1(5), 
  1482 ;;  ap              1   42[BANK0 ] PTR PTR void 
  1483 ;;		 -> sprintf@ap(1), 
  1484 ;; Auto vars:     Size  Location     Type
  1485 ;;  cfmt            1   43[BANK0 ] PTR unsigned char 
  1486 ;;		 -> STR_1(5), 
  1487 ;; Return value:  Size  Location     Type
  1488 ;;                  2   39[BANK0 ] int 
  1489 ;; Registers used:
  1490 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1491 ;; Tracked objects:
  1492 ;;		On entry : 0/0
  1493 ;;		On exit  : 0/0
  1494 ;;		Unchanged: 0/0
  1495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1496 ;;      Params:         0       4       0       0       0
  1497 ;;      Locals:         0       1       0       0       0
  1498 ;;      Temps:          0       0       0       0       0
  1499 ;;      Totals:         0       5       0       0       0
  1500 ;;Total ram usage:        5 bytes
  1501 ;; Hardware stack levels used: 1
  1502 ;; Hardware stack levels required when called: 6
  1503 ;; This function calls:
  1504 ;;		_vfpfcnvrt
  1505 ;; This function is called by:
  1506 ;;		_sprintf
  1507 ;; This function uses a non-reentrant model
  1508 ;;
  1509                           
  1510     01B2                     _vfprintf:	
  1511                           ;psect for function _vfprintf
  1512                           
  1513     01B2                     l1359:	
  1514                           ;incstack = 0
  1515 ;; using string table level
  1516                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1517                           
  1518                           
  1519                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1520     01B2  1283               	bcf	3,5	;RP0=0, select bank0
  1521     01B3  1303               	bcf	3,6	;RP1=0, select bank0
  1522     01B4  0849               	movf	vfprintf@fmt,w
  1523     01B5  00CB               	movwf	vfprintf@cfmt
  1524                           
  1525                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1526     01B6  29C4               	goto	l1363
  1527     01B7                     l1361:
  1528                           
  1529                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1530     01B7  0847               	movf	vfprintf@fp,w
  1531     01B8  00BB               	movwf	vfpfcnvrt@fp
  1532     01B9  0848               	movf	vfprintf@fp+1,w
  1533     01BA  00BC               	movwf	vfpfcnvrt@fp+1
  1534     01BB  304B               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  1535     01BC  00BD               	movwf	vfpfcnvrt@fmt
  1536     01BD  084A               	movf	vfprintf@ap,w
  1537     01BE  00BE               	movwf	vfpfcnvrt@ap
  1538     01BF  120A  118A  246C  120A  118A  	fcall	_vfpfcnvrt
  1539     01C4                     l1363:
  1540                           
  1541                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1542     01C4  1283               	bcf	3,5	;RP0=0, select bank0
  1543     01C5  1303               	bcf	3,6	;RP1=0, select bank0
  1544     01C6  084B               	movf	vfprintf@cfmt,w
  1545     01C7  0084               	movwf	4
  1546     01C8  120A  118A  2003  120A  118A  	fcall	stringdir
  1547     01CD  3A00               	xorlw	0
  1548     01CE  1D03               	skipz
  1549     01CF  29D1               	goto	u1221
  1550     01D0  29D2               	goto	u1220
  1551     01D1                     u1221:
  1552     01D1  29B7               	goto	l1361
  1553     01D2                     u1220:
  1554     01D2                     l1365:
  1555                           
  1556                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1557     01D2  01C7               	clrf	?_vfprintf
  1558     01D3  01C8               	clrf	?_vfprintf+1
  1559     01D4                     l691:
  1560     01D4  0008               	return
  1561     01D5                     __end_of_vfprintf:
  1562                           
  1563                           	psect	text3
  1564     046C                     __ptext3:	
  1565 ;; *************** function _vfpfcnvrt *****************
  1566 ;; Defined at:
  1567 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  1568 ;; Parameters:    Size  Location     Type
  1569 ;;  fp              2   27[BANK0 ] PTR struct _IO_FILE
  1570 ;;		 -> sprintf@f(11), 
  1571 ;;  fmt             1   29[BANK0 ] PTR PTR unsigned char 
  1572 ;;		 -> vfprintf@cfmt(1), 
  1573 ;;  ap              1   30[BANK0 ] PTR PTR void 
  1574 ;;		 -> sprintf@ap(1), 
  1575 ;; Auto vars:     Size  Location     Type
  1576 ;;  convarg         4   33[BANK0 ] struct .
  1577 ;;  cp              1   38[BANK0 ] PTR unsigned char 
  1578 ;;		 -> STR_1(5), 
  1579 ;;  done            1   37[BANK0 ] _Bool 
  1580 ;;  c               1    0        unsigned char 
  1581 ;; Return value:  Size  Location     Type
  1582 ;;                  1    wreg      void 
  1583 ;; Registers used:
  1584 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1585 ;; Tracked objects:
  1586 ;;		On entry : 0/0
  1587 ;;		On exit  : 0/0
  1588 ;;		Unchanged: 0/0
  1589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1590 ;;      Params:         0       4       0       0       0
  1591 ;;      Locals:         0       6       0       0       0
  1592 ;;      Temps:          0       2       0       0       0
  1593 ;;      Totals:         0      12       0       0       0
  1594 ;;Total ram usage:       12 bytes
  1595 ;; Hardware stack levels used: 1
  1596 ;; Hardware stack levels required when called: 5
  1597 ;; This function calls:
  1598 ;;		_dtoa
  1599 ;;		_fputc
  1600 ;;		_read_prec_or_width
  1601 ;; This function is called by:
  1602 ;;		_vfprintf
  1603 ;; This function uses a non-reentrant model
  1604 ;;
  1605                           
  1606     046C                     _vfpfcnvrt:	
  1607                           ;psect for function _vfpfcnvrt
  1608                           
  1609     046C                     l1301:	
  1610                           ;incstack = 0
  1611 ;; using string table level
  1612                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1613                           
  1614                           
  1615                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1616     046C  1283               	bcf	3,5	;RP0=0, select bank0
  1617     046D  1303               	bcf	3,6	;RP1=0, select bank0
  1618     046E  083D               	movf	vfpfcnvrt@fmt,w
  1619     046F  0084               	movwf	4
  1620     0470  1383               	bcf	3,7	;select IRP bank0
  1621     0471  0800               	movf	0,w
  1622     0472  0084               	movwf	4
  1623     0473  120A  118A  2003  120A  118A  	fcall	stringdir
  1624     0478  3A25               	xorlw	37
  1625     0479  1D03               	skipz
  1626     047A  2C7C               	goto	u1151
  1627     047B  2C7D               	goto	u1150
  1628     047C                     u1151:
  1629     047C  2D04               	goto	l1345
  1630     047D                     u1150:
  1631     047D                     l1303:
  1632                           
  1633                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1634     047D  083D               	movf	vfpfcnvrt@fmt,w
  1635     047E  0084               	movwf	4
  1636     047F  3001               	movlw	1
  1637     0480  0780               	addwf	0,f
  1638     0481                     l1305:
  1639                           
  1640                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1641     0481  01EB               	clrf	_width
  1642     0482  01EC               	clrf	_width+1
  1643     0483  3000               	movlw	0
  1644     0484  00EF               	movwf	_flags
  1645     0485                     l1307:
  1646                           
  1647                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1648     0485  30FF               	movlw	255
  1649     0486  00ED               	movwf	_prec
  1650     0487  30FF               	movlw	255
  1651     0488  00EE               	movwf	_prec+1
  1652     0489                     l1309:
  1653                           
  1654                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  1655     0489  01C5               	clrf	vfpfcnvrt@done
  1656                           
  1657                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1658     048A  2CA1               	goto	l1317
  1659     048B                     l677:	
  1660                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1219:            
      +                               case '0' :
  1661                           
  1662                           
  1663                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  1664     048B  14EF               	bsf	_flags,1
  1665     048C                     l1311:
  1666                           
  1667                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  1668     048C  083D               	movf	vfpfcnvrt@fmt,w
  1669     048D  0084               	movwf	4
  1670     048E  3001               	movlw	1
  1671     048F  0780               	addwf	0,f
  1672                           
  1673                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  1674     0490  2CA1               	goto	l1317
  1675     0491                     l679:	
  1676                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1242:            
      +                               default:
  1677                           
  1678                           
  1679                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  1680     0491  3001               	movlw	1
  1681     0492  00C5               	movwf	vfpfcnvrt@done
  1682                           
  1683                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  1684     0493  2CA1               	goto	l1317
  1685     0494                     l1315:
  1686     0494  083D               	movf	vfpfcnvrt@fmt,w
  1687     0495  0084               	movwf	4
  1688     0496  0800               	movf	0,w
  1689     0497  0084               	movwf	4
  1690     0498  120A  118A  2003  120A  118A  	fcall	stringdir
  1691                           
  1692                           ; Switch size 1, requested type "simple"
  1693                           ; Number of cases is 1, Range of values is 48 to 48
  1694                           ; switch strategies available:
  1695                           ; Name         Instructions Cycles
  1696                           ; simple_byte            4     3 (average)
  1697                           ; direct_byte           14    11 (fixed)
  1698                           ; jumptable            263     9 (fixed)
  1699                           ;	Chosen strategy is simple_byte
  1700     049D  3A30               	xorlw	48	; case 48
  1701     049E  1903               	skipnz
  1702     049F  2C8B               	goto	l677
  1703     04A0  2C91               	goto	l679
  1704     04A1                     l1317:
  1705                           
  1706                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1707     04A1  0845               	movf	vfpfcnvrt@done,w
  1708     04A2  1903               	btfsc	3,2
  1709     04A3  2CA5               	goto	u1161
  1710     04A4  2CA6               	goto	u1160
  1711     04A5                     u1161:
  1712     04A5  2C94               	goto	l1315
  1713     04A6                     u1160:
  1714     04A6                     l1319:
  1715                           
  1716                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  1717     04A6  083D               	movf	vfpfcnvrt@fmt,w
  1718     04A7  00F6               	movwf	read_prec_or_width@fmt
  1719     04A8  083E               	movf	vfpfcnvrt@ap,w
  1720     04A9  00F7               	movwf	read_prec_or_width@ap
  1721     04AA  120A  118A  22C5  120A  118A  	fcall	_read_prec_or_width
  1722     04AF  0877               	movf	?_read_prec_or_width+1,w
  1723     04B0  1283               	bcf	3,5	;RP0=0, select bank0
  1724     04B1  1303               	bcf	3,6	;RP1=0, select bank0
  1725     04B2  00EC               	movwf	_width+1
  1726     04B3  0876               	movf	?_read_prec_or_width,w
  1727     04B4  00EB               	movwf	_width
  1728     04B5                     l1321:
  1729                           
  1730                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  1731     04B5  1FEC               	btfss	_width+1,7
  1732     04B6  2CB8               	goto	u1171
  1733     04B7  2CB9               	goto	u1170
  1734     04B8                     u1171:
  1735     04B8  2CBF               	goto	l1327
  1736     04B9                     u1170:
  1737     04B9                     l1323:
  1738                           
  1739                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  1740     04B9  146F               	bsf	_flags,0
  1741     04BA                     l1325:
  1742                           
  1743                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  1744     04BA  09EB               	comf	_width,f
  1745     04BB  09EC               	comf	_width+1,f
  1746     04BC  0AEB               	incf	_width,f
  1747     04BD  1903               	skipnz
  1748     04BE  0AEC               	incf	_width+1,f
  1749     04BF                     l1327:
  1750                           
  1751                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1752     04BF  083D               	movf	vfpfcnvrt@fmt,w
  1753     04C0  0084               	movwf	4
  1754     04C1  1383               	bcf	3,7	;select IRP bank0
  1755     04C2  0800               	movf	0,w
  1756     04C3  00C6               	movwf	vfpfcnvrt@cp
  1757     04C4                     l1329:
  1758                           
  1759                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1760     04C4  0846               	movf	vfpfcnvrt@cp,w
  1761     04C5  0084               	movwf	4
  1762     04C6  120A  118A  2003  120A  118A  	fcall	stringdir
  1763     04CB  3A64               	xorlw	100
  1764     04CC  1903               	skipnz
  1765     04CD  2CCF               	goto	u1181
  1766     04CE  2CD0               	goto	u1180
  1767     04CF                     u1181:
  1768     04CF  2CDC               	goto	l1333
  1769     04D0                     u1180:
  1770     04D0                     l1331:
  1771     04D0  0846               	movf	vfpfcnvrt@cp,w
  1772     04D1  0084               	movwf	4
  1773     04D2  120A  118A  2003  120A  118A  	fcall	stringdir
  1774     04D7  3A69               	xorlw	105
  1775     04D8  1D03               	skipz
  1776     04D9  2CDB               	goto	u1191
  1777     04DA  2CDC               	goto	u1190
  1778     04DB                     u1191:
  1779     04DB  2CFC               	goto	l1341
  1780     04DC                     u1190:
  1781     04DC                     l1333:
  1782                           
  1783                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1784     04DC  083E               	movf	vfpfcnvrt@ap,w
  1785     04DD  0084               	movwf	4
  1786     04DE  0800               	movf	0,w
  1787     04DF  00FF               	movwf	btemp+1
  1788     04E0  3002               	movlw	2
  1789     04E1  0780               	addwf	0,f
  1790     04E2  087F               	movf	btemp+1,w
  1791     04E3  0084               	movwf	4
  1792     04E4  0800               	movf	0,w
  1793     04E5  00C1               	movwf	vfpfcnvrt@convarg
  1794     04E6  0A84               	incf	4,f
  1795     04E7  0800               	movf	0,w
  1796     04E8  00C2               	movwf	vfpfcnvrt@convarg+1
  1797     04E9                     l1335:
  1798                           
  1799                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1800     04E9  083D               	movf	vfpfcnvrt@fmt,w
  1801     04EA  0084               	movwf	4
  1802     04EB  0846               	movf	vfpfcnvrt@cp,w
  1803     04EC  3E01               	addlw	1
  1804     04ED  0080               	movwf	0
  1805     04EE                     l1337:
  1806                           
  1807                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  1808     04EE  083B               	movf	vfpfcnvrt@fp,w
  1809     04EF  00AF               	movwf	dtoa@fp
  1810     04F0  083C               	movf	vfpfcnvrt@fp+1,w
  1811     04F1  00B0               	movwf	dtoa@fp+1
  1812     04F2  0842               	movf	vfpfcnvrt@convarg+1,w
  1813     04F3  00B2               	movwf	dtoa@d+1
  1814     04F4  0841               	movf	vfpfcnvrt@convarg,w
  1815     04F5  00B1               	movwf	dtoa@d
  1816     04F6  120A  118A  251E  120A  118A  	fcall	_dtoa
  1817     04FB  2D1D               	goto	l685
  1818     04FC                     l1341:
  1819                           
  1820                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1821     04FC  1283               	bcf	3,5	;RP0=0, select bank0
  1822     04FD  1303               	bcf	3,6	;RP1=0, select bank0
  1823     04FE  083D               	movf	vfpfcnvrt@fmt,w
  1824     04FF  0084               	movwf	4
  1825     0500  3001               	movlw	1
  1826     0501  1383               	bcf	3,7	;select IRP bank0
  1827     0502  0780               	addwf	0,f
  1828     0503  2D1D               	goto	l685
  1829     0504                     l1345:
  1830                           
  1831                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1832     0504  083D               	movf	vfpfcnvrt@fmt,w
  1833     0505  0084               	movwf	4
  1834     0506  0800               	movf	0,w
  1835     0507  0084               	movwf	4
  1836     0508  120A  118A  2003  120A  118A  	fcall	stringdir
  1837     050D  00BF               	movwf	??_vfpfcnvrt
  1838     050E  01C0               	clrf	??_vfpfcnvrt+1
  1839     050F  083F               	movf	??_vfpfcnvrt,w
  1840     0510  00F0               	movwf	fputc@c
  1841     0511  0840               	movf	??_vfpfcnvrt+1,w
  1842     0512  00F1               	movwf	fputc@c+1
  1843     0513  083B               	movf	vfpfcnvrt@fp,w
  1844     0514  00F2               	movwf	fputc@fp
  1845     0515  083C               	movf	vfpfcnvrt@fp+1,w
  1846     0516  00F3               	movwf	fputc@fp+1
  1847     0517  120A  118A  23D2  120A  118A  	fcall	_fputc
  1848     051C  2CFC               	goto	l1341
  1849     051D                     l685:
  1850     051D  0008               	return
  1851     051E                     __end_of_vfpfcnvrt:
  1852                           
  1853                           	psect	text4
  1854     02C5                     __ptext4:	
  1855 ;; *************** function _read_prec_or_width *****************
  1856 ;; Defined at:
  1857 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  1858 ;; Parameters:    Size  Location     Type
  1859 ;;  fmt             1    6[COMMON] PTR PTR const unsigned c
  1860 ;;		 -> vfprintf@cfmt(1), 
  1861 ;;  ap              1    7[COMMON] PTR PTR void [1]
  1862 ;;		 -> sprintf@ap(1), 
  1863 ;; Auto vars:     Size  Location     Type
  1864 ;;  c               1    8[COMMON] unsigned char 
  1865 ;;  n               2    9[COMMON] int 
  1866 ;; Return value:  Size  Location     Type
  1867 ;;                  2    6[COMMON] int 
  1868 ;; Registers used:
  1869 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1870 ;; Tracked objects:
  1871 ;;		On entry : 0/0
  1872 ;;		On exit  : 0/0
  1873 ;;		Unchanged: 0/0
  1874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1875 ;;      Params:         2       0       0       0       0
  1876 ;;      Locals:         3       0       0       0       0
  1877 ;;      Temps:          0       0       0       0       0
  1878 ;;      Totals:         5       0       0       0       0
  1879 ;;Total ram usage:        5 bytes
  1880 ;; Hardware stack levels used: 1
  1881 ;; Hardware stack levels required when called: 1
  1882 ;; This function calls:
  1883 ;;		___wmul
  1884 ;; This function is called by:
  1885 ;;		_vfpfcnvrt
  1886 ;; This function uses a non-reentrant model
  1887 ;;
  1888                           
  1889     02C5                     _read_prec_or_width:	
  1890                           ;psect for function _read_prec_or_width
  1891                           
  1892     02C5                     l1283:	
  1893                           ;incstack = 0
  1894                           ; Regs used in _read_prec_or_width: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1895                           
  1896                           
  1897                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  1898     02C5  01F9               	clrf	read_prec_or_width@n
  1899     02C6  01FA               	clrf	read_prec_or_width@n+1
  1900     02C7                     l1285:
  1901                           
  1902                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  1903     02C7  0876               	movf	read_prec_or_width@fmt,w
  1904     02C8  0084               	movwf	4
  1905     02C9  1383               	bcf	3,7	;select IRP bank0
  1906     02CA  0800               	movf	0,w
  1907     02CB  0084               	movwf	4
  1908     02CC  120A  118A  2003  120A  118A  	fcall	stringdir
  1909     02D1  3A2A               	xorlw	42
  1910     02D2  1D03               	skipz
  1911     02D3  2AD5               	goto	u1131
  1912     02D4  2AD6               	goto	u1130
  1913     02D5                     u1131:
  1914     02D5  2B02               	goto	l1295
  1915     02D6                     u1130:
  1916     02D6                     l1287:
  1917                           
  1918                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  1919     02D6  0876               	movf	read_prec_or_width@fmt,w
  1920     02D7  0084               	movwf	4
  1921     02D8  3001               	movlw	1
  1922     02D9  0780               	addwf	0,f
  1923     02DA                     l1289:
  1924                           
  1925                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  1926     02DA  0877               	movf	read_prec_or_width@ap,w
  1927     02DB  0084               	movwf	4
  1928     02DC  0800               	movf	0,w
  1929     02DD  00FF               	movwf	btemp+1
  1930     02DE  3002               	movlw	2
  1931     02DF  0780               	addwf	0,f
  1932     02E0  087F               	movf	btemp+1,w
  1933     02E1  0084               	movwf	4
  1934     02E2  0800               	movf	0,w
  1935     02E3  00F9               	movwf	read_prec_or_width@n
  1936     02E4  0A84               	incf	4,f
  1937     02E5  0800               	movf	0,w
  1938     02E6  00FA               	movwf	read_prec_or_width@n+1
  1939                           
  1940                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  1941     02E7  2B13               	goto	l1297
  1942     02E8                     l1291:
  1943                           
  1944                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  1945     02E8  087A               	movf	read_prec_or_width@n+1,w
  1946     02E9  00F1               	movwf	___wmul@multiplier+1
  1947     02EA  0879               	movf	read_prec_or_width@n,w
  1948     02EB  00F0               	movwf	___wmul@multiplier
  1949     02EC  300A               	movlw	10
  1950     02ED  00F2               	movwf	___wmul@multiplicand
  1951     02EE  3000               	movlw	0
  1952     02EF  00F3               	movwf	___wmul@multiplicand+1
  1953     02F0  120A  118A  21F8  120A  118A  	fcall	___wmul
  1954     02F5  0878               	movf	read_prec_or_width@c,w
  1955     02F6  0770               	addwf	?___wmul,w
  1956     02F7  00F9               	movwf	read_prec_or_width@n
  1957     02F8  3000               	movlw	0
  1958     02F9  1803               	skipnc
  1959     02FA  3001               	movlw	1
  1960     02FB  0771               	addwf	?___wmul+1,w
  1961     02FC  00FA               	movwf	read_prec_or_width@n+1
  1962     02FD                     l1293:
  1963                           
  1964                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  1965     02FD  0876               	movf	read_prec_or_width@fmt,w
  1966     02FE  0084               	movwf	4
  1967     02FF  3001               	movlw	1
  1968     0300  1383               	bcf	3,7	;select IRP bank0
  1969     0301  0780               	addwf	0,f
  1970     0302                     l1295:
  1971                           
  1972                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  1973     0302  0876               	movf	read_prec_or_width@fmt,w
  1974     0303  0084               	movwf	4
  1975     0304  0800               	movf	0,w
  1976     0305  0084               	movwf	4
  1977     0306  120A  118A  2003  120A  118A  	fcall	stringdir
  1978     030B  3ED0               	addlw	208
  1979     030C  00F8               	movwf	read_prec_or_width@c
  1980     030D  300A               	movlw	10
  1981     030E  0278               	subwf	read_prec_or_width@c,w
  1982     030F  1C03               	skipc
  1983     0310  2B12               	goto	u1141
  1984     0311  2B13               	goto	u1140
  1985     0312                     u1141:
  1986     0312  2AE8               	goto	l1291
  1987     0313                     u1140:
  1988     0313                     l1297:
  1989                           
  1990                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  1991     0313  087A               	movf	read_prec_or_width@n+1,w
  1992     0314  00F7               	movwf	?_read_prec_or_width+1
  1993     0315  0879               	movf	read_prec_or_width@n,w
  1994     0316  00F6               	movwf	?_read_prec_or_width
  1995     0317                     l670:
  1996     0317  0008               	return
  1997     0318                     __end_of_read_prec_or_width:
  1998                           
  1999                           	psect	text5
  2000     01F8                     __ptext5:	
  2001 ;; *************** function ___wmul *****************
  2002 ;; Defined at:
  2003 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\Umul16.c"
  2004 ;; Parameters:    Size  Location     Type
  2005 ;;  multiplier      2    0[COMMON] unsigned int 
  2006 ;;  multiplicand    2    2[COMMON] unsigned int 
  2007 ;; Auto vars:     Size  Location     Type
  2008 ;;  product         2    4[COMMON] unsigned int 
  2009 ;; Return value:  Size  Location     Type
  2010 ;;                  2    0[COMMON] unsigned int 
  2011 ;; Registers used:
  2012 ;;		wreg, status,2, status,0
  2013 ;; Tracked objects:
  2014 ;;		On entry : 0/0
  2015 ;;		On exit  : 0/0
  2016 ;;		Unchanged: 0/0
  2017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2018 ;;      Params:         4       0       0       0       0
  2019 ;;      Locals:         2       0       0       0       0
  2020 ;;      Temps:          0       0       0       0       0
  2021 ;;      Totals:         6       0       0       0       0
  2022 ;;Total ram usage:        6 bytes
  2023 ;; Hardware stack levels used: 1
  2024 ;; This function calls:
  2025 ;;		Nothing
  2026 ;; This function is called by:
  2027 ;;		_read_prec_or_width
  2028 ;; This function uses a non-reentrant model
  2029 ;;
  2030                           
  2031     01F8                     ___wmul:	
  2032                           ;psect for function ___wmul
  2033                           
  2034     01F8                     l1117:	
  2035                           ;incstack = 0
  2036                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2037                           
  2038     01F8  01F4               	clrf	___wmul@product
  2039     01F9  01F5               	clrf	___wmul@product+1
  2040     01FA                     l1119:
  2041     01FA  1C70               	btfss	___wmul@multiplier,0
  2042     01FB  29FD               	goto	u751
  2043     01FC  29FE               	goto	u750
  2044     01FD                     u751:
  2045     01FD  2A04               	goto	l158
  2046     01FE                     u750:
  2047     01FE                     l1121:
  2048     01FE  0872               	movf	___wmul@multiplicand,w
  2049     01FF  07F4               	addwf	___wmul@product,f
  2050     0200  1803               	skipnc
  2051     0201  0AF5               	incf	___wmul@product+1,f
  2052     0202  0873               	movf	___wmul@multiplicand+1,w
  2053     0203  07F5               	addwf	___wmul@product+1,f
  2054     0204                     l158:
  2055     0204  3001               	movlw	1
  2056     0205                     u765:
  2057     0205  1003               	clrc
  2058     0206  0DF2               	rlf	___wmul@multiplicand,f
  2059     0207  0DF3               	rlf	___wmul@multiplicand+1,f
  2060     0208  3EFF               	addlw	-1
  2061     0209  1D03               	skipz
  2062     020A  2A05               	goto	u765
  2063     020B                     l1123:
  2064     020B  3001               	movlw	1
  2065     020C                     u775:
  2066     020C  1003               	clrc
  2067     020D  0CF1               	rrf	___wmul@multiplier+1,f
  2068     020E  0CF0               	rrf	___wmul@multiplier,f
  2069     020F  3EFF               	addlw	-1
  2070     0210  1D03               	skipz
  2071     0211  2A0C               	goto	u775
  2072     0212                     l1125:
  2073     0212  0870               	movf	___wmul@multiplier,w
  2074     0213  0471               	iorwf	___wmul@multiplier+1,w
  2075     0214  1D03               	btfss	3,2
  2076     0215  2A17               	goto	u781
  2077     0216  2A18               	goto	u780
  2078     0217                     u781:
  2079     0217  29FA               	goto	l1119
  2080     0218                     u780:
  2081     0218                     l1127:
  2082     0218  0875               	movf	___wmul@product+1,w
  2083     0219  00F1               	movwf	?___wmul+1
  2084     021A  0874               	movf	___wmul@product,w
  2085     021B  00F0               	movwf	?___wmul
  2086     021C                     l160:
  2087     021C  0008               	return
  2088     021D                     __end_of___wmul:
  2089                           
  2090                           	psect	text6
  2091     051E                     __ptext6:	
  2092 ;; *************** function _dtoa *****************
  2093 ;; Defined at:
  2094 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  2095 ;; Parameters:    Size  Location     Type
  2096 ;;  fp              2   15[BANK0 ] PTR struct _IO_FILE
  2097 ;;		 -> sprintf@f(11), 
  2098 ;;  d               2   17[BANK0 ] int 
  2099 ;; Auto vars:     Size  Location     Type
  2100 ;;  i               2   25[BANK0 ] int 
  2101 ;;  w               2   22[BANK0 ] int 
  2102 ;;  s               1   24[BANK0 ] unsigned char 
  2103 ;;  p               1   21[BANK0 ] _Bool 
  2104 ;; Return value:  Size  Location     Type
  2105 ;;                  1    wreg      void 
  2106 ;; Registers used:
  2107 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2108 ;; Tracked objects:
  2109 ;;		On entry : 0/0
  2110 ;;		On exit  : 0/0
  2111 ;;		Unchanged: 0/0
  2112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2113 ;;      Params:         0       4       0       0       0
  2114 ;;      Locals:         0       8       0       0       0
  2115 ;;      Temps:          0       0       0       0       0
  2116 ;;      Totals:         0      12       0       0       0
  2117 ;;Total ram usage:       12 bytes
  2118 ;; Hardware stack levels used: 1
  2119 ;; Hardware stack levels required when called: 4
  2120 ;; This function calls:
  2121 ;;		___awdiv
  2122 ;;		___awmod
  2123 ;;		_abs
  2124 ;;		_pad
  2125 ;; This function is called by:
  2126 ;;		_vfpfcnvrt
  2127 ;; This function uses a non-reentrant model
  2128 ;;
  2129                           
  2130     051E                     _dtoa:	
  2131                           ;psect for function _dtoa
  2132                           
  2133     051E                     l1237:	
  2134                           ;incstack = 0
  2135                           ; Regs used in _dtoa: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2136                           
  2137                           
  2138                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  2139     051E  3001               	movlw	1
  2140     051F  1283               	bcf	3,5	;RP0=0, select bank0
  2141     0520  1303               	bcf	3,6	;RP1=0, select bank0
  2142     0521  00B5               	movwf	dtoa@p
  2143     0522                     l1239:
  2144                           
  2145                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  2146     0522  1BB2               	btfsc	dtoa@d+1,7
  2147     0523  2D25               	goto	u1031
  2148     0524  2D27               	goto	u1030
  2149     0525                     u1031:
  2150     0525  3001               	movlw	1
  2151     0526  2D28               	goto	u1040
  2152     0527                     u1030:
  2153     0527  3000               	movlw	0
  2154     0528                     u1040:
  2155     0528  00B8               	movwf	dtoa@s
  2156                           
  2157                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  2158     0529  086C               	movf	_width+1,w
  2159     052A  00B7               	movwf	dtoa@w+1
  2160     052B  086B               	movf	_width,w
  2161     052C  00B6               	movwf	dtoa@w
  2162     052D                     l1241:
  2163                           
  2164                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 536:     if (s
  2165     052D  0838               	movf	dtoa@s,w
  2166     052E  1903               	btfsc	3,2
  2167     052F  2D31               	goto	u1051
  2168     0530  2D32               	goto	u1050
  2169     0531                     u1051:
  2170     0531  2D48               	goto	l649
  2171     0532                     u1050:
  2172     0532                     l1243:
  2173                           
  2174                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 541:         --w;
  2175     0532  30FF               	movlw	255
  2176     0533  07B6               	addwf	dtoa@w,f
  2177     0534  1803               	skipnc
  2178     0535  0AB7               	incf	dtoa@w+1,f
  2179     0536  30FF               	movlw	255
  2180     0537  07B7               	addwf	dtoa@w+1,f
  2181     0538                     l1245:
  2182                           
  2183                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  2184     0538  0838               	movf	dtoa@s,w
  2185     0539  1D03               	btfss	3,2
  2186     053A  2D3C               	goto	u1061
  2187     053B  2D3D               	goto	u1060
  2188     053C                     u1061:
  2189     053C  2D42               	goto	l1249
  2190     053D                     u1060:
  2191     053D                     l1247:
  2192     053D  302B               	movlw	43
  2193     053E  00B3               	movwf	_dtoa$603
  2194     053F  3000               	movlw	0
  2195     0540  00B4               	movwf	_dtoa$603+1
  2196     0541  2D46               	goto	l653
  2197     0542                     l1249:
  2198     0542  302D               	movlw	45
  2199     0543  00B3               	movwf	_dtoa$603
  2200     0544  3000               	movlw	0
  2201     0545  00B4               	movwf	_dtoa$603+1
  2202     0546                     l653:
  2203     0546  0833               	movf	_dtoa$603,w
  2204     0547  00B8               	movwf	dtoa@s
  2205     0548                     l649:	
  2206                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 543:     }
  2207                           
  2208                           
  2209                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  2210     0548  301F               	movlw	31
  2211     0549  00B9               	movwf	dtoa@i
  2212     054A  3000               	movlw	0
  2213     054B  00BA               	movwf	dtoa@i+1
  2214     054C                     l1251:
  2215                           
  2216                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  2217     054C  1683               	bsf	3,5	;RP0=1, select bank3
  2218     054D  1703               	bsf	3,6	;RP1=1, select bank3
  2219     054E  01AF               	clrf	(_dbuf^(0+384)+31)
  2220                           
  2221                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  2222     054F  2D8F               	goto	l1263
  2223     0550                     l1253:
  2224                           
  2225                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 564:         --i;
  2226     0550  30FF               	movlw	255
  2227     0551  07B9               	addwf	dtoa@i,f
  2228     0552  1803               	skipnc
  2229     0553  0ABA               	incf	dtoa@i+1,f
  2230     0554  30FF               	movlw	255
  2231     0555  07BA               	addwf	dtoa@i+1,f
  2232     0556                     l1255:
  2233                           
  2234                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  2235     0556  0839               	movf	dtoa@i,w
  2236     0557  3E90               	addlw	(low (_dbuf| (0+256)))& (0+255)
  2237     0558  0084               	movwf	4
  2238     0559  300A               	movlw	10
  2239     055A  00F0               	movwf	___awmod@divisor
  2240     055B  3000               	movlw	0
  2241     055C  00F1               	movwf	___awmod@divisor+1
  2242     055D  0832               	movf	dtoa@d+1,w
  2243     055E  00F3               	movwf	___awmod@dividend+1
  2244     055F  0831               	movf	dtoa@d,w
  2245     0560  00F2               	movwf	___awmod@dividend
  2246     0561  120A  118A  2318  120A  118A  	fcall	___awmod
  2247     0566  0871               	movf	?___awmod+1,w
  2248     0567  00F7               	movwf	abs@a+1
  2249     0568  0870               	movf	?___awmod,w
  2250     0569  00F6               	movwf	abs@a
  2251     056A  120A  118A  216B  120A  118A  	fcall	_abs
  2252     056F  0876               	movf	?_abs,w
  2253     0570  3E30               	addlw	48
  2254     0571  1783               	bsf	3,7	;select IRP bank3
  2255     0572  0080               	movwf	0
  2256     0573                     l1257:
  2257                           
  2258                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  2259     0573  1283               	bcf	3,5	;RP0=0, select bank0
  2260     0574  1303               	bcf	3,6	;RP1=0, select bank0
  2261     0575  01B5               	clrf	dtoa@p
  2262     0576                     l1259:
  2263                           
  2264                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 571:         --w;
  2265     0576  30FF               	movlw	255
  2266     0577  07B6               	addwf	dtoa@w,f
  2267     0578  1803               	skipnc
  2268     0579  0AB7               	incf	dtoa@w+1,f
  2269     057A  30FF               	movlw	255
  2270     057B  07B7               	addwf	dtoa@w+1,f
  2271     057C                     l1261:
  2272                           
  2273                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  2274     057C  300A               	movlw	10
  2275     057D  00F0               	movwf	___awdiv@divisor
  2276     057E  3000               	movlw	0
  2277     057F  00F1               	movwf	___awdiv@divisor+1
  2278     0580  0832               	movf	dtoa@d+1,w
  2279     0581  00F3               	movwf	___awdiv@dividend+1
  2280     0582  0831               	movf	dtoa@d,w
  2281     0583  00F2               	movwf	___awdiv@dividend
  2282     0584  120A  118A  236F  120A  118A  	fcall	___awdiv
  2283     0589  0871               	movf	?___awdiv+1,w
  2284     058A  1283               	bcf	3,5	;RP0=0, select bank0
  2285     058B  1303               	bcf	3,6	;RP1=0, select bank0
  2286     058C  00B2               	movwf	dtoa@d+1
  2287     058D  0870               	movf	?___awdiv,w
  2288     058E  00B1               	movwf	dtoa@d
  2289     058F                     l1263:
  2290                           
  2291                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  2292     058F  1283               	bcf	3,5	;RP0=0, select bank0
  2293     0590  1303               	bcf	3,6	;RP1=0, select bank0
  2294     0591  083A               	movf	dtoa@i+1,w
  2295     0592  3A80               	xorlw	128
  2296     0593  00FF               	movwf	btemp+1
  2297     0594  3080               	movlw	128
  2298     0595  027F               	subwf	btemp+1,w
  2299     0596  1D03               	skipz
  2300     0597  2D9A               	goto	u1075
  2301     0598  3001               	movlw	1
  2302     0599  0239               	subwf	dtoa@i,w
  2303     059A                     u1075:
  2304     059A  1C03               	skipc
  2305     059B  2D9D               	goto	u1071
  2306     059C  2D9E               	goto	u1070
  2307     059D                     u1071:
  2308     059D  2DBE               	goto	l1273
  2309     059E                     u1070:
  2310     059E                     l1265:
  2311     059E  1283               	bcf	3,5	;RP0=0, select bank0
  2312     059F  1303               	bcf	3,6	;RP1=0, select bank0
  2313     05A0  0831               	movf	dtoa@d,w
  2314     05A1  0432               	iorwf	dtoa@d+1,w
  2315     05A2  1D03               	btfss	3,2
  2316     05A3  2DA5               	goto	u1081
  2317     05A4  2DA6               	goto	u1080
  2318     05A5                     u1081:
  2319     05A5  2D50               	goto	l1253
  2320     05A6                     u1080:
  2321     05A6                     l1267:
  2322     05A6  0835               	movf	dtoa@p,w
  2323     05A7  1D03               	btfss	3,2
  2324     05A8  2DAA               	goto	u1091
  2325     05A9  2DAB               	goto	u1090
  2326     05AA                     u1091:
  2327     05AA  2D50               	goto	l1253
  2328     05AB                     u1090:
  2329     05AB                     l1269:
  2330     05AB  0837               	movf	dtoa@w+1,w
  2331     05AC  3A80               	xorlw	128
  2332     05AD  00FF               	movwf	btemp+1
  2333     05AE  3080               	movlw	128
  2334     05AF  027F               	subwf	btemp+1,w
  2335     05B0  1D03               	skipz
  2336     05B1  2DB4               	goto	u1105
  2337     05B2  3001               	movlw	1
  2338     05B3  0236               	subwf	dtoa@w,w
  2339     05B4                     u1105:
  2340     05B4  1C03               	skipc
  2341     05B5  2DB7               	goto	u1101
  2342     05B6  2DB8               	goto	u1100
  2343     05B7                     u1101:
  2344     05B7  2DBE               	goto	l1273
  2345     05B8                     u1100:
  2346     05B8                     l1271:
  2347     05B8  1283               	bcf	3,5	;RP0=0, select bank0
  2348     05B9  1303               	bcf	3,6	;RP1=0, select bank0
  2349     05BA  18EF               	btfsc	_flags,1
  2350     05BB  2DBD               	goto	u1111
  2351     05BC  2DBE               	goto	u1110
  2352     05BD                     u1111:
  2353     05BD  2D50               	goto	l1253
  2354     05BE                     u1110:
  2355     05BE                     l1273:
  2356                           
  2357                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  2358     05BE  1283               	bcf	3,5	;RP0=0, select bank0
  2359     05BF  1303               	bcf	3,6	;RP1=0, select bank0
  2360     05C0  0838               	movf	dtoa@s,w
  2361     05C1  1903               	btfsc	3,2
  2362     05C2  2DC4               	goto	u1121
  2363     05C3  2DC5               	goto	u1120
  2364     05C4                     u1121:
  2365     05C4  2DD1               	goto	l1279
  2366     05C5                     u1120:
  2367     05C5                     l1275:
  2368                           
  2369                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 577:         --i;
  2370     05C5  30FF               	movlw	255
  2371     05C6  07B9               	addwf	dtoa@i,f
  2372     05C7  1803               	skipnc
  2373     05C8  0ABA               	incf	dtoa@i+1,f
  2374     05C9  30FF               	movlw	255
  2375     05CA  07BA               	addwf	dtoa@i+1,f
  2376     05CB                     l1277:
  2377                           
  2378                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  2379     05CB  0839               	movf	dtoa@i,w
  2380     05CC  3E90               	addlw	(low (_dbuf| (0+256)))& (0+255)
  2381     05CD  0084               	movwf	4
  2382     05CE  0838               	movf	dtoa@s,w
  2383     05CF  1783               	bsf	3,7	;select IRP bank3
  2384     05D0  0080               	movwf	0
  2385     05D1                     l1279:
  2386                           
  2387                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2388     05D1  082F               	movf	dtoa@fp,w
  2389     05D2  00A8               	movwf	pad@fp
  2390     05D3  0830               	movf	dtoa@fp+1,w
  2391     05D4  00A9               	movwf	pad@fp+1
  2392     05D5  0839               	movf	dtoa@i,w
  2393     05D6  3E90               	addlw	(low (_dbuf| (0+256)))& (0+255)
  2394     05D7  00AA               	movwf	pad@buf
  2395     05D8  0837               	movf	dtoa@w+1,w
  2396     05D9  00AC               	movwf	pad@p+1
  2397     05DA  0836               	movf	dtoa@w,w
  2398     05DB  00AB               	movwf	pad@p
  2399     05DC  120A  118A  2272  120A  118A  	fcall	_pad
  2400     05E1                     l662:
  2401     05E1  0008               	return
  2402     05E2                     __end_of_dtoa:
  2403                           
  2404                           	psect	text7
  2405     0272                     __ptext7:	
  2406 ;; *************** function _pad *****************
  2407 ;; Defined at:
  2408 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  2409 ;; Parameters:    Size  Location     Type
  2410 ;;  fp              2    8[BANK0 ] PTR struct _IO_FILE
  2411 ;;		 -> sprintf@f(11), 
  2412 ;;  buf             1   10[BANK0 ] PTR unsigned char 
  2413 ;;		 -> dbuf(32), 
  2414 ;;  p               2   11[BANK0 ] int 
  2415 ;; Auto vars:     Size  Location     Type
  2416 ;;  i               2   13[BANK0 ] int 
  2417 ;; Return value:  Size  Location     Type
  2418 ;;                  1    wreg      void 
  2419 ;; Registers used:
  2420 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2421 ;; Tracked objects:
  2422 ;;		On entry : 0/0
  2423 ;;		On exit  : 0/0
  2424 ;;		Unchanged: 0/0
  2425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2426 ;;      Params:         0       5       0       0       0
  2427 ;;      Locals:         0       2       0       0       0
  2428 ;;      Temps:          1       0       0       0       0
  2429 ;;      Totals:         1       7       0       0       0
  2430 ;;Total ram usage:        8 bytes
  2431 ;; Hardware stack levels used: 1
  2432 ;; Hardware stack levels required when called: 3
  2433 ;; This function calls:
  2434 ;;		_fputc
  2435 ;;		_fputs
  2436 ;; This function is called by:
  2437 ;;		_dtoa
  2438 ;; This function uses a non-reentrant model
  2439 ;;
  2440                           
  2441     0272                     _pad:	
  2442                           ;psect for function _pad
  2443                           
  2444     0272                     l1213:	
  2445                           ;incstack = 0
  2446                           ; Regs used in _pad: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2447                           
  2448                           
  2449                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  2450     0272  1283               	bcf	3,5	;RP0=0, select bank0
  2451     0273  1303               	bcf	3,6	;RP1=0, select bank0
  2452     0274  1C6F               	btfss	_flags,0
  2453     0275  2A77               	goto	u981
  2454     0276  2A78               	goto	u980
  2455     0277                     u981:
  2456     0277  2A83               	goto	l1217
  2457     0278                     u980:
  2458     0278                     l1215:
  2459                           
  2460                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  2461     0278  082A               	movf	pad@buf,w
  2462     0279  00A0               	movwf	fputs@s
  2463     027A  0828               	movf	pad@fp,w
  2464     027B  00A1               	movwf	fputs@fp
  2465     027C  0829               	movf	pad@fp+1,w
  2466     027D  00A2               	movwf	fputs@fp+1
  2467     027E  120A  118A  2247  120A  118A  	fcall	_fputs
  2468     0283                     l1217:
  2469                           
  2470                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  2471     0283  1283               	bcf	3,5	;RP0=0, select bank0
  2472     0284  1303               	bcf	3,6	;RP1=0, select bank0
  2473     0285  1FAC               	btfss	pad@p+1,7
  2474     0286  2A88               	goto	u991
  2475     0287  2A89               	goto	u990
  2476     0288                     u991:
  2477     0288  2A8B               	goto	l641
  2478     0289                     u990:
  2479     0289                     l1219:
  2480                           
  2481                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  2482     0289  01AB               	clrf	pad@p
  2483     028A  01AC               	clrf	pad@p+1
  2484     028B                     l641:	
  2485                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 207:  }
  2486                           
  2487                           
  2488                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  2489     028B  01AD               	clrf	pad@i
  2490     028C  01AE               	clrf	pad@i+1
  2491                           
  2492                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2493     028D  2AA5               	goto	l1225
  2494     028E                     l1221:
  2495                           
  2496                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  2497     028E  3020               	movlw	32
  2498     028F  00F0               	movwf	fputc@c
  2499     0290  3000               	movlw	0
  2500     0291  00F1               	movwf	fputc@c+1
  2501     0292  1283               	bcf	3,5	;RP0=0, select bank0
  2502     0293  1303               	bcf	3,6	;RP1=0, select bank0
  2503     0294  0828               	movf	pad@fp,w
  2504     0295  00F2               	movwf	fputc@fp
  2505     0296  0829               	movf	pad@fp+1,w
  2506     0297  00F3               	movwf	fputc@fp+1
  2507     0298  120A  118A  23D2  120A  118A  	fcall	_fputc
  2508     029D                     l1223:
  2509                           
  2510                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 211:         ++i;
  2511     029D  3001               	movlw	1
  2512     029E  1283               	bcf	3,5	;RP0=0, select bank0
  2513     029F  1303               	bcf	3,6	;RP1=0, select bank0
  2514     02A0  07AD               	addwf	pad@i,f
  2515     02A1  1803               	skipnc
  2516     02A2  0AAE               	incf	pad@i+1,f
  2517     02A3  3000               	movlw	0
  2518     02A4  07AE               	addwf	pad@i+1,f
  2519     02A5                     l1225:
  2520                           
  2521                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2522     02A5  082E               	movf	pad@i+1,w
  2523     02A6  3A80               	xorlw	128
  2524     02A7  00FD               	movwf	??_pad
  2525     02A8  082C               	movf	pad@p+1,w
  2526     02A9  3A80               	xorlw	128
  2527     02AA  027D               	subwf	??_pad,w
  2528     02AB  1D03               	skipz
  2529     02AC  2AAF               	goto	u1005
  2530     02AD  082B               	movf	pad@p,w
  2531     02AE  022D               	subwf	pad@i,w
  2532     02AF                     u1005:
  2533     02AF  1C03               	skipc
  2534     02B0  2AB2               	goto	u1001
  2535     02B1  2AB3               	goto	u1000
  2536     02B2                     u1001:
  2537     02B2  2A8E               	goto	l1221
  2538     02B3                     u1000:
  2539     02B3                     l644:
  2540                           
  2541                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  2542     02B3  1283               	bcf	3,5	;RP0=0, select bank0
  2543     02B4  1303               	bcf	3,6	;RP1=0, select bank0
  2544     02B5  186F               	btfsc	_flags,0
  2545     02B6  2AB8               	goto	u1011
  2546     02B7  2AB9               	goto	u1010
  2547     02B8                     u1011:
  2548     02B8  2AC4               	goto	l646
  2549     02B9                     u1010:
  2550     02B9                     l1227:
  2551                           
  2552                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  2553     02B9  082A               	movf	pad@buf,w
  2554     02BA  00A0               	movwf	fputs@s
  2555     02BB  0828               	movf	pad@fp,w
  2556     02BC  00A1               	movwf	fputs@fp
  2557     02BD  0829               	movf	pad@fp+1,w
  2558     02BE  00A2               	movwf	fputs@fp+1
  2559     02BF  120A  118A  2247  120A  118A  	fcall	_fputs
  2560     02C4                     l646:
  2561     02C4  0008               	return
  2562     02C5                     __end_of_pad:
  2563                           
  2564                           	psect	text8
  2565     0247                     __ptext8:	
  2566 ;; *************** function _fputs *****************
  2567 ;; Defined at:
  2568 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_fputs.c"
  2569 ;; Parameters:    Size  Location     Type
  2570 ;;  s               1    0[BANK0 ] PTR const unsigned char 
  2571 ;;		 -> dbuf(32), 
  2572 ;;  fp              2    1[BANK0 ] PTR struct _IO_FILE
  2573 ;;		 -> sprintf@f(11), 
  2574 ;; Auto vars:     Size  Location     Type
  2575 ;;  i               2    6[BANK0 ] int 
  2576 ;;  c               1    5[BANK0 ] unsigned char 
  2577 ;; Return value:  Size  Location     Type
  2578 ;;                  2    0[BANK0 ] int 
  2579 ;; Registers used:
  2580 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2581 ;; Tracked objects:
  2582 ;;		On entry : 0/0
  2583 ;;		On exit  : 0/0
  2584 ;;		Unchanged: 0/0
  2585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2586 ;;      Params:         0       3       0       0       0
  2587 ;;      Locals:         0       3       0       0       0
  2588 ;;      Temps:          0       2       0       0       0
  2589 ;;      Totals:         0       8       0       0       0
  2590 ;;Total ram usage:        8 bytes
  2591 ;; Hardware stack levels used: 1
  2592 ;; Hardware stack levels required when called: 2
  2593 ;; This function calls:
  2594 ;;		_fputc
  2595 ;; This function is called by:
  2596 ;;		_pad
  2597 ;; This function uses a non-reentrant model
  2598 ;;
  2599                           
  2600     0247                     _fputs:	
  2601                           ;psect for function _fputs
  2602                           
  2603     0247                     l1109:	
  2604                           ;incstack = 0
  2605                           ; Regs used in _fputs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2606                           
  2607     0247  1283               	bcf	3,5	;RP0=0, select bank0
  2608     0248  1303               	bcf	3,6	;RP1=0, select bank0
  2609     0249  01A6               	clrf	fputs@i
  2610     024A  01A7               	clrf	fputs@i+1
  2611     024B  2A64               	goto	l1115
  2612     024C                     l1111:
  2613     024C  0825               	movf	fputs@c,w
  2614     024D  00A3               	movwf	??_fputs
  2615     024E  01A4               	clrf	??_fputs+1
  2616     024F  0823               	movf	??_fputs,w
  2617     0250  00F0               	movwf	fputc@c
  2618     0251  0824               	movf	??_fputs+1,w
  2619     0252  00F1               	movwf	fputc@c+1
  2620     0253  0821               	movf	fputs@fp,w
  2621     0254  00F2               	movwf	fputc@fp
  2622     0255  0822               	movf	fputs@fp+1,w
  2623     0256  00F3               	movwf	fputc@fp+1
  2624     0257  120A  118A  23D2  120A  118A  	fcall	_fputc
  2625     025C                     l1113:
  2626     025C  3001               	movlw	1
  2627     025D  1283               	bcf	3,5	;RP0=0, select bank0
  2628     025E  1303               	bcf	3,6	;RP1=0, select bank0
  2629     025F  07A6               	addwf	fputs@i,f
  2630     0260  1803               	skipnc
  2631     0261  0AA7               	incf	fputs@i+1,f
  2632     0262  3000               	movlw	0
  2633     0263  07A7               	addwf	fputs@i+1,f
  2634     0264                     l1115:
  2635     0264  0826               	movf	fputs@i,w
  2636     0265  0720               	addwf	fputs@s,w
  2637     0266  00A3               	movwf	??_fputs
  2638     0267  0823               	movf	??_fputs,w
  2639     0268  0084               	movwf	4
  2640     0269  1783               	bsf	3,7	;select IRP bank2
  2641     026A  0800               	movf	0,w
  2642     026B  00A5               	movwf	fputs@c
  2643     026C  0825               	movf	fputs@c,w
  2644     026D  1D03               	btfss	3,2
  2645     026E  2A70               	goto	u741
  2646     026F  2A71               	goto	u740
  2647     0270                     u741:
  2648     0270  2A4C               	goto	l1111
  2649     0271                     u740:
  2650     0271                     l718:
  2651     0271  0008               	return
  2652     0272                     __end_of_fputs:
  2653                           
  2654                           	psect	text9
  2655     03D2                     __ptext9:	
  2656 ;; *************** function _fputc *****************
  2657 ;; Defined at:
  2658 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_fputc.c"
  2659 ;; Parameters:    Size  Location     Type
  2660 ;;  c               2    0[COMMON] int 
  2661 ;;  fp              2    2[COMMON] PTR struct _IO_FILE
  2662 ;;		 -> sprintf@f(11), 
  2663 ;; Auto vars:     Size  Location     Type
  2664 ;;		None
  2665 ;; Return value:  Size  Location     Type
  2666 ;;                  2    0[COMMON] int 
  2667 ;; Registers used:
  2668 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2669 ;; Tracked objects:
  2670 ;;		On entry : 0/0
  2671 ;;		On exit  : 0/0
  2672 ;;		Unchanged: 0/0
  2673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2674 ;;      Params:         4       0       0       0       0
  2675 ;;      Locals:         0       0       0       0       0
  2676 ;;      Temps:          9       0       0       0       0
  2677 ;;      Totals:        13       0       0       0       0
  2678 ;;Total ram usage:       13 bytes
  2679 ;; Hardware stack levels used: 1
  2680 ;; Hardware stack levels required when called: 1
  2681 ;; This function calls:
  2682 ;;		_putch
  2683 ;; This function is called by:
  2684 ;;		_pad
  2685 ;;		_vfpfcnvrt
  2686 ;;		_fputs
  2687 ;; This function uses a non-reentrant model
  2688 ;;
  2689                           
  2690     03D2                     _fputc:	
  2691                           ;psect for function _fputc
  2692                           
  2693     03D2                     l1095:	
  2694                           ;incstack = 0
  2695                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2696                           
  2697     03D2  0872               	movf	fputc@fp,w
  2698     03D3  0473               	iorwf	fputc@fp+1,w
  2699     03D4  1903               	btfsc	3,2
  2700     03D5  2BD7               	goto	u691
  2701     03D6  2BD8               	goto	u690
  2702     03D7                     u691:
  2703     03D7  2BDE               	goto	l1099
  2704     03D8                     u690:
  2705     03D8                     l1097:
  2706     03D8  0872               	movf	fputc@fp,w
  2707     03D9  0473               	iorwf	fputc@fp+1,w
  2708     03DA  1D03               	btfss	3,2
  2709     03DB  2BDD               	goto	u701
  2710     03DC  2BDE               	goto	u700
  2711     03DD                     u701:
  2712     03DD  2BE5               	goto	l1101
  2713     03DE                     u700:
  2714     03DE                     l1099:
  2715     03DE  0870               	movf	fputc@c,w
  2716     03DF  120A  118A  213E  120A  118A  	fcall	_putch
  2717     03E4  2C6B               	goto	l710
  2718     03E5                     l1101:
  2719     03E5  0872               	movf	fputc@fp,w
  2720     03E6  3E09               	addlw	9
  2721     03E7  00F4               	movwf	??_fputc
  2722     03E8  0873               	movf	fputc@fp+1,w
  2723     03E9  1803               	skipnc
  2724     03EA  3E01               	addlw	1
  2725     03EB  3E00               	addlw	0
  2726     03EC  00F5               	movwf	??_fputc+1
  2727     03ED  0874               	movf	??_fputc,w
  2728     03EE  0084               	movwf	4
  2729     03EF  1783               	bsf	3,7
  2730     03F0  1C75               	btfss	??_fputc+1,0
  2731     03F1  1383               	bcf	3,7
  2732     03F2  0800               	movf	0,w
  2733     03F3  00F6               	movwf	??_fputc+2
  2734     03F4  0A84               	incf	4,f
  2735     03F5  0800               	movf	0,w
  2736     03F6  00F7               	movwf	??_fputc+3
  2737     03F7  0876               	movf	??_fputc+2,w
  2738     03F8  0477               	iorwf	??_fputc+3,w
  2739     03F9  1903               	btfsc	3,2
  2740     03FA  2BFC               	goto	u711
  2741     03FB  2BFD               	goto	u710
  2742     03FC                     u711:
  2743     03FC  2C2F               	goto	l1105
  2744     03FD                     u710:
  2745     03FD                     l1103:
  2746     03FD  0872               	movf	fputc@fp,w
  2747     03FE  3E09               	addlw	9
  2748     03FF  00F4               	movwf	??_fputc
  2749     0400  0873               	movf	fputc@fp+1,w
  2750     0401  1803               	skipnc
  2751     0402  3E01               	addlw	1
  2752     0403  3E00               	addlw	0
  2753     0404  00F5               	movwf	??_fputc+1
  2754     0405  0874               	movf	??_fputc,w
  2755     0406  0084               	movwf	4
  2756     0407  1783               	bsf	3,7
  2757     0408  1C75               	btfss	??_fputc+1,0
  2758     0409  1383               	bcf	3,7
  2759     040A  0800               	movf	0,w
  2760     040B  00F6               	movwf	??_fputc+2
  2761     040C  0A84               	incf	4,f
  2762     040D  0800               	movf	0,w
  2763     040E  00F7               	movwf	??_fputc+3
  2764     040F  0872               	movf	fputc@fp,w
  2765     0410  3E02               	addlw	2
  2766     0411  00F8               	movwf	??_fputc+4
  2767     0412  0873               	movf	fputc@fp+1,w
  2768     0413  1803               	skipnc
  2769     0414  3E01               	addlw	1
  2770     0415  3E00               	addlw	0
  2771     0416  00F9               	movwf	??_fputc+5
  2772     0417  0878               	movf	??_fputc+4,w
  2773     0418  0084               	movwf	4
  2774     0419  1783               	bsf	3,7
  2775     041A  1C79               	btfss	??_fputc+5,0
  2776     041B  1383               	bcf	3,7
  2777     041C  0800               	movf	0,w
  2778     041D  00FA               	movwf	??_fputc+6
  2779     041E  0A84               	incf	4,f
  2780     041F  0800               	movf	0,w
  2781     0420  00FB               	movwf	??_fputc+7
  2782     0421  087B               	movf	??_fputc+7,w
  2783     0422  3A80               	xorlw	128
  2784     0423  00FC               	movwf	??_fputc+8
  2785     0424  0877               	movf	??_fputc+3,w
  2786     0425  3A80               	xorlw	128
  2787     0426  027C               	subwf	??_fputc+8,w
  2788     0427  1D03               	skipz
  2789     0428  2C2B               	goto	u725
  2790     0429  0876               	movf	??_fputc+2,w
  2791     042A  027A               	subwf	??_fputc+6,w
  2792     042B                     u725:
  2793     042B  1803               	skipnc
  2794     042C  2C2E               	goto	u721
  2795     042D  2C2F               	goto	u720
  2796     042E                     u721:
  2797     042E  2C6B               	goto	l710
  2798     042F                     u720:
  2799     042F                     l1105:
  2800     042F  0872               	movf	fputc@fp,w
  2801     0430  0084               	movwf	4
  2802     0431  1783               	bsf	3,7
  2803     0432  1C73               	btfss	fputc@fp+1,0
  2804     0433  1383               	bcf	3,7
  2805     0434  0800               	movf	0,w
  2806     0435  00F4               	movwf	??_fputc
  2807     0436  0A84               	incf	4,f
  2808     0437  0800               	movf	0,w
  2809     0438  00F5               	movwf	??_fputc+1
  2810     0439  0872               	movf	fputc@fp,w
  2811     043A  3E02               	addlw	2
  2812     043B  00F6               	movwf	??_fputc+2
  2813     043C  0873               	movf	fputc@fp+1,w
  2814     043D  1803               	skipnc
  2815     043E  3E01               	addlw	1
  2816     043F  3E00               	addlw	0
  2817     0440  00F7               	movwf	??_fputc+3
  2818     0441  0876               	movf	??_fputc+2,w
  2819     0442  0084               	movwf	4
  2820     0443  1783               	bsf	3,7
  2821     0444  1C77               	btfss	??_fputc+3,0
  2822     0445  1383               	bcf	3,7
  2823     0446  0800               	movf	0,w
  2824     0447  0774               	addwf	??_fputc,w
  2825     0448  00F9               	movwf	??_fputc+5
  2826     0449  0875               	movf	??_fputc+1,w
  2827     044A  00F8               	movwf	??_fputc+4
  2828     044B  1803               	skipnc
  2829     044C  0AF8               	incf	??_fputc+4,f
  2830     044D  1F80               	btfss	0,7
  2831     044E  2C50               	goto	u730
  2832     044F  03F8               	decf	??_fputc+4,f
  2833     0450                     u730:
  2834     0450  0878               	movf	??_fputc+4,w
  2835     0451  00FA               	movwf	??_fputc+6
  2836     0452  0879               	movf	??_fputc+5,w
  2837     0453  0084               	movwf	4
  2838     0454  1783               	bsf	3,7
  2839     0455  1C7A               	btfss	??_fputc+6,0
  2840     0456  1383               	bcf	3,7
  2841     0457  0870               	movf	fputc@c,w
  2842     0458  0080               	movwf	0
  2843     0459  0872               	movf	fputc@fp,w
  2844     045A  3E02               	addlw	2
  2845     045B  00F4               	movwf	??_fputc
  2846     045C  0873               	movf	fputc@fp+1,w
  2847     045D  1803               	skipnc
  2848     045E  3E01               	addlw	1
  2849     045F  3E00               	addlw	0
  2850     0460  00F5               	movwf	??_fputc+1
  2851     0461  0874               	movf	??_fputc,w
  2852     0462  0084               	movwf	4
  2853     0463  1783               	bsf	3,7
  2854     0464  1C75               	btfss	??_fputc+1,0
  2855     0465  1383               	bcf	3,7
  2856     0466  3001               	movlw	1
  2857     0467  0780               	addwf	0,f
  2858     0468  0A84               	incf	4,f
  2859     0469  1803               	skipnc
  2860     046A  0A80               	incf	0,f
  2861     046B                     l710:
  2862     046B  0008               	return
  2863     046C                     __end_of_fputc:
  2864                           
  2865                           	psect	text10
  2866     013E                     __ptext10:	
  2867 ;; *************** function _putch *****************
  2868 ;; Defined at:
  2869 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\putch.c"
  2870 ;; Parameters:    Size  Location     Type
  2871 ;;  c               1    wreg     unsigned char 
  2872 ;; Auto vars:     Size  Location     Type
  2873 ;;  c               1    0[COMMON] unsigned char 
  2874 ;; Return value:  Size  Location     Type
  2875 ;;                  1    wreg      void 
  2876 ;; Registers used:
  2877 ;;		wreg
  2878 ;; Tracked objects:
  2879 ;;		On entry : 0/0
  2880 ;;		On exit  : 0/0
  2881 ;;		Unchanged: 0/0
  2882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2883 ;;      Params:         0       0       0       0       0
  2884 ;;      Locals:         0       0       0       0       0
  2885 ;;      Temps:          0       0       0       0       0
  2886 ;;      Totals:         0       0       0       0       0
  2887 ;;Total ram usage:        0 bytes
  2888 ;; Hardware stack levels used: 1
  2889 ;; This function calls:
  2890 ;;		Nothing
  2891 ;; This function is called by:
  2892 ;;		_fputc
  2893 ;; This function uses a non-reentrant model
  2894 ;;
  2895                           
  2896     013E                     _putch:	
  2897                           ;psect for function _putch
  2898                           
  2899     013E                     l721:	
  2900                           ;incstack = 0
  2901                           ; Regs used in _putch: [wreg]
  2902                           
  2903     013E  0008               	return
  2904     013F                     __end_of_putch:
  2905                           
  2906                           	psect	text11
  2907     016B                     __ptext11:	
  2908 ;; *************** function _abs *****************
  2909 ;; Defined at:
  2910 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\abs.c"
  2911 ;; Parameters:    Size  Location     Type
  2912 ;;  a               2    6[COMMON] int 
  2913 ;; Auto vars:     Size  Location     Type
  2914 ;;		None
  2915 ;; Return value:  Size  Location     Type
  2916 ;;                  2    6[COMMON] int 
  2917 ;; Registers used:
  2918 ;;		wreg, status,2, status,0
  2919 ;; Tracked objects:
  2920 ;;		On entry : 0/0
  2921 ;;		On exit  : 0/0
  2922 ;;		Unchanged: 0/0
  2923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2924 ;;      Params:         2       0       0       0       0
  2925 ;;      Locals:         0       0       0       0       0
  2926 ;;      Temps:          2       0       0       0       0
  2927 ;;      Totals:         4       0       0       0       0
  2928 ;;Total ram usage:        4 bytes
  2929 ;; Hardware stack levels used: 1
  2930 ;; This function calls:
  2931 ;;		Nothing
  2932 ;; This function is called by:
  2933 ;;		_dtoa
  2934 ;; This function uses a non-reentrant model
  2935 ;;
  2936                           
  2937     016B                     _abs:	
  2938                           ;psect for function _abs
  2939                           
  2940     016B                     l1229:	
  2941                           ;incstack = 0
  2942                           ; Regs used in _abs: [wreg+status,2+status,0]
  2943                           
  2944     016B  1BF7               	btfsc	abs@a+1,7
  2945     016C  296E               	goto	u1021
  2946     016D  296F               	goto	u1020
  2947     016E                     u1021:
  2948     016E  2970               	goto	l1233
  2949     016F                     u1020:
  2950     016F                     l1231:
  2951     016F  297B               	goto	l698
  2952     0170                     l1233:
  2953     0170  0976               	comf	abs@a,w
  2954     0171  00F8               	movwf	??_abs
  2955     0172  0977               	comf	abs@a+1,w
  2956     0173  00F9               	movwf	??_abs+1
  2957     0174  0AF8               	incf	??_abs,f
  2958     0175  1903               	skipnz
  2959     0176  0AF9               	incf	??_abs+1,f
  2960     0177  0878               	movf	??_abs,w
  2961     0178  00F6               	movwf	?_abs
  2962     0179  0879               	movf	??_abs+1,w
  2963     017A  00F7               	movwf	?_abs+1
  2964     017B                     l698:
  2965     017B  0008               	return
  2966     017C                     __end_of_abs:
  2967                           
  2968                           	psect	text12
  2969     0318                     __ptext12:	
  2970 ;; *************** function ___awmod *****************
  2971 ;; Defined at:
  2972 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
  2973 ;; Parameters:    Size  Location     Type
  2974 ;;  divisor         2    0[COMMON] int 
  2975 ;;  dividend        2    2[COMMON] int 
  2976 ;; Auto vars:     Size  Location     Type
  2977 ;;  sign            1    5[COMMON] unsigned char 
  2978 ;;  counter         1    4[COMMON] unsigned char 
  2979 ;; Return value:  Size  Location     Type
  2980 ;;                  2    0[COMMON] int 
  2981 ;; Registers used:
  2982 ;;		wreg, status,2, status,0
  2983 ;; Tracked objects:
  2984 ;;		On entry : 0/0
  2985 ;;		On exit  : 0/0
  2986 ;;		Unchanged: 0/0
  2987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2988 ;;      Params:         4       0       0       0       0
  2989 ;;      Locals:         2       0       0       0       0
  2990 ;;      Temps:          0       0       0       0       0
  2991 ;;      Totals:         6       0       0       0       0
  2992 ;;Total ram usage:        6 bytes
  2993 ;; Hardware stack levels used: 1
  2994 ;; This function calls:
  2995 ;;		Nothing
  2996 ;; This function is called by:
  2997 ;;		_dtoa
  2998 ;; This function uses a non-reentrant model
  2999 ;;
  3000                           
  3001     0318                     ___awmod:	
  3002                           ;psect for function ___awmod
  3003                           
  3004     0318                     l1175:	
  3005                           ;incstack = 0
  3006                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3007                           
  3008     0318  01F5               	clrf	___awmod@sign
  3009     0319                     l1177:
  3010     0319  1FF3               	btfss	___awmod@dividend+1,7
  3011     031A  2B1C               	goto	u891
  3012     031B  2B1D               	goto	u890
  3013     031C                     u891:
  3014     031C  2B24               	goto	l1183
  3015     031D                     u890:
  3016     031D                     l1179:
  3017     031D  09F2               	comf	___awmod@dividend,f
  3018     031E  09F3               	comf	___awmod@dividend+1,f
  3019     031F  0AF2               	incf	___awmod@dividend,f
  3020     0320  1903               	skipnz
  3021     0321  0AF3               	incf	___awmod@dividend+1,f
  3022     0322                     l1181:
  3023     0322  3001               	movlw	1
  3024     0323  00F5               	movwf	___awmod@sign
  3025     0324                     l1183:
  3026     0324  1FF1               	btfss	___awmod@divisor+1,7
  3027     0325  2B27               	goto	u901
  3028     0326  2B28               	goto	u900
  3029     0327                     u901:
  3030     0327  2B2D               	goto	l1187
  3031     0328                     u900:
  3032     0328                     l1185:
  3033     0328  09F0               	comf	___awmod@divisor,f
  3034     0329  09F1               	comf	___awmod@divisor+1,f
  3035     032A  0AF0               	incf	___awmod@divisor,f
  3036     032B  1903               	skipnz
  3037     032C  0AF1               	incf	___awmod@divisor+1,f
  3038     032D                     l1187:
  3039     032D  0870               	movf	___awmod@divisor,w
  3040     032E  0471               	iorwf	___awmod@divisor+1,w
  3041     032F  1903               	btfsc	3,2
  3042     0330  2B32               	goto	u911
  3043     0331  2B33               	goto	u910
  3044     0332                     u911:
  3045     0332  2B60               	goto	l1205
  3046     0333                     u910:
  3047     0333                     l1189:
  3048     0333  3001               	movlw	1
  3049     0334  00F4               	movwf	___awmod@counter
  3050     0335  2B3F               	goto	l1195
  3051     0336                     l1191:
  3052     0336  3001               	movlw	1
  3053     0337                     u925:
  3054     0337  1003               	clrc
  3055     0338  0DF0               	rlf	___awmod@divisor,f
  3056     0339  0DF1               	rlf	___awmod@divisor+1,f
  3057     033A  3EFF               	addlw	-1
  3058     033B  1D03               	skipz
  3059     033C  2B37               	goto	u925
  3060     033D                     l1193:
  3061     033D  3001               	movlw	1
  3062     033E  07F4               	addwf	___awmod@counter,f
  3063     033F                     l1195:
  3064     033F  1FF1               	btfss	___awmod@divisor+1,7
  3065     0340  2B42               	goto	u931
  3066     0341  2B43               	goto	u930
  3067     0342                     u931:
  3068     0342  2B36               	goto	l1191
  3069     0343                     u930:
  3070     0343                     l1197:
  3071     0343  0871               	movf	___awmod@divisor+1,w
  3072     0344  0273               	subwf	___awmod@dividend+1,w
  3073     0345  1D03               	skipz
  3074     0346  2B49               	goto	u945
  3075     0347  0870               	movf	___awmod@divisor,w
  3076     0348  0272               	subwf	___awmod@dividend,w
  3077     0349                     u945:
  3078     0349  1C03               	skipc
  3079     034A  2B4C               	goto	u941
  3080     034B  2B4D               	goto	u940
  3081     034C                     u941:
  3082     034C  2B53               	goto	l1201
  3083     034D                     u940:
  3084     034D                     l1199:
  3085     034D  0870               	movf	___awmod@divisor,w
  3086     034E  02F2               	subwf	___awmod@dividend,f
  3087     034F  0871               	movf	___awmod@divisor+1,w
  3088     0350  1C03               	skipc
  3089     0351  03F3               	decf	___awmod@dividend+1,f
  3090     0352  02F3               	subwf	___awmod@dividend+1,f
  3091     0353                     l1201:
  3092     0353  3001               	movlw	1
  3093     0354                     u955:
  3094     0354  1003               	clrc
  3095     0355  0CF1               	rrf	___awmod@divisor+1,f
  3096     0356  0CF0               	rrf	___awmod@divisor,f
  3097     0357  3EFF               	addlw	-1
  3098     0358  1D03               	skipz
  3099     0359  2B54               	goto	u955
  3100     035A                     l1203:
  3101     035A  3001               	movlw	1
  3102     035B  02F4               	subwf	___awmod@counter,f
  3103     035C  1D03               	btfss	3,2
  3104     035D  2B5F               	goto	u961
  3105     035E  2B60               	goto	u960
  3106     035F                     u961:
  3107     035F  2B43               	goto	l1197
  3108     0360                     u960:
  3109     0360                     l1205:
  3110     0360  0875               	movf	___awmod@sign,w
  3111     0361  1903               	btfsc	3,2
  3112     0362  2B64               	goto	u971
  3113     0363  2B65               	goto	u970
  3114     0364                     u971:
  3115     0364  2B6A               	goto	l1209
  3116     0365                     u970:
  3117     0365                     l1207:
  3118     0365  09F2               	comf	___awmod@dividend,f
  3119     0366  09F3               	comf	___awmod@dividend+1,f
  3120     0367  0AF2               	incf	___awmod@dividend,f
  3121     0368  1903               	skipnz
  3122     0369  0AF3               	incf	___awmod@dividend+1,f
  3123     036A                     l1209:
  3124     036A  0873               	movf	___awmod@dividend+1,w
  3125     036B  00F1               	movwf	?___awmod+1
  3126     036C  0872               	movf	___awmod@dividend,w
  3127     036D  00F0               	movwf	?___awmod
  3128     036E                     l324:
  3129     036E  0008               	return
  3130     036F                     __end_of___awmod:
  3131                           
  3132                           	psect	text13
  3133     036F                     __ptext13:	
  3134 ;; *************** function ___awdiv *****************
  3135 ;; Defined at:
  3136 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awdiv.c"
  3137 ;; Parameters:    Size  Location     Type
  3138 ;;  divisor         2    0[COMMON] int 
  3139 ;;  dividend        2    2[COMMON] int 
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;  quotient        2    6[COMMON] int 
  3142 ;;  sign            1    5[COMMON] unsigned char 
  3143 ;;  counter         1    4[COMMON] unsigned char 
  3144 ;; Return value:  Size  Location     Type
  3145 ;;                  2    0[COMMON] int 
  3146 ;; Registers used:
  3147 ;;		wreg, status,2, status,0
  3148 ;; Tracked objects:
  3149 ;;		On entry : 0/0
  3150 ;;		On exit  : 0/0
  3151 ;;		Unchanged: 0/0
  3152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3153 ;;      Params:         4       0       0       0       0
  3154 ;;      Locals:         4       0       0       0       0
  3155 ;;      Temps:          0       0       0       0       0
  3156 ;;      Totals:         8       0       0       0       0
  3157 ;;Total ram usage:        8 bytes
  3158 ;; Hardware stack levels used: 1
  3159 ;; This function calls:
  3160 ;;		Nothing
  3161 ;; This function is called by:
  3162 ;;		_main
  3163 ;;		_dtoa
  3164 ;; This function uses a non-reentrant model
  3165 ;;
  3166                           
  3167     036F                     ___awdiv:	
  3168                           ;psect for function ___awdiv
  3169                           
  3170     036F                     l1131:	
  3171                           ;incstack = 0
  3172                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3173                           
  3174     036F  01F5               	clrf	___awdiv@sign
  3175     0370                     l1133:
  3176     0370  1FF1               	btfss	___awdiv@divisor+1,7
  3177     0371  2B73               	goto	u791
  3178     0372  2B74               	goto	u790
  3179     0373                     u791:
  3180     0373  2B7B               	goto	l1139
  3181     0374                     u790:
  3182     0374                     l1135:
  3183     0374  09F0               	comf	___awdiv@divisor,f
  3184     0375  09F1               	comf	___awdiv@divisor+1,f
  3185     0376  0AF0               	incf	___awdiv@divisor,f
  3186     0377  1903               	skipnz
  3187     0378  0AF1               	incf	___awdiv@divisor+1,f
  3188     0379                     l1137:
  3189     0379  3001               	movlw	1
  3190     037A  00F5               	movwf	___awdiv@sign
  3191     037B                     l1139:
  3192     037B  1FF3               	btfss	___awdiv@dividend+1,7
  3193     037C  2B7E               	goto	u801
  3194     037D  2B7F               	goto	u800
  3195     037E                     u801:
  3196     037E  2B86               	goto	l1145
  3197     037F                     u800:
  3198     037F                     l1141:
  3199     037F  09F2               	comf	___awdiv@dividend,f
  3200     0380  09F3               	comf	___awdiv@dividend+1,f
  3201     0381  0AF2               	incf	___awdiv@dividend,f
  3202     0382  1903               	skipnz
  3203     0383  0AF3               	incf	___awdiv@dividend+1,f
  3204     0384                     l1143:
  3205     0384  3001               	movlw	1
  3206     0385  06F5               	xorwf	___awdiv@sign,f
  3207     0386                     l1145:
  3208     0386  01F6               	clrf	___awdiv@quotient
  3209     0387  01F7               	clrf	___awdiv@quotient+1
  3210     0388                     l1147:
  3211     0388  0870               	movf	___awdiv@divisor,w
  3212     0389  0471               	iorwf	___awdiv@divisor+1,w
  3213     038A  1903               	btfsc	3,2
  3214     038B  2B8D               	goto	u811
  3215     038C  2B8E               	goto	u810
  3216     038D                     u811:
  3217     038D  2BC3               	goto	l1167
  3218     038E                     u810:
  3219     038E                     l1149:
  3220     038E  3001               	movlw	1
  3221     038F  00F4               	movwf	___awdiv@counter
  3222     0390  2B9A               	goto	l1155
  3223     0391                     l1151:
  3224     0391  3001               	movlw	1
  3225     0392                     u825:
  3226     0392  1003               	clrc
  3227     0393  0DF0               	rlf	___awdiv@divisor,f
  3228     0394  0DF1               	rlf	___awdiv@divisor+1,f
  3229     0395  3EFF               	addlw	-1
  3230     0396  1D03               	skipz
  3231     0397  2B92               	goto	u825
  3232     0398                     l1153:
  3233     0398  3001               	movlw	1
  3234     0399  07F4               	addwf	___awdiv@counter,f
  3235     039A                     l1155:
  3236     039A  1FF1               	btfss	___awdiv@divisor+1,7
  3237     039B  2B9D               	goto	u831
  3238     039C  2B9E               	goto	u830
  3239     039D                     u831:
  3240     039D  2B91               	goto	l1151
  3241     039E                     u830:
  3242     039E                     l1157:
  3243     039E  3001               	movlw	1
  3244     039F                     u845:
  3245     039F  1003               	clrc
  3246     03A0  0DF6               	rlf	___awdiv@quotient,f
  3247     03A1  0DF7               	rlf	___awdiv@quotient+1,f
  3248     03A2  3EFF               	addlw	-1
  3249     03A3  1D03               	skipz
  3250     03A4  2B9F               	goto	u845
  3251     03A5  0871               	movf	___awdiv@divisor+1,w
  3252     03A6  0273               	subwf	___awdiv@dividend+1,w
  3253     03A7  1D03               	skipz
  3254     03A8  2BAB               	goto	u855
  3255     03A9  0870               	movf	___awdiv@divisor,w
  3256     03AA  0272               	subwf	___awdiv@dividend,w
  3257     03AB                     u855:
  3258     03AB  1C03               	skipc
  3259     03AC  2BAE               	goto	u851
  3260     03AD  2BAF               	goto	u850
  3261     03AE                     u851:
  3262     03AE  2BB6               	goto	l1163
  3263     03AF                     u850:
  3264     03AF                     l1159:
  3265     03AF  0870               	movf	___awdiv@divisor,w
  3266     03B0  02F2               	subwf	___awdiv@dividend,f
  3267     03B1  0871               	movf	___awdiv@divisor+1,w
  3268     03B2  1C03               	skipc
  3269     03B3  03F3               	decf	___awdiv@dividend+1,f
  3270     03B4  02F3               	subwf	___awdiv@dividend+1,f
  3271     03B5                     l1161:
  3272     03B5  1476               	bsf	___awdiv@quotient,0
  3273     03B6                     l1163:
  3274     03B6  3001               	movlw	1
  3275     03B7                     u865:
  3276     03B7  1003               	clrc
  3277     03B8  0CF1               	rrf	___awdiv@divisor+1,f
  3278     03B9  0CF0               	rrf	___awdiv@divisor,f
  3279     03BA  3EFF               	addlw	-1
  3280     03BB  1D03               	skipz
  3281     03BC  2BB7               	goto	u865
  3282     03BD                     l1165:
  3283     03BD  3001               	movlw	1
  3284     03BE  02F4               	subwf	___awdiv@counter,f
  3285     03BF  1D03               	btfss	3,2
  3286     03C0  2BC2               	goto	u871
  3287     03C1  2BC3               	goto	u870
  3288     03C2                     u871:
  3289     03C2  2B9E               	goto	l1157
  3290     03C3                     u870:
  3291     03C3                     l1167:
  3292     03C3  0875               	movf	___awdiv@sign,w
  3293     03C4  1903               	btfsc	3,2
  3294     03C5  2BC7               	goto	u881
  3295     03C6  2BC8               	goto	u880
  3296     03C7                     u881:
  3297     03C7  2BCD               	goto	l1171
  3298     03C8                     u880:
  3299     03C8                     l1169:
  3300     03C8  09F6               	comf	___awdiv@quotient,f
  3301     03C9  09F7               	comf	___awdiv@quotient+1,f
  3302     03CA  0AF6               	incf	___awdiv@quotient,f
  3303     03CB  1903               	skipnz
  3304     03CC  0AF7               	incf	___awdiv@quotient+1,f
  3305     03CD                     l1171:
  3306     03CD  0877               	movf	___awdiv@quotient+1,w
  3307     03CE  00F1               	movwf	?___awdiv+1
  3308     03CF  0876               	movf	___awdiv@quotient,w
  3309     03D0  00F0               	movwf	?___awdiv
  3310     03D1                     l311:
  3311     03D1  0008               	return
  3312     03D2                     __end_of___awdiv:
  3313                           
  3314                           	psect	text14
  3315     021D                     __ptext14:	
  3316 ;; *************** function _display_string *****************
  3317 ;; Defined at:
  3318 ;;		line 100 in file "newmain.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;  a               1    6[COMMON] PTR unsigned char 
  3321 ;;		 -> main@extrem(11), main@high(10), main@very(10), main@cold(5), 
  3322 ;; Auto vars:     Size  Location     Type
  3323 ;;  i               2   10[COMMON] int 
  3324 ;; Return value:  Size  Location     Type
  3325 ;;                  1    wreg      void 
  3326 ;; Registers used:
  3327 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3328 ;; Tracked objects:
  3329 ;;		On entry : 0/0
  3330 ;;		On exit  : 0/0
  3331 ;;		Unchanged: 0/0
  3332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3333 ;;      Params:         1       0       0       0       0
  3334 ;;      Locals:         2       0       0       0       0
  3335 ;;      Temps:          3       0       0       0       0
  3336 ;;      Totals:         6       0       0       0       0
  3337 ;;Total ram usage:        6 bytes
  3338 ;; Hardware stack levels used: 1
  3339 ;; Hardware stack levels required when called: 1
  3340 ;; This function calls:
  3341 ;;		_display
  3342 ;; This function is called by:
  3343 ;;		_main
  3344 ;; This function uses a non-reentrant model
  3345 ;;
  3346                           
  3347     021D                     _display_string:	
  3348                           ;psect for function _display_string
  3349                           
  3350     021D                     l1383:	
  3351                           ;incstack = 0
  3352                           ; Regs used in _display_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3353                           
  3354                           
  3355                           ;newmain.c: 100: void display_string(char a[]);newmain.c: 101: {;newmain.c: 102:     for
      +                          (int i=0;a[i]!='\0';i++)
  3356     021D  01FA               	clrf	display_string@i
  3357     021E  01FB               	clrf	display_string@i+1
  3358     021F  2A3B               	goto	l1389
  3359     0220                     l1385:
  3360                           
  3361                           ;newmain.c: 103:     {;newmain.c: 104:         display(1, a[i]);
  3362     0220  3001               	movlw	1
  3363     0221  00F0               	movwf	display@RS
  3364     0222  3000               	movlw	0
  3365     0223  00F1               	movwf	display@RS+1
  3366     0224  087A               	movf	display_string@i,w
  3367     0225  0776               	addwf	display_string@a,w
  3368     0226  00F7               	movwf	??_display_string
  3369     0227  0877               	movf	??_display_string,w
  3370     0228  0084               	movwf	4
  3371     0229  0800               	movf	0,w
  3372     022A  00F8               	movwf	??_display_string+1
  3373     022B  01F9               	clrf	??_display_string+2
  3374     022C  0878               	movf	??_display_string+1,w
  3375     022D  00F2               	movwf	display@DC
  3376     022E  0879               	movf	??_display_string+2,w
  3377     022F  00F3               	movwf	display@DC+1
  3378     0230  120A  118A  218F  120A  118A  	fcall	_display
  3379     0235                     l1387:
  3380                           
  3381                           ;newmain.c: 105:     }
  3382     0235  3001               	movlw	1
  3383     0236  07FA               	addwf	display_string@i,f
  3384     0237  1803               	skipnc
  3385     0238  0AFB               	incf	display_string@i+1,f
  3386     0239  3000               	movlw	0
  3387     023A  07FB               	addwf	display_string@i+1,f
  3388     023B                     l1389:
  3389     023B  087A               	movf	display_string@i,w
  3390     023C  0776               	addwf	display_string@a,w
  3391     023D  00F7               	movwf	??_display_string
  3392     023E  0877               	movf	??_display_string,w
  3393     023F  0084               	movwf	4
  3394     0240  1383               	bcf	3,7	;select IRP bank0
  3395     0241  0800               	movf	0,w
  3396     0242  1D03               	btfss	3,2
  3397     0243  2A45               	goto	u1231
  3398     0244  2A46               	goto	u1230
  3399     0245                     u1231:
  3400     0245  2A20               	goto	l1385
  3401     0246                     u1230:
  3402     0246                     l69:
  3403     0246  0008               	return
  3404     0247                     __end_of_display_string:
  3405                           
  3406                           	psect	text15
  3407     018F                     __ptext15:	
  3408 ;; *************** function _display *****************
  3409 ;; Defined at:
  3410 ;;		line 108 in file "newmain.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;  RS              2    0[COMMON] int 
  3413 ;;  DC              2    2[COMMON] int 
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;		None
  3416 ;; Return value:  Size  Location     Type
  3417 ;;                  1    wreg      void 
  3418 ;; Registers used:
  3419 ;;		wreg
  3420 ;; Tracked objects:
  3421 ;;		On entry : 0/0
  3422 ;;		On exit  : 0/0
  3423 ;;		Unchanged: 0/0
  3424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3425 ;;      Params:         4       0       0       0       0
  3426 ;;      Locals:         0       0       0       0       0
  3427 ;;      Temps:          2       0       0       0       0
  3428 ;;      Totals:         6       0       0       0       0
  3429 ;;Total ram usage:        6 bytes
  3430 ;; Hardware stack levels used: 1
  3431 ;; This function calls:
  3432 ;;		Nothing
  3433 ;; This function is called by:
  3434 ;;		_main
  3435 ;;		_display_string
  3436 ;; This function uses a non-reentrant model
  3437 ;;
  3438                           
  3439     018F                     _display:	
  3440                           ;psect for function _display
  3441                           
  3442     018F                     l1351:	
  3443                           ;incstack = 0
  3444                           ; Regs used in _display: [wreg]
  3445                           
  3446                           
  3447                           ;newmain.c: 108: void display(int RS, int DC);newmain.c: 109: {;newmain.c: 110:     RD0=
      +                          RS;
  3448     018F  1870               	btfsc	display@RS,0
  3449     0190  2992               	goto	u1201
  3450     0191  2996               	goto	u1200
  3451     0192                     u1201:
  3452     0192  1283               	bcf	3,5	;RP0=0, select bank0
  3453     0193  1303               	bcf	3,6	;RP1=0, select bank0
  3454     0194  1408               	bsf	8,0	;volatile
  3455     0195  2999               	goto	u1214
  3456     0196                     u1200:
  3457     0196  1283               	bcf	3,5	;RP0=0, select bank0
  3458     0197  1303               	bcf	3,6	;RP1=0, select bank0
  3459     0198  1008               	bcf	8,0	;volatile
  3460     0199                     u1214:
  3461     0199                     l1353:
  3462                           
  3463                           ;newmain.c: 111:     PORTC=DC;
  3464     0199  0872               	movf	display@DC,w
  3465     019A  0087               	movwf	7	;volatile
  3466     019B                     l1355:
  3467                           
  3468                           ;newmain.c: 112:     RD1=1;
  3469     019B  1488               	bsf	8,1	;volatile
  3470                           
  3471                           ;newmain.c: 113:     _delay((unsigned long)((10)*(10000000/4000.0)));
  3472     019C  3021               	movlw	33
  3473     019D  00F5               	movwf	??_display+1
  3474     019E  3076               	movlw	118
  3475     019F  00F4               	movwf	??_display
  3476     01A0                     u1377:
  3477     01A0  0BF4               	decfsz	??_display,f
  3478     01A1  29A0               	goto	u1377
  3479     01A2  0BF5               	decfsz	??_display+1,f
  3480     01A3  29A0               	goto	u1377
  3481     01A4  0000               	nop
  3482     01A5                     l1357:
  3483                           
  3484                           ;newmain.c: 114:     RD1=0;
  3485     01A5  1283               	bcf	3,5	;RP0=0, select bank0
  3486     01A6  1303               	bcf	3,6	;RP1=0, select bank0
  3487     01A7  1088               	bcf	8,1	;volatile
  3488                           
  3489                           ;newmain.c: 115:     _delay((unsigned long)((10)*(10000000/4000.0)));
  3490     01A8  3021               	movlw	33
  3491     01A9  00F5               	movwf	??_display+1
  3492     01AA  3076               	movlw	118
  3493     01AB  00F4               	movwf	??_display
  3494     01AC                     u1387:
  3495     01AC  0BF4               	decfsz	??_display,f
  3496     01AD  29AC               	goto	u1387
  3497     01AE  0BF5               	decfsz	??_display+1,f
  3498     01AF  29AC               	goto	u1387
  3499     01B0  0000               	nop
  3500     01B1                     l72:
  3501     01B1  0008               	return
  3502     01B2                     __end_of_display:
  3503     0002                     ___latbits      equ	2
  3504     007E                     btemp           set	126	;btemp
  3505     007E                     wtemp0          set	126
  3506                           
  3507                           	psect	config
  3508                           
  3509                           ;Config register CONFIG @ 0x2007
  3510                           ;	Oscillator Selection bits
  3511                           ;	FOSC = HS, HS oscillator
  3512                           ;	Watchdog Timer Enable bit
  3513                           ;	WDTE = OFF, WDT disabled
  3514                           ;	Power-up Timer Enable bit
  3515                           ;	PWRTE = OFF, PWRT disabled
  3516                           ;	Brown-out Reset Enable bit
  3517                           ;	BOREN = OFF, BOR disabled
  3518                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  3519                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  3520                           ;	Data EEPROM Memory Code Protection bit
  3521                           ;	CPD = OFF, Data EEPROM code protection off
  3522                           ;	Flash Program Memory Write Enable bits
  3523                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  3524                           ;	In-Circuit Debugger Mode bit
  3525                           ;	DEBUG = 0x1, unprogrammed default
  3526                           ;	Flash Program Memory Code Protection bit
  3527                           ;	CP = OFF, Code protection off
  3528     2007                     	org	8199
  3529     2007  3F3A               	dw	16186

Data Sizes:
    Strings     5
    Constant    0
    Data        36
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     65      80
    BANK1            80     56      71
    BANK3            96      0      43
    BANK2            96      0       0

Pointer List with Targets:

    display_string@a	PTR unsigned char  size(1) Largest target is 11
		 -> main@cold(BANK1[5]), main@extrem(BANK1[11]), main@high(BANK1[10]), main@very(BANK1[10]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@arr(BANK1[10]), 

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@arr(BANK1[10]), 

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK3[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    S524$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@arr(BANK1[10]), 

    S524$source	PTR const unsigned char  size(1) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 10
		 -> main@arr(BANK1[10]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    _read_prec_or_width->___wmul
    _dtoa->_pad
    _pad->_fputc
    _fputs->_fputc
    _abs->___awmod
    _display_string->_display

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                60    60      0    4136
                                             61 BANK0      4     4      0
                                              0 BANK1     56    56      0
                            ___awdiv
                            _display
                     _display_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             19    15      4    3101
                                             44 BANK0     17    13      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             5     1      4    2894
                                             39 BANK0      5     1      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           13     9      4    2760
                                             27 BANK0     12     8      4
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   5     3      2     276
                                              6 COMMON     5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4      94
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                12     8      4    1827
                                             15 BANK0     12     8      4
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  8     3      5     747
                                             13 COMMON     1     1      0
                                              8 BANK0      7     2      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                8     5      3     333
                                              0 BANK0      8     5      3
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                               13     9      4     232
                                              0 COMMON    13     9      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2      67
                                              6 COMMON     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     298
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     304
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _display_string                                       6     5      1     159
                                              6 COMMON     6     5      1
                            _display
 ---------------------------------------------------------------------------------
 (2) _display                                              6     2      4      64
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
   _display
   _display_string
     _display
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___awdiv
           ___awmod
           _abs
             ___awmod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
         _read_prec_or_width
           ___wmul

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0      43     44.8%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80     56      71     88.8%
BITBANK1            80      0       0      0.0%
BANK0               80     65      80    100.0%
BITBANK0            80      0       0      0.0%
COMMON              14     14      14    100.0%
BITCOMMON           14      0       0      0.0%
DATA                 0      0     208      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Thu Dec 19 15:01:06 2024

                         pc 0002                          l52 0726                          l46 065F  
                        l55 07C1                          l72 01B1                          l69 0246  
              ___awdiv@sign 0075                          fsr 0004         ___wmul@multiplicand 0072  
                       l311 03D1                         l160 021C                         l324 036E  
                       l158 0204                         l621 01F7                         l710 046B  
                       l721 013E                         l641 028B                         l644 02B3  
                       l653 0546                         l718 0271                         l646 02C4  
                       l662 05E1                         l670 0317                         l649 0548  
                       l691 01D4                         l685 051D                         l677 048B  
                       l679 0491                         l698 017B                         _RD0 0040  
                       _RD1 0041                         u700 03DE                         u701 03DD  
                       u710 03FD                         u711 03FC                         u800 037F  
                       u720 042F                         u801 037E                         u721 042E  
                       u810 038E                         u730 0450                         u811 038D  
                       u900 0328                         u740 0271                         u901 0327  
                       u725 042B                         u741 0270                         u830 039E  
                       u910 0333                         u750 01FE                         u831 039D  
                       u911 0332                         u751 01FD                         u825 0392  
                       u850 03AF                         u930 0343                         u690 03D8  
                       u851 03AE                         u931 0342                         u691 03D7  
                       u940 034D                         u780 0218                         u845 039F  
                       u941 034C                         u925 0337                         u781 0217  
                       u765 0205                         u870 03C3                         u790 0374  
                       u871 03C2                         u855 03AB                         u791 0373  
                       u775 020C                         u880 03C8                         u960 0360  
                       u881 03C7                         u865 03B7                         u961 035F  
                       u945 0349                         u970 0365                         u890 031D  
                       u971 0364                         u955 0354                         u891 031C  
                       u980 0278                         u981 0277                         u990 0289  
                       u991 0288                         _abs 016B                         _pad 0272  
                       fsr0 0004                         indf 0000                ___awmod@sign 0075  
    __end_of_display_string 0247                        l1101 03E5                        l1103 03FD  
                      l1111 024C                        l1201 0353                        l1105 042F  
                      l1113 025C                        l1121 01FE                        l1131 036F  
                      l1203 035A                        l1115 0264                        l1123 020B  
                      ?_abs 0076                        l1141 037F                        l1133 0370  
                      l1205 0360                        l1109 0247                        l1221 028E  
                      l1213 0272                        l1125 0212                        l1117 01F8  
                      l1301 046C                        l1151 0391                        l1143 0384  
                      l1135 0374                        l1207 0365                        l1231 016F  
                      l1223 029D                        l1215 0278                        l1127 0218  
                      l1119 01FA                        l1311 048C                        l1303 047D  
                      l1161 03B5                        l1153 0398                        l1145 0386  
                      l1137 0379                        l1209 036A                        l1233 0170  
                      l1225 02A5                        l1217 0283                        l1241 052D  
                      l1321 04B5                        l1305 0481                        l1401 0639  
                      l1171 03CD                        l1163 03B6                        l1155 039A  
                      l1147 0388                        l1139 037B                        l1227 02B9  
                      l1219 0289                        l1251 054C                        l1243 0532  
                      l1331 04D0                        l1323 04B9                        l1315 0494  
                      l1307 0485                        l1411 0650                        l1403 063D  
                      l1165 03BD                        l1157 039E                        l1149 038E  
                      l1181 0322                        l1229 016B                        l1261 057C  
                      l1253 0550                        l1245 0538                        l1237 051E  
                      l1341 04FC                        l1333 04DC                        l1325 04BA  
                      l1317 04A1                        l1309 0489                        l1421 06B7  
                      l1413 065C                        l1405 063F                        l1351 018F  
                      l1159 03AF                        l1167 03C3                        l1191 0336  
                      l1183 0324                        l1175 0318                        l1095 03D2  
                      l1271 05B8                        l1255 0556                        l1263 058F  
                      l1247 053D                        l1239 0522                        l1335 04E9  
                      l1327 04BF                        l1319 04A6                        l1431 06FC  
                      l1423 06CE                        l1415 0663                        l1407 0643  
                      l1353 0199                        l1169 03C8                        l1193 033D  
                      l1185 0328                        l1177 0319                        l1097 03D8  
                      l1265 059E                        l1273 05BE                        l1257 0573  
                      l1249 0542                        l1337 04EE                        l1329 04C4  
                      l1345 0504                        l1361 01B7                        l1433 0705  
                      l1425 06DA                        l1417 0683                        l1409 0644  
                      l1355 019B                        l1195 033F                        l1187 032D  
                      l1179 031D                        l1099 03DE                        l1275 05C5  
                      l1267 05A6                        l1259 0576                        l1291 02E8  
                      l1283 02C5                        l1363 01C4                        l1371 01D9  
                      l1451 0764                        l1435 0712                        l1427 06DF  
                      l1419 06A0                        l1357 01A5                        l1197 0343  
                      l1189 0333                        l1277 05CB                        l1269 05AB  
                      l1293 02FD                        l1285 02C7                        l1365 01D2  
                      l1373 01DD                        l1461 079E                        l1453 076C  
                      l1445 073A                        l1437 071E                        l1429 06F4  
                      l1383 021D                        l1199 034D                        l1279 05D1  
                      l1287 02D6                        l1295 0302                        l1359 01B2  
                      l1375 01DF                        l1463 07AD                        l1455 077B  
                      l1447 0749                        l1439 072C                        l1391 05E2  
                      l1385 0220                        l1297 0313                        l1289 02DA  
                      l1377 01E1                        l1369 01D5                        l1465 07B9  
                      l1457 078A                        l1449 0758                        l1393 05F5  
                      l1387 0235                        l1379 01EE                        l1459 0796  
                      l1395 060C                        l1389 023B                        l1397 0621  
                      l1399 0637                        ?_pad 0028                        STR_1 0009  
                      u1000 02B3                        u1001 02B2                        u1010 02B9  
                      u1011 02B8                        u1020 016F                        u1100 05B8  
                      u1021 016E                        u1005 02AF                        u1101 05B7  
                      u1110 05BE                        u1030 0527                        u1111 05BD  
                      u1031 0525                        u1200 0196                        u1120 05C5  
                      u1040 0528                        u1201 0192                        u1121 05C4  
                      u1105 05B4                        u1050 0532                        u1130 02D6  
                      u1051 0531                        u1131 02D5                        u1060 053D  
                      u1140 0313                        u1220 01D2                        u1300 072C  
                      u1061 053C                        u1141 0312                        u1221 01D1  
                      u1301 072B                        u1214 0199                        u1230 0246  
                      u1070 059E                        u1150 047D                        u1310 0739  
                      u1231 0245                        u1071 059D                        u1151 047C  
                      u1311 0738                        u1080 05A6                        u1160 04A6  
                      u1320 0749                        u1240 05FD                        u1081 05A5  
                      u1161 04A5                        u1321 0748                        u1090 05AB  
                      u1170 04B9                        u1330 0758                        u1250 0612  
                      u1091 05AA                        u1075 059A                        u1171 04B8  
                      u1331 0757                        u1315 0735                        u1180 04D0  
                      u1340 077B                        u1260 0627                        u1181 04CF  
                      u1341 077A                        u1325 0745                        u1190 04DC  
                      u1350 078A                        u1270 0663                        u1191 04DB  
                      u1351 0789                        u1335 0754                        u1271 0662  
                      u1360 07AD                        u1280 0705                        u1361 07AC  
                      u1345 0777                        u1281 0704                        u1290 0712  
                      u1355 0786                        u1291 0711                        u1365 07A9  
                      u1295 070E                        u1377 01A0                        u1387 01AC  
                      abs@a 0076                        _dbuf 0190                 main@low_bit 00CE  
                      _main 05E2                        _dtoa 051E                        _prec 006D  
                      pad@i 002D                        pad@p 002B                        btemp 007E  
                      start 0000                       ??_abs 0078                       ??_pad 007D  
              main@high_bit 00D0                       ?_main 0070                       ?_dtoa 002F  
           __end_of___awdiv 03D2             __end_of___awmod 036F             ___awdiv@divisor 0070  
           ___awdiv@counter 0074                vfpfcnvrt@fmt 003D                       _PORTB 0006  
                     _PORTC 0007                       _PORTD 0008                       _TRISC 0087  
                     _TRISD 0088             ?_display_string 0076             __end_of_display 01B2  
                     _flags 006F         read_prec_or_width@c 0078         read_prec_or_width@n 0079  
                     _fputc 03D2                       _fputs 0247                       pad@fp 0028  
                     _width 006B                       _putch 013E                       main@i 00D4  
                     dtoa@d 0031                       dtoa@i 0039                       dtoa@p 0035  
                     dtoa@s 0038                       dtoa@w 0036                       pclath 000A  
                     status 0003                       wtemp0 007E             __end_of_sprintf 01F8  
           __initialization 07C5                __end_of_main 07C5                __end_of_dtoa 05E2  
                    ??_main 005D                      ??_dtoa 007E  __end_of_read_prec_or_width 0318  
                    _ADCON0 001F                      _ADCON1 009F                      ?_fputc 0070  
                    ?_fputs 0020                      _ADRESH 001E                      _ADRESL 009E  
          ___awdiv@dividend 0072                      ?_putch 0070               vfpfcnvrt@done 0045  
              vfprintf@cfmt 004B                      ___wmul 01F8                   ??___awdiv 0074  
                 ??___awmod 0074        read_prec_or_width@ap 0077            ___awdiv@quotient 0076  
           ___awmod@divisor 0070             ___awmod@counter 0074                      pad@buf 002A  
                    dtoa@fp 002F                   ??_display 0074                      fputc@c 0070  
                    fputs@c 0025                      fputs@i 0026                      fputs@s 0020  
                    putch@c 0070            __end_of_vfprintf 01D5                   ??_sprintf 0050  
   __end_of__initialization 07FC              __pcstackCOMMON 0070                __pidataBANK0 0147  
              __pidataBANK1 015C                __pidataBANK3 0151               __end_of_fputc 046C  
             __end_of_fputs 0272               __end_of_putch 013F                     ??_fputc 0074  
                   ??_fputs 0023                     ??_putch 0070                  __pbssBANK0 006B  
                __pbssBANK3 0190                  __pmaintext 05E2                     ?___wmul 0070  
          ??_display_string 0077                  __stringtab 0003                     ___awdiv 036F  
                   ___awmod 0318                   ?_vfprintf 0047                     __ptext1 01D5  
                   __ptext2 01B2                     __ptext3 046C                     __ptext4 02C5  
                   __ptext5 01F8                     __ptext6 051E                     __ptext7 0272  
                   __ptext8 0247                     __ptext9 03D2                     _display 018F  
     read_prec_or_width@fmt 0076            ___awmod@dividend 0072                     main@arr 00BF  
                   _sprintf 01D5                     clrloop0 0140        end_of_initialization 07FC  
                   fputc@fp 0072                     fputs@fp 0021          _read_prec_or_width 02C5  
         __end_of_vfpfcnvrt 051E         ?_read_prec_or_width 0076            vfpfcnvrt@convarg 0041  
                ??_vfprintf 007E        ??_read_prec_or_width 0078                  main@actual 00D6  
                main@extrem 00A0                 vfpfcnvrt@ap 003E                 vfpfcnvrt@cp 0046  
               vfpfcnvrt@fp 003B              __end_of___wmul 021D         start_initialization 07C5  
               __end_of_abs 017C                 __end_of_pad 02C5                 vfprintf@fmt 0049  
                  ??___wmul 0074                  init_fetch0 017C                 __pdataBANK0 0061  
               __pdataBANK1 00D8                 __pdataBANK3 01B0                   ___latbits 0002  
             __pcstackBANK0 0020               __pcstackBANK1 00A0                    ?___awdiv 0070  
                  ?___awmod 0070                   __pstrings 0003                    ?_display 0070  
                  ?_sprintf 004C              ___wmul@product 0074                   clear_ram0 013F  
                  _GO_nDONE 00FA                   main@F1341 0061                   main@F1343 01B0  
                 main@F1337 00E2                   main@F1339 00D8                   _vfpfcnvrt 046C  
               __stringbase 0008           ___wmul@multiplier 0070                   display@DC 0072  
                 display@RS 0070                  vfprintf@ap 004A                  vfprintf@fp 0047  
                ?_vfpfcnvrt 003B          __end_of__stringtab 0009                  sprintf@fmt 004D  
                  _dtoa$603 0033                    __ptext10 013E                    __ptext11 016B  
                  __ptext12 0318                    __ptext13 036F                    __ptext14 021D  
                  __ptext15 018F                    _vfprintf 01B2                    main@bits 00D2  
                  main@cold 00C9                    main@high 00B5                    main@very 00AB  
                  init_ram0 0180                   sprintf@ap 0051                   stringcode 0003  
               ??_vfpfcnvrt 003F                    sprintf@f 0052                    sprintf@s 004C  
                  stringdir 0003                    stringtab 0003             display_string@a 0076  
           display_string@i 007A              _display_string 021D  
