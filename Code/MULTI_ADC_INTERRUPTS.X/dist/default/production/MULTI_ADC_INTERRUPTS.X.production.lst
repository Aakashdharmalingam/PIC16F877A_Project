

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Sat Dec 21 21:13:21 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,space=0,delta=2
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    13                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2,group=3
    14                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2,group=1
    15                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2,group=1
    16                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2,group=1
    17                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2,group=2
    18                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2,group=1
    19                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2,group=1
    20                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2,group=3
    21                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2,group=3
    22                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2,group=3
    23                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2,group=3
    24                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2,group=2
    25                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2,group=2
    26                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,space=0,delta=2
    30                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    31                           	dabs	1,0x7E,2
    32     0000                     
    33                           ; Generated 12/10/2023 GMT
    34                           ; 
    35                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution. Publication is not required when
    49                           ;        this file is used in an embedded application.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC16F877A Definitions
    65                           ; 
    66                           ; SFR Addresses
    67     0004                     fsr             equ	4
    68     0004                     fsr0            equ	4
    69     0000                     indf            equ	0
    70     0000                     indf0           equ	0
    71     0002                     pc              equ	2
    72     0002                     pcl             equ	2
    73     000A                     pclath          equ	10
    74     0003                     status          equ	3
    75     0000                     INDF            equ	0	;# 
    76     0001                     TMR0            equ	1	;# 
    77     0002                     PCL             equ	2	;# 
    78     0003                     STATUS          equ	3	;# 
    79     0004                     FSR             equ	4	;# 
    80     0005                     PORTA           equ	5	;# 
    81     0006                     PORTB           equ	6	;# 
    82     0007                     PORTC           equ	7	;# 
    83     0008                     PORTD           equ	8	;# 
    84     0009                     PORTE           equ	9	;# 
    85     000A                     PCLATH          equ	10	;# 
    86     000B                     INTCON          equ	11	;# 
    87     000C                     PIR1            equ	12	;# 
    88     000D                     PIR2            equ	13	;# 
    89     000E                     TMR1            equ	14	;# 
    90     000E                     TMR1L           equ	14	;# 
    91     000F                     TMR1H           equ	15	;# 
    92     0010                     T1CON           equ	16	;# 
    93     0011                     TMR2            equ	17	;# 
    94     0012                     T2CON           equ	18	;# 
    95     0013                     SSPBUF          equ	19	;# 
    96     0014                     SSPCON          equ	20	;# 
    97     0015                     CCPR1           equ	21	;# 
    98     0015                     CCPR1L          equ	21	;# 
    99     0016                     CCPR1H          equ	22	;# 
   100     0017                     CCP1CON         equ	23	;# 
   101     0018                     RCSTA           equ	24	;# 
   102     0019                     TXREG           equ	25	;# 
   103     001A                     RCREG           equ	26	;# 
   104     001B                     CCPR2           equ	27	;# 
   105     001B                     CCPR2L          equ	27	;# 
   106     001C                     CCPR2H          equ	28	;# 
   107     001D                     CCP2CON         equ	29	;# 
   108     001E                     ADRESH          equ	30	;# 
   109     001F                     ADCON0          equ	31	;# 
   110     0081                     OPTION_REG      equ	129	;# 
   111     0085                     TRISA           equ	133	;# 
   112     0086                     TRISB           equ	134	;# 
   113     0087                     TRISC           equ	135	;# 
   114     0088                     TRISD           equ	136	;# 
   115     0089                     TRISE           equ	137	;# 
   116     008C                     PIE1            equ	140	;# 
   117     008D                     PIE2            equ	141	;# 
   118     008E                     PCON            equ	142	;# 
   119     0091                     SSPCON2         equ	145	;# 
   120     0092                     PR2             equ	146	;# 
   121     0093                     SSPADD          equ	147	;# 
   122     0094                     SSPSTAT         equ	148	;# 
   123     0098                     TXSTA           equ	152	;# 
   124     0099                     SPBRG           equ	153	;# 
   125     009C                     CMCON           equ	156	;# 
   126     009D                     CVRCON          equ	157	;# 
   127     009E                     ADRESL          equ	158	;# 
   128     009F                     ADCON1          equ	159	;# 
   129     010C                     EEDATA          equ	268	;# 
   130     010D                     EEADR           equ	269	;# 
   131     010E                     EEDATH          equ	270	;# 
   132     010F                     EEADRH          equ	271	;# 
   133     018C                     EECON1          equ	396	;# 
   134     018D                     EECON2          equ	397	;# 
   135     0000                     INDF            equ	0	;# 
   136     0001                     TMR0            equ	1	;# 
   137     0002                     PCL             equ	2	;# 
   138     0003                     STATUS          equ	3	;# 
   139     0004                     FSR             equ	4	;# 
   140     0005                     PORTA           equ	5	;# 
   141     0006                     PORTB           equ	6	;# 
   142     0007                     PORTC           equ	7	;# 
   143     0008                     PORTD           equ	8	;# 
   144     0009                     PORTE           equ	9	;# 
   145     000A                     PCLATH          equ	10	;# 
   146     000B                     INTCON          equ	11	;# 
   147     000C                     PIR1            equ	12	;# 
   148     000D                     PIR2            equ	13	;# 
   149     000E                     TMR1            equ	14	;# 
   150     000E                     TMR1L           equ	14	;# 
   151     000F                     TMR1H           equ	15	;# 
   152     0010                     T1CON           equ	16	;# 
   153     0011                     TMR2            equ	17	;# 
   154     0012                     T2CON           equ	18	;# 
   155     0013                     SSPBUF          equ	19	;# 
   156     0014                     SSPCON          equ	20	;# 
   157     0015                     CCPR1           equ	21	;# 
   158     0015                     CCPR1L          equ	21	;# 
   159     0016                     CCPR1H          equ	22	;# 
   160     0017                     CCP1CON         equ	23	;# 
   161     0018                     RCSTA           equ	24	;# 
   162     0019                     TXREG           equ	25	;# 
   163     001A                     RCREG           equ	26	;# 
   164     001B                     CCPR2           equ	27	;# 
   165     001B                     CCPR2L          equ	27	;# 
   166     001C                     CCPR2H          equ	28	;# 
   167     001D                     CCP2CON         equ	29	;# 
   168     001E                     ADRESH          equ	30	;# 
   169     001F                     ADCON0          equ	31	;# 
   170     0081                     OPTION_REG      equ	129	;# 
   171     0085                     TRISA           equ	133	;# 
   172     0086                     TRISB           equ	134	;# 
   173     0087                     TRISC           equ	135	;# 
   174     0088                     TRISD           equ	136	;# 
   175     0089                     TRISE           equ	137	;# 
   176     008C                     PIE1            equ	140	;# 
   177     008D                     PIE2            equ	141	;# 
   178     008E                     PCON            equ	142	;# 
   179     0091                     SSPCON2         equ	145	;# 
   180     0092                     PR2             equ	146	;# 
   181     0093                     SSPADD          equ	147	;# 
   182     0094                     SSPSTAT         equ	148	;# 
   183     0098                     TXSTA           equ	152	;# 
   184     0099                     SPBRG           equ	153	;# 
   185     009C                     CMCON           equ	156	;# 
   186     009D                     CVRCON          equ	157	;# 
   187     009E                     ADRESL          equ	158	;# 
   188     009F                     ADCON1          equ	159	;# 
   189     010C                     EEDATA          equ	268	;# 
   190     010D                     EEADR           equ	269	;# 
   191     010E                     EEDATH          equ	270	;# 
   192     010F                     EEADRH          equ	271	;# 
   193     018C                     EECON1          equ	396	;# 
   194     018D                     EECON2          equ	397	;# 
   195     001E                     _ADRESH         set	30
   196     0006                     _PORTB          set	6
   197     0007                     _PORTC          set	7
   198     0008                     _PORTD          set	8
   199     001F                     _ADCON0         set	31
   200     0059                     _INTF           set	89
   201     0041                     _RD1            set	65
   202     0040                     _RD0            set	64
   203     00FA                     _GO_nDONE       set	250
   204     005F                     _GIE            set	95
   205     005C                     _INTE           set	92
   206     009E                     _ADRESL         set	158
   207     0081                     _OPTION_REG     set	129
   208     0087                     _TRISC          set	135
   209     0088                     _TRISD          set	136
   210     009F                     _ADCON1         set	159
   211                           
   212                           	psect	strings
   213     0630                     __pstrings:
   214     0630                     stringtab:
   215     0630                     __stringtab:
   216     0630                     stringcode:	
   217                           ;	String table - string pointers are 1 byte each
   218                           
   219     0630                     stringdir:
   220     0630  3006               	movlw	high stringdir
   221     0631  008A               	movwf	10
   222     0632  0804               	movf	4,w
   223     0633  0A84               	incf	4,f
   224     0634  0782               	addwf	2,f
   225     0635                     __stringbase:
   226     0635  3400               	retlw	0
   227     0636                     __end_of__stringtab:
   228     0636                     STR_1:
   229     0636  3425               	retlw	37	;'%'
   230     0637  3430               	retlw	48	;'0'
   231     0638  3434               	retlw	52	;'4'
   232     0639  3464               	retlw	100	;'d'
   233     063A  3400               	retlw	0
   234     063B                     STR_3:
   235     063B  3425               	retlw	37	;'%'
   236     063C  3430               	retlw	48	;'0'
   237     063D  3464               	retlw	100	;'d'
   238     063E  3400               	retlw	0
   239     0636                     STR_2           equ	STR_1
   240                           
   241                           	psect	cinit
   242     000F                     start_initialization:	
   243                           ; #config settings
   244                           
   245     000F                     __initialization:
   246                           
   247                           ; Clear objects allocated to BANK0
   248     000F  1283               	bcf	3,5	;RP0=0, select bank0
   249     0010  1303               	bcf	3,6	;RP1=0, select bank0
   250     0011  01E4               	clrf	__pbssBANK0& (0+127)
   251     0012  01E5               	clrf	(__pbssBANK0+1)& (0+127)
   252     0013  01E6               	clrf	(__pbssBANK0+2)& (0+127)
   253     0014  01E7               	clrf	(__pbssBANK0+3)& (0+127)
   254     0015  01E8               	clrf	(__pbssBANK0+4)& (0+127)
   255                           
   256                           ; Clear objects allocated to BANK1
   257     0016  1383               	bcf	3,7	;select IRP bank0
   258     0017  30A0               	movlw	low __pbssBANK1
   259     0018  0084               	movwf	4
   260     0019  30C2               	movlw	low (__pbssBANK1+34)
   261     001A  120A  118A  263F  120A  118A  	fcall	clear_ram0
   262     001F                     end_of_initialization:	
   263                           ;End of C runtime variable initialization code
   264                           
   265     001F                     __end_of__initialization:
   266     001F  0183               	clrf	3
   267     0020  120A  118A  2823   	ljmp	_main	;jump to C main() function
   268                           
   269                           	psect	bssBANK0
   270     0064                     __pbssBANK0:
   271     0064                     _width:
   272     0064                     	ds	2
   273     0066                     _prec:
   274     0066                     	ds	2
   275     0068                     _flags:
   276     0068                     	ds	1
   277                           
   278                           	psect	bssBANK1
   279     00A0                     __pbssBANK1:
   280     00A0                     _count:
   281     00A0                     	ds	2
   282     00A2                     _dbuf:
   283     00A2                     	ds	32
   284                           
   285                           	psect	clrtext
   286     063F                     clear_ram0:	
   287                           ;	Called with FSR containing the base address, and
   288                           ;	W with the last address+1
   289                           
   290     063F  0064               	clrwdt	;clear the watchdog before getting into this loop
   291     0640                     clrloop0:
   292     0640  0180               	clrf	0	;clear RAM location pointed to by FSR
   293     0641  0A84               	incf	4,f	;increment pointer
   294     0642  0604               	xorwf	4,w	;XOR with final address
   295     0643  1903               	btfsc	3,2	;have we reached the end yet?
   296     0644  3400               	retlw	0	;all done for this memory range, return
   297     0645  0604               	xorwf	4,w	;XOR again to restore value
   298     0646  2E40               	goto	clrloop0	;do the next byte
   299                           
   300                           	psect	cstackBANK1
   301     00C2                     __pcstackBANK1:
   302     00C2                     main@arr:
   303                           
   304                           ; 10 bytes @ 0x0
   305     00C2                     	ds	10
   306     00CC                     main@low_bit:
   307                           
   308                           ; 2 bytes @ 0xA
   309     00CC                     	ds	2
   310     00CE                     main@high_bit:
   311                           
   312                           ; 2 bytes @ 0xC
   313     00CE                     	ds	2
   314     00D0                     main@bits:
   315                           
   316                           ; 2 bytes @ 0xE
   317     00D0                     	ds	2
   318     00D2                     main@i:
   319                           
   320                           ; 2 bytes @ 0x10
   321     00D2                     	ds	2
   322                           
   323                           	psect	cstackCOMMON
   324     0070                     __pcstackCOMMON:
   325     0070                     ?_putch:
   326     0070                     ?_ISR:	
   327                           ; 1 bytes @ 0x0
   328                           
   329     0070                     ?_main:	
   330                           ; 1 bytes @ 0x0
   331                           
   332     0070                     putch@c:	
   333                           ; 2 bytes @ 0x0
   334                           
   335     0070                     ??_ISR:	
   336                           ; 1 bytes @ 0x0
   337                           
   338                           
   339                           ; 1 bytes @ 0x0
   340     0070                     	ds	2
   341     0072                     ?_display:
   342     0072                     ?_fputc:	
   343                           ; 1 bytes @ 0x2
   344                           
   345     0072                     ?___wmul:	
   346                           ; 2 bytes @ 0x2
   347                           
   348     0072                     ?___awdiv:	
   349                           ; 2 bytes @ 0x2
   350                           
   351     0072                     ?___awmod:	
   352                           ; 2 bytes @ 0x2
   353                           
   354     0072                     display@RS:	
   355                           ; 2 bytes @ 0x2
   356                           
   357     0072                     ___wmul@multiplier:	
   358                           ; 2 bytes @ 0x2
   359                           
   360     0072                     ___awdiv@divisor:	
   361                           ; 2 bytes @ 0x2
   362                           
   363     0072                     ___awmod@divisor:	
   364                           ; 2 bytes @ 0x2
   365                           
   366     0072                     fputc@c:	
   367                           ; 2 bytes @ 0x2
   368                           
   369     0072                     ??_putch:	
   370                           ; 2 bytes @ 0x2
   371                           
   372                           
   373                           ; 1 bytes @ 0x2
   374     0072                     	ds	2
   375     0074                     display@DC:
   376     0074                     ___wmul@multiplicand:	
   377                           ; 2 bytes @ 0x4
   378                           
   379     0074                     ___awdiv@dividend:	
   380                           ; 2 bytes @ 0x4
   381                           
   382     0074                     ___awmod@dividend:	
   383                           ; 2 bytes @ 0x4
   384                           
   385     0074                     fputc@fp:	
   386                           ; 2 bytes @ 0x4
   387                           
   388                           
   389                           ; 2 bytes @ 0x4
   390     0074                     	ds	2
   391     0076                     ?_fputs:
   392     0076                     ___awdiv@counter:	
   393                           ; 2 bytes @ 0x6
   394                           
   395     0076                     ___awmod@counter:	
   396                           ; 1 bytes @ 0x6
   397                           
   398     0076                     fputs@s:	
   399                           ; 1 bytes @ 0x6
   400                           
   401     0076                     ___wmul@product:	
   402                           ; 1 bytes @ 0x6
   403                           
   404     0076                     ??_display:	
   405                           ; 2 bytes @ 0x6
   406                           
   407     0076                     ??___wmul:	
   408                           ; 1 bytes @ 0x6
   409                           
   410     0076                     ??___awdiv:	
   411                           ; 1 bytes @ 0x6
   412                           
   413     0076                     ??___awmod:	
   414                           ; 1 bytes @ 0x6
   415                           
   416                           
   417                           ; 1 bytes @ 0x6
   418     0076                     	ds	1
   419     0077                     ___awdiv@sign:
   420     0077                     ___awmod@sign:	
   421                           ; 1 bytes @ 0x7
   422                           
   423     0077                     fputs@fp:	
   424                           ; 1 bytes @ 0x7
   425                           
   426                           
   427                           ; 2 bytes @ 0x7
   428     0077                     	ds	1
   429     0078                     ?_display_string:
   430     0078                     ?_abs:	
   431                           ; 1 bytes @ 0x8
   432                           
   433     0078                     ?_read_prec_or_width:	
   434                           ; 2 bytes @ 0x8
   435                           
   436     0078                     display_string@a:	
   437                           ; 2 bytes @ 0x8
   438                           
   439     0078                     read_prec_or_width@fmt:	
   440                           ; 1 bytes @ 0x8
   441                           
   442     0078                     ___awdiv@quotient:	
   443                           ; 1 bytes @ 0x8
   444                           
   445     0078                     abs@a:	
   446                           ; 2 bytes @ 0x8
   447                           
   448                           
   449                           ; 2 bytes @ 0x8
   450     0078                     	ds	1
   451     0079                     read_prec_or_width@ap:
   452     0079                     ??_display_string:	
   453                           ; 1 bytes @ 0x9
   454                           
   455     0079                     ??_fputs:	
   456                           ; 1 bytes @ 0x9
   457                           
   458                           
   459                           ; 1 bytes @ 0x9
   460     0079                     	ds	1
   461     007A                     ??_abs:
   462     007A                     ??_read_prec_or_width:	
   463                           ; 1 bytes @ 0xA
   464                           
   465                           
   466                           ; 1 bytes @ 0xA
   467     007A                     	ds	1
   468     007B                     ??_pad:
   469                           
   470                           ; 1 bytes @ 0xB
   471     007B                     	ds	1
   472     007C                     ??_vfprintf:
   473     007C                     ??_dtoa:	
   474                           ; 1 bytes @ 0xC
   475                           
   476                           
   477                           	psect	cstackBANK0
   478     0020                     __pcstackBANK0:	
   479                           ; 1 bytes @ 0xC
   480                           
   481     0020                     read_prec_or_width@c:
   482     0020                     display_string@i:	
   483                           ; 1 bytes @ 0x0
   484                           
   485     0020                     ??_fputc:	
   486                           ; 2 bytes @ 0x0
   487                           
   488                           
   489                           ; 1 bytes @ 0x0
   490     0020                     	ds	1
   491     0021                     read_prec_or_width@n:
   492                           
   493                           ; 2 bytes @ 0x1
   494     0021                     	ds	8
   495     0029                     fputs@c:
   496                           
   497                           ; 1 bytes @ 0x9
   498     0029                     	ds	1
   499     002A                     fputs@i:
   500                           
   501                           ; 2 bytes @ 0xA
   502     002A                     	ds	2
   503     002C                     ?_pad:
   504     002C                     pad@fp:	
   505                           ; 1 bytes @ 0xC
   506                           
   507                           
   508                           ; 2 bytes @ 0xC
   509     002C                     	ds	2
   510     002E                     pad@buf:
   511                           
   512                           ; 1 bytes @ 0xE
   513     002E                     	ds	1
   514     002F                     pad@p:
   515                           
   516                           ; 2 bytes @ 0xF
   517     002F                     	ds	2
   518     0031                     pad@i:
   519                           
   520                           ; 2 bytes @ 0x11
   521     0031                     	ds	2
   522     0033                     ?_dtoa:
   523     0033                     dtoa@fp:	
   524                           ; 1 bytes @ 0x13
   525                           
   526                           
   527                           ; 2 bytes @ 0x13
   528     0033                     	ds	2
   529     0035                     dtoa@d:
   530                           
   531                           ; 2 bytes @ 0x15
   532     0035                     	ds	2
   533     0037                     _dtoa$606:
   534                           
   535                           ; 2 bytes @ 0x17
   536     0037                     	ds	2
   537     0039                     dtoa@p:
   538                           
   539                           ; 1 bytes @ 0x19
   540     0039                     	ds	1
   541     003A                     dtoa@w:
   542                           
   543                           ; 2 bytes @ 0x1A
   544     003A                     	ds	2
   545     003C                     dtoa@s:
   546                           
   547                           ; 1 bytes @ 0x1C
   548     003C                     	ds	1
   549     003D                     dtoa@i:
   550                           
   551                           ; 2 bytes @ 0x1D
   552     003D                     	ds	2
   553     003F                     ?_vfpfcnvrt:
   554     003F                     vfpfcnvrt@fp:	
   555                           ; 1 bytes @ 0x1F
   556                           
   557                           
   558                           ; 2 bytes @ 0x1F
   559     003F                     	ds	2
   560     0041                     vfpfcnvrt@fmt:
   561                           
   562                           ; 1 bytes @ 0x21
   563     0041                     	ds	1
   564     0042                     vfpfcnvrt@ap:
   565                           
   566                           ; 1 bytes @ 0x22
   567     0042                     	ds	1
   568     0043                     ??_vfpfcnvrt:
   569                           
   570                           ; 1 bytes @ 0x23
   571     0043                     	ds	2
   572     0045                     vfpfcnvrt@convarg:
   573                           
   574                           ; 4 bytes @ 0x25
   575     0045                     	ds	4
   576     0049                     vfpfcnvrt@done:
   577                           
   578                           ; 1 bytes @ 0x29
   579     0049                     	ds	1
   580     004A                     vfpfcnvrt@cp:
   581                           
   582                           ; 1 bytes @ 0x2A
   583     004A                     	ds	1
   584     004B                     ?_vfprintf:
   585     004B                     vfprintf@fp:	
   586                           ; 2 bytes @ 0x2B
   587                           
   588                           
   589                           ; 2 bytes @ 0x2B
   590     004B                     	ds	2
   591     004D                     vfprintf@fmt:
   592                           
   593                           ; 1 bytes @ 0x2D
   594     004D                     	ds	1
   595     004E                     vfprintf@ap:
   596                           
   597                           ; 1 bytes @ 0x2E
   598     004E                     	ds	1
   599     004F                     vfprintf@cfmt:
   600                           
   601                           ; 1 bytes @ 0x2F
   602     004F                     	ds	1
   603     0050                     ?_sprintf:
   604     0050                     sprintf@s:	
   605                           ; 2 bytes @ 0x30
   606                           
   607                           
   608                           ; 1 bytes @ 0x30
   609     0050                     	ds	1
   610     0051                     sprintf@fmt:
   611                           
   612                           ; 1 bytes @ 0x31
   613     0051                     	ds	3
   614     0054                     ??_sprintf:
   615                           
   616                           ; 1 bytes @ 0x34
   617     0054                     	ds	1
   618     0055                     sprintf@ap:
   619                           
   620                           ; 1 bytes @ 0x35
   621     0055                     	ds	1
   622     0056                     sprintf@f:
   623                           
   624                           ; 11 bytes @ 0x36
   625     0056                     	ds	11
   626     0061                     ??_main:
   627                           
   628                           ; 1 bytes @ 0x41
   629     0061                     	ds	3
   630                           
   631                           	psect	maintext
   632     0023                     __pmaintext:	
   633 ;;
   634 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   635 ;;
   636 ;; *************** function _main *****************
   637 ;; Defined at:
   638 ;;		line 15 in file "newmain.c"
   639 ;; Parameters:    Size  Location     Type
   640 ;;		None
   641 ;; Auto vars:     Size  Location     Type
   642 ;;  i               2   16[BANK1 ] int 
   643 ;;  arr            10    0[BANK1 ] unsigned char [10]
   644 ;;  bits            2   14[BANK1 ] int 
   645 ;;  high_bit        2   12[BANK1 ] int 
   646 ;;  low_bit         2   10[BANK1 ] int 
   647 ;; Return value:  Size  Location     Type
   648 ;;                  2   46[None  ] int 
   649 ;; Registers used:
   650 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   651 ;; Tracked objects:
   652 ;;		On entry : B00/0
   653 ;;		On exit  : 0/0
   654 ;;		Unchanged: 0/0
   655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   656 ;;      Params:         0       0       0       0       0
   657 ;;      Locals:         0       0      18       0       0
   658 ;;      Temps:          0       3       0       0       0
   659 ;;      Totals:         0       3      18       0       0
   660 ;;Total ram usage:       21 bytes
   661 ;; Hardware stack levels required when called: 9
   662 ;; This function calls:
   663 ;;		_display
   664 ;;		_display_string
   665 ;;		_sprintf
   666 ;; This function is called by:
   667 ;;		Startup code after reset
   668 ;; This function uses a non-reentrant model
   669 ;;
   670                           
   671     0023                     _main:	
   672                           ;psect for function _main
   673                           
   674     0023                     l1379:	
   675                           ;incstack = 0
   676 ;; hardware stack exceeded
   677                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   678                           
   679                           
   680                           ;newmain.c: 16:     char arr[10];;newmain.c: 17:     int low_bit;;newmain.c: 18:     int
      +                           high_bit;;newmain.c: 19:     int bits;;newmain.c: 22:     ADCON0 =0x01;
   681     0023  3001               	movlw	1
   682     0024  1283               	bcf	3,5	;RP0=0, select bank0
   683     0025  1303               	bcf	3,6	;RP1=0, select bank0
   684     0026  009F               	movwf	31	;volatile
   685                           
   686                           ;newmain.c: 23:     ADCON1 =0x80;
   687     0027  3080               	movlw	128
   688     0028  1683               	bsf	3,5	;RP0=1, select bank1
   689     0029  1303               	bcf	3,6	;RP1=0, select bank1
   690     002A  009F               	movwf	31	;volatile
   691     002B                     l1381:
   692                           
   693                           ;newmain.c: 24:     TRISD=TRISC=0;
   694     002B  0187               	clrf	7	;volatile
   695     002C  0188               	clrf	8	;volatile
   696                           
   697                           ;newmain.c: 25:     PORTD=PORTC=0;
   698     002D  1283               	bcf	3,5	;RP0=0, select bank0
   699     002E  1303               	bcf	3,6	;RP1=0, select bank0
   700     002F  0187               	clrf	7	;volatile
   701     0030  0188               	clrf	8	;volatile
   702                           
   703                           ;newmain.c: 26:     PORTB=0;
   704     0031  0186               	clrf	6	;volatile
   705                           
   706                           ;newmain.c: 27:     OPTION_REG=0X00;
   707     0032  1683               	bsf	3,5	;RP0=1, select bank1
   708     0033  1303               	bcf	3,6	;RP1=0, select bank1
   709     0034  0181               	clrf	1	;volatile
   710     0035                     l1383:
   711                           
   712                           ;newmain.c: 28:     INTE=1;
   713     0035  160B               	bsf	11,4	;volatile
   714     0036                     l1385:
   715                           
   716                           ;newmain.c: 29:     GIE=1;
   717     0036  178B               	bsf	11,7	;volatile
   718     0037                     l1387:
   719                           
   720                           ;newmain.c: 32:     display(0, 0x0C);
   721     0037  3000               	movlw	0
   722     0038  00F2               	movwf	display@RS
   723     0039  00F3               	movwf	display@RS+1
   724     003A  300C               	movlw	12
   725     003B  00F4               	movwf	display@DC
   726     003C  3000               	movlw	0
   727     003D  00F5               	movwf	display@DC+1
   728     003E  120A  118A  25E6  120A  118A  	fcall	_display
   729     0043                     l1389:
   730                           
   731                           ;newmain.c: 33:     display(0, 0x38);
   732     0043  3000               	movlw	0
   733     0044  00F2               	movwf	display@RS
   734     0045  00F3               	movwf	display@RS+1
   735     0046  3038               	movlw	56
   736     0047  00F4               	movwf	display@DC
   737     0048  3000               	movlw	0
   738     0049  00F5               	movwf	display@DC+1
   739     004A  120A  118A  25E6  120A  118A  	fcall	_display
   740     004F                     l1391:
   741                           
   742                           ;newmain.c: 36:     {;newmain.c: 37:         ADCON0 =0x01;
   743     004F  3001               	movlw	1
   744     0050  1283               	bcf	3,5	;RP0=0, select bank0
   745     0051  1303               	bcf	3,6	;RP1=0, select bank0
   746     0052  009F               	movwf	31	;volatile
   747     0053                     l1393:
   748                           
   749                           ;newmain.c: 38:         _delay((unsigned long)((10)*(10000000/4000.0)));
   750     0053  3021               	movlw	33
   751     0054  1283               	bcf	3,5	;RP0=0, select bank0
   752     0055  1303               	bcf	3,6	;RP1=0, select bank0
   753     0056  00E2               	movwf	??_main+1
   754     0057  3075               	movlw	117
   755     0058  00E1               	movwf	??_main
   756     0059                     u1197:
   757     0059  0BE1               	decfsz	??_main,f
   758     005A  2859               	goto	u1197
   759     005B  0BE2               	decfsz	??_main+1,f
   760     005C  2859               	goto	u1197
   761     005D  285E               	nop2
   762     005E                     l1395:
   763                           
   764                           ;newmain.c: 39:         GO_nDONE = 1;
   765     005E  1283               	bcf	3,5	;RP0=0, select bank0
   766     005F  1303               	bcf	3,6	;RP1=0, select bank0
   767     0060  151F               	bsf	31,2	;volatile
   768     0061                     l48:	
   769                           ;newmain.c: 40:         while(GO_nDONE==1){}
   770                           
   771     0061  191F               	btfsc	31,2	;volatile
   772     0062  2864               	goto	u1151
   773     0063  2865               	goto	u1150
   774     0064                     u1151:
   775     0064  2861               	goto	l48
   776     0065                     u1150:
   777     0065                     l1397:
   778                           
   779                           ;newmain.c: 41:         low_bit = ADRESL;
   780     0065  1683               	bsf	3,5	;RP0=1, select bank1
   781     0066  1303               	bcf	3,6	;RP1=0, select bank1
   782     0067  081E               	movf	30,w	;volatile
   783     0068  1283               	bcf	3,5	;RP0=0, select bank0
   784     0069  1303               	bcf	3,6	;RP1=0, select bank0
   785     006A  00E1               	movwf	??_main
   786     006B  01E2               	clrf	??_main+1
   787     006C  0861               	movf	??_main,w
   788     006D  1683               	bsf	3,5	;RP0=1, select bank1
   789     006E  1303               	bcf	3,6	;RP1=0, select bank1
   790     006F  00CC               	movwf	main@low_bit^(0+128)
   791     0070  1283               	bcf	3,5	;RP0=0, select bank0
   792     0071  1303               	bcf	3,6	;RP1=0, select bank0
   793     0072  0862               	movf	??_main+1,w
   794     0073  1683               	bsf	3,5	;RP0=1, select bank1
   795     0074  1303               	bcf	3,6	;RP1=0, select bank1
   796     0075  00CD               	movwf	(main@low_bit+1)^(0+128)
   797                           
   798                           ;newmain.c: 42:         high_bit = ADRESH;
   799     0076  1283               	bcf	3,5	;RP0=0, select bank0
   800     0077  1303               	bcf	3,6	;RP1=0, select bank0
   801     0078  081E               	movf	30,w	;volatile
   802     0079  00E1               	movwf	??_main
   803     007A  01E2               	clrf	??_main+1
   804     007B  0861               	movf	??_main,w
   805     007C  1683               	bsf	3,5	;RP0=1, select bank1
   806     007D  1303               	bcf	3,6	;RP1=0, select bank1
   807     007E  00CE               	movwf	main@high_bit^(0+128)
   808     007F  1283               	bcf	3,5	;RP0=0, select bank0
   809     0080  1303               	bcf	3,6	;RP1=0, select bank0
   810     0081  0862               	movf	??_main+1,w
   811     0082  1683               	bsf	3,5	;RP0=1, select bank1
   812     0083  1303               	bcf	3,6	;RP1=0, select bank1
   813     0084  00CF               	movwf	(main@high_bit+1)^(0+128)
   814     0085                     l1399:
   815                           
   816                           ;newmain.c: 44:         bits = low_bit | high_bit<<8;
   817     0085  084F               	movf	(main@high_bit+1)^(0+128),w
   818     0086  1283               	bcf	3,5	;RP0=0, select bank0
   819     0087  1303               	bcf	3,6	;RP1=0, select bank0
   820     0088  00E2               	movwf	??_main+1
   821     0089  1683               	bsf	3,5	;RP0=1, select bank1
   822     008A  1303               	bcf	3,6	;RP1=0, select bank1
   823     008B  084E               	movf	main@high_bit^(0+128),w
   824     008C  1283               	bcf	3,5	;RP0=0, select bank0
   825     008D  1303               	bcf	3,6	;RP1=0, select bank0
   826     008E  00E1               	movwf	??_main
   827     008F  0861               	movf	??_main,w
   828     0090  00E2               	movwf	??_main+1
   829     0091  01E1               	clrf	??_main
   830     0092  1683               	bsf	3,5	;RP0=1, select bank1
   831     0093  1303               	bcf	3,6	;RP1=0, select bank1
   832     0094  084C               	movf	main@low_bit^(0+128),w
   833     0095  1283               	bcf	3,5	;RP0=0, select bank0
   834     0096  1303               	bcf	3,6	;RP1=0, select bank0
   835     0097  0461               	iorwf	??_main,w
   836     0098  1683               	bsf	3,5	;RP0=1, select bank1
   837     0099  1303               	bcf	3,6	;RP1=0, select bank1
   838     009A  00D0               	movwf	main@bits^(0+128)
   839     009B  084D               	movf	(main@low_bit+1)^(0+128),w
   840     009C  1283               	bcf	3,5	;RP0=0, select bank0
   841     009D  1303               	bcf	3,6	;RP1=0, select bank0
   842     009E  0462               	iorwf	??_main+1,w
   843     009F  1683               	bsf	3,5	;RP0=1, select bank1
   844     00A0  1303               	bcf	3,6	;RP1=0, select bank1
   845     00A1  00D1               	movwf	(main@bits+1)^(0+128)
   846     00A2                     l1401:
   847                           
   848                           ;newmain.c: 45:         sprintf(arr, "%04d", bits);
   849     00A2  30C2               	movlw	(low (main@arr| 0))& (0+255)
   850     00A3  1283               	bcf	3,5	;RP0=0, select bank0
   851     00A4  1303               	bcf	3,6	;RP1=0, select bank0
   852     00A5  00D0               	movwf	sprintf@s
   853     00A6  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   854     00A7  00D1               	movwf	sprintf@fmt
   855     00A8  1683               	bsf	3,5	;RP0=1, select bank1
   856     00A9  1303               	bcf	3,6	;RP1=0, select bank1
   857     00AA  0851               	movf	(main@bits+1)^(0+128),w
   858     00AB  1283               	bcf	3,5	;RP0=0, select bank0
   859     00AC  1303               	bcf	3,6	;RP1=0, select bank0
   860     00AD  00D3               	movwf	?_sprintf+3
   861     00AE  1683               	bsf	3,5	;RP0=1, select bank1
   862     00AF  1303               	bcf	3,6	;RP1=0, select bank1
   863     00B0  0850               	movf	main@bits^(0+128),w
   864     00B1  1283               	bcf	3,5	;RP0=0, select bank0
   865     00B2  1303               	bcf	3,6	;RP1=0, select bank0
   866     00B3  00D2               	movwf	?_sprintf+2
   867     00B4  120A  118A  25A0  120A  118A  	fcall	_sprintf
   868     00B9                     l1403:
   869                           
   870                           ;newmain.c: 46:         display(0, 0x80);
   871     00B9  3000               	movlw	0
   872     00BA  00F2               	movwf	display@RS
   873     00BB  00F3               	movwf	display@RS+1
   874     00BC  3080               	movlw	128
   875     00BD  00F4               	movwf	display@DC
   876     00BE  3000               	movlw	0
   877     00BF  00F5               	movwf	display@DC+1
   878     00C0  120A  118A  25E6  120A  118A  	fcall	_display
   879     00C5                     l1405:
   880                           
   881                           ;newmain.c: 48:         for(int i=0;arr[i]!='\0';i++) {
   882     00C5  1683               	bsf	3,5	;RP0=1, select bank1
   883     00C6  1303               	bcf	3,6	;RP1=0, select bank1
   884     00C7  01D2               	clrf	main@i^(0+128)
   885     00C8  01D3               	clrf	(main@i+1)^(0+128)
   886     00C9  28E7               	goto	l1411
   887     00CA                     l1407:
   888                           
   889                           ;newmain.c: 49:             display(1, arr[i]);
   890     00CA  3001               	movlw	1
   891     00CB  00F2               	movwf	display@RS
   892     00CC  3000               	movlw	0
   893     00CD  00F3               	movwf	display@RS+1
   894     00CE  0852               	movf	main@i^(0+128),w
   895     00CF  3EC2               	addlw	(low (main@arr| 0))& (0+255)
   896     00D0  0084               	movwf	4
   897     00D1  0800               	movf	0,w
   898     00D2  1283               	bcf	3,5	;RP0=0, select bank0
   899     00D3  1303               	bcf	3,6	;RP1=0, select bank0
   900     00D4  00E1               	movwf	??_main
   901     00D5  01E2               	clrf	??_main+1
   902     00D6  0861               	movf	??_main,w
   903     00D7  00F4               	movwf	display@DC
   904     00D8  0862               	movf	??_main+1,w
   905     00D9  00F5               	movwf	display@DC+1
   906     00DA  120A  118A  25E6  120A  118A  	fcall	_display
   907     00DF                     l1409:
   908                           
   909                           ;newmain.c: 50:         }
   910     00DF  3001               	movlw	1
   911     00E0  1683               	bsf	3,5	;RP0=1, select bank1
   912     00E1  1303               	bcf	3,6	;RP1=0, select bank1
   913     00E2  07D2               	addwf	main@i^(0+128),f
   914     00E3  1803               	skipnc
   915     00E4  0AD3               	incf	(main@i+1)^(0+128),f
   916     00E5  3000               	movlw	0
   917     00E6  07D3               	addwf	(main@i+1)^(0+128),f
   918     00E7                     l1411:
   919     00E7  0852               	movf	main@i^(0+128),w
   920     00E8  3EC2               	addlw	(low (main@arr| 0))& (0+255)
   921     00E9  0084               	movwf	4
   922     00EA  1383               	bcf	3,7	;select IRP bank1
   923     00EB  0800               	movf	0,w
   924     00EC  1D03               	btfss	3,2
   925     00ED  28EF               	goto	u1161
   926     00EE  28F0               	goto	u1160
   927     00EF                     u1161:
   928     00EF  28CA               	goto	l1407
   929     00F0                     u1160:
   930     00F0                     l1413:
   931                           
   932                           ;newmain.c: 51:         _delay((unsigned long)((300)*(10000000/4000.0)));
   933     00F0  3004               	movlw	4
   934     00F1  1283               	bcf	3,5	;RP0=0, select bank0
   935     00F2  1303               	bcf	3,6	;RP1=0, select bank0
   936     00F3  00E3               	movwf	??_main+2
   937     00F4  30CF               	movlw	207
   938     00F5  00E2               	movwf	??_main+1
   939     00F6  3001               	movlw	1
   940     00F7  00E1               	movwf	??_main
   941     00F8                     u1207:
   942     00F8  0BE1               	decfsz	??_main,f
   943     00F9  28F8               	goto	u1207
   944     00FA  0BE2               	decfsz	??_main+1,f
   945     00FB  28F8               	goto	u1207
   946     00FC  0BE3               	decfsz	??_main+2,f
   947     00FD  28F8               	goto	u1207
   948     00FE                     l1415:
   949                           
   950                           ;newmain.c: 52:         ADCON0 =0x09;
   951     00FE  3009               	movlw	9
   952     00FF  1283               	bcf	3,5	;RP0=0, select bank0
   953     0100  1303               	bcf	3,6	;RP1=0, select bank0
   954     0101  009F               	movwf	31	;volatile
   955                           
   956                           ;newmain.c: 53:         _delay((unsigned long)((10)*(10000000/4000.0)));
   957     0102  3021               	movlw	33
   958     0103  1283               	bcf	3,5	;RP0=0, select bank0
   959     0104  1303               	bcf	3,6	;RP1=0, select bank0
   960     0105  00E2               	movwf	??_main+1
   961     0106  3075               	movlw	117
   962     0107  00E1               	movwf	??_main
   963     0108                     u1217:
   964     0108  0BE1               	decfsz	??_main,f
   965     0109  2908               	goto	u1217
   966     010A  0BE2               	decfsz	??_main+1,f
   967     010B  2908               	goto	u1217
   968     010C  290D               	nop2
   969     010D                     l1417:
   970                           
   971                           ;newmain.c: 54:         GO_nDONE = 1;
   972     010D  1283               	bcf	3,5	;RP0=0, select bank0
   973     010E  1303               	bcf	3,6	;RP1=0, select bank0
   974     010F  151F               	bsf	31,2	;volatile
   975     0110                     l54:	
   976                           ;newmain.c: 55:         while(GO_nDONE==1){}
   977                           
   978     0110  191F               	btfsc	31,2	;volatile
   979     0111  2913               	goto	u1171
   980     0112  2914               	goto	u1170
   981     0113                     u1171:
   982     0113  2910               	goto	l54
   983     0114                     u1170:
   984     0114                     l1419:
   985                           
   986                           ;newmain.c: 56:         low_bit = ADRESL;
   987     0114  1683               	bsf	3,5	;RP0=1, select bank1
   988     0115  1303               	bcf	3,6	;RP1=0, select bank1
   989     0116  081E               	movf	30,w	;volatile
   990     0117  1283               	bcf	3,5	;RP0=0, select bank0
   991     0118  1303               	bcf	3,6	;RP1=0, select bank0
   992     0119  00E1               	movwf	??_main
   993     011A  01E2               	clrf	??_main+1
   994     011B  0861               	movf	??_main,w
   995     011C  1683               	bsf	3,5	;RP0=1, select bank1
   996     011D  1303               	bcf	3,6	;RP1=0, select bank1
   997     011E  00CC               	movwf	main@low_bit^(0+128)
   998     011F  1283               	bcf	3,5	;RP0=0, select bank0
   999     0120  1303               	bcf	3,6	;RP1=0, select bank0
  1000     0121  0862               	movf	??_main+1,w
  1001     0122  1683               	bsf	3,5	;RP0=1, select bank1
  1002     0123  1303               	bcf	3,6	;RP1=0, select bank1
  1003     0124  00CD               	movwf	(main@low_bit+1)^(0+128)
  1004                           
  1005                           ;newmain.c: 57:         high_bit = ADRESH;
  1006     0125  1283               	bcf	3,5	;RP0=0, select bank0
  1007     0126  1303               	bcf	3,6	;RP1=0, select bank0
  1008     0127  081E               	movf	30,w	;volatile
  1009     0128  00E1               	movwf	??_main
  1010     0129  01E2               	clrf	??_main+1
  1011     012A  0861               	movf	??_main,w
  1012     012B  1683               	bsf	3,5	;RP0=1, select bank1
  1013     012C  1303               	bcf	3,6	;RP1=0, select bank1
  1014     012D  00CE               	movwf	main@high_bit^(0+128)
  1015     012E  1283               	bcf	3,5	;RP0=0, select bank0
  1016     012F  1303               	bcf	3,6	;RP1=0, select bank0
  1017     0130  0862               	movf	??_main+1,w
  1018     0131  1683               	bsf	3,5	;RP0=1, select bank1
  1019     0132  1303               	bcf	3,6	;RP1=0, select bank1
  1020     0133  00CF               	movwf	(main@high_bit+1)^(0+128)
  1021     0134                     l1421:
  1022                           
  1023                           ;newmain.c: 59:         bits = low_bit | high_bit<<8;
  1024     0134  084F               	movf	(main@high_bit+1)^(0+128),w
  1025     0135  1283               	bcf	3,5	;RP0=0, select bank0
  1026     0136  1303               	bcf	3,6	;RP1=0, select bank0
  1027     0137  00E2               	movwf	??_main+1
  1028     0138  1683               	bsf	3,5	;RP0=1, select bank1
  1029     0139  1303               	bcf	3,6	;RP1=0, select bank1
  1030     013A  084E               	movf	main@high_bit^(0+128),w
  1031     013B  1283               	bcf	3,5	;RP0=0, select bank0
  1032     013C  1303               	bcf	3,6	;RP1=0, select bank0
  1033     013D  00E1               	movwf	??_main
  1034     013E  0861               	movf	??_main,w
  1035     013F  00E2               	movwf	??_main+1
  1036     0140  01E1               	clrf	??_main
  1037     0141  1683               	bsf	3,5	;RP0=1, select bank1
  1038     0142  1303               	bcf	3,6	;RP1=0, select bank1
  1039     0143  084C               	movf	main@low_bit^(0+128),w
  1040     0144  1283               	bcf	3,5	;RP0=0, select bank0
  1041     0145  1303               	bcf	3,6	;RP1=0, select bank0
  1042     0146  0461               	iorwf	??_main,w
  1043     0147  1683               	bsf	3,5	;RP0=1, select bank1
  1044     0148  1303               	bcf	3,6	;RP1=0, select bank1
  1045     0149  00D0               	movwf	main@bits^(0+128)
  1046     014A  084D               	movf	(main@low_bit+1)^(0+128),w
  1047     014B  1283               	bcf	3,5	;RP0=0, select bank0
  1048     014C  1303               	bcf	3,6	;RP1=0, select bank0
  1049     014D  0462               	iorwf	??_main+1,w
  1050     014E  1683               	bsf	3,5	;RP0=1, select bank1
  1051     014F  1303               	bcf	3,6	;RP1=0, select bank1
  1052     0150  00D1               	movwf	(main@bits+1)^(0+128)
  1053     0151                     l1423:
  1054                           
  1055                           ;newmain.c: 60:         sprintf(arr, "%04d", bits);
  1056     0151  30C2               	movlw	(low (main@arr| 0))& (0+255)
  1057     0152  1283               	bcf	3,5	;RP0=0, select bank0
  1058     0153  1303               	bcf	3,6	;RP1=0, select bank0
  1059     0154  00D0               	movwf	sprintf@s
  1060     0155  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1061     0156  00D1               	movwf	sprintf@fmt
  1062     0157  1683               	bsf	3,5	;RP0=1, select bank1
  1063     0158  1303               	bcf	3,6	;RP1=0, select bank1
  1064     0159  0851               	movf	(main@bits+1)^(0+128),w
  1065     015A  1283               	bcf	3,5	;RP0=0, select bank0
  1066     015B  1303               	bcf	3,6	;RP1=0, select bank0
  1067     015C  00D3               	movwf	?_sprintf+3
  1068     015D  1683               	bsf	3,5	;RP0=1, select bank1
  1069     015E  1303               	bcf	3,6	;RP1=0, select bank1
  1070     015F  0850               	movf	main@bits^(0+128),w
  1071     0160  1283               	bcf	3,5	;RP0=0, select bank0
  1072     0161  1303               	bcf	3,6	;RP1=0, select bank0
  1073     0162  00D2               	movwf	?_sprintf+2
  1074     0163  120A  118A  25A0  120A  118A  	fcall	_sprintf
  1075     0168                     l1425:
  1076                           
  1077                           ;newmain.c: 61:         display(0, 0xc0);
  1078     0168  3000               	movlw	0
  1079     0169  00F2               	movwf	display@RS
  1080     016A  00F3               	movwf	display@RS+1
  1081     016B  30C0               	movlw	192
  1082     016C  00F4               	movwf	display@DC
  1083     016D  3000               	movlw	0
  1084     016E  00F5               	movwf	display@DC+1
  1085     016F  120A  118A  25E6  120A  118A  	fcall	_display
  1086     0174                     l1427:
  1087                           
  1088                           ;newmain.c: 62:         display_string(arr);
  1089     0174  30C2               	movlw	(low (main@arr| 0))& (0+255)
  1090     0175  00F8               	movwf	display_string@a
  1091     0176  120A  118A  2522  120A  118A  	fcall	_display_string
  1092     017B                     l1429:
  1093                           
  1094                           ;newmain.c: 64:         sprintf(arr, "%0d", count);
  1095     017B  30C2               	movlw	(low (main@arr| 0))& (0+255)
  1096     017C  1283               	bcf	3,5	;RP0=0, select bank0
  1097     017D  1303               	bcf	3,6	;RP1=0, select bank0
  1098     017E  00D0               	movwf	sprintf@s
  1099     017F  3006               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1100     0180  00D1               	movwf	sprintf@fmt
  1101     0181  1683               	bsf	3,5	;RP0=1, select bank1
  1102     0182  1303               	bcf	3,6	;RP1=0, select bank1
  1103     0183  0821               	movf	(_count+1)^(0+128),w
  1104     0184  1283               	bcf	3,5	;RP0=0, select bank0
  1105     0185  1303               	bcf	3,6	;RP1=0, select bank0
  1106     0186  00D3               	movwf	?_sprintf+3
  1107     0187  1683               	bsf	3,5	;RP0=1, select bank1
  1108     0188  1303               	bcf	3,6	;RP1=0, select bank1
  1109     0189  0820               	movf	_count^(0+128),w
  1110     018A  1283               	bcf	3,5	;RP0=0, select bank0
  1111     018B  1303               	bcf	3,6	;RP1=0, select bank0
  1112     018C  00D2               	movwf	?_sprintf+2
  1113     018D  120A  118A  25A0  120A  118A  	fcall	_sprintf
  1114     0192                     l1431:
  1115                           
  1116                           ;newmain.c: 65:         display(0, 0xcd);
  1117     0192  3000               	movlw	0
  1118     0193  00F2               	movwf	display@RS
  1119     0194  00F3               	movwf	display@RS+1
  1120     0195  30CD               	movlw	205
  1121     0196  00F4               	movwf	display@DC
  1122     0197  3000               	movlw	0
  1123     0198  00F5               	movwf	display@DC+1
  1124     0199  120A  118A  25E6  120A  118A  	fcall	_display
  1125     019E                     l1433:
  1126                           
  1127                           ;newmain.c: 66:         display_string(arr);
  1128     019E  30C2               	movlw	(low (main@arr| 0))& (0+255)
  1129     019F  00F8               	movwf	display_string@a
  1130     01A0  120A  118A  2522  120A  118A  	fcall	_display_string
  1131     01A5  284F               	goto	l1391
  1132     01A6  120A  118A  280C   	ljmp	start
  1133     01A9                     __end_of_main:
  1134                           
  1135                           	psect	text1
  1136     05A0                     __ptext1:	
  1137 ;; *************** function _sprintf *****************
  1138 ;; Defined at:
  1139 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_sprintf.c"
  1140 ;; Parameters:    Size  Location     Type
  1141 ;;  s               1   48[BANK0 ] PTR unsigned char 
  1142 ;;		 -> main@arr(10), 
  1143 ;;  fmt             1   49[BANK0 ] PTR const unsigned char 
  1144 ;;		 -> STR_3(4), STR_2(5), STR_1(5), 
  1145 ;; Auto vars:     Size  Location     Type
  1146 ;;  f              11   54[BANK0 ] struct _IO_FILE
  1147 ;;  ret             2    0        int 
  1148 ;;  ap              1   53[BANK0 ] PTR void [1]
  1149 ;;		 -> ?_sprintf(2), 
  1150 ;; Return value:  Size  Location     Type
  1151 ;;                  2   48[BANK0 ] int 
  1152 ;; Registers used:
  1153 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1154 ;; Tracked objects:
  1155 ;;		On entry : 0/0
  1156 ;;		On exit  : 0/0
  1157 ;;		Unchanged: 0/0
  1158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1159 ;;      Params:         0       4       0       0       0
  1160 ;;      Locals:         0      12       0       0       0
  1161 ;;      Temps:          0       1       0       0       0
  1162 ;;      Totals:         0      17       0       0       0
  1163 ;;Total ram usage:       17 bytes
  1164 ;; Hardware stack levels used: 1
  1165 ;; Hardware stack levels required when called: 8
  1166 ;; This function calls:
  1167 ;;		_vfprintf
  1168 ;; This function is called by:
  1169 ;;		_main
  1170 ;; This function uses a non-reentrant model
  1171 ;;
  1172                           
  1173     05A0                     _sprintf:	
  1174                           ;psect for function _sprintf
  1175                           
  1176     05A0                     l1357:	
  1177                           ;incstack = 0
  1178 ;; hardware stack exceeded
  1179                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1180                           
  1181     05A0  3052               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  1182     05A1  1283               	bcf	3,5	;RP0=0, select bank0
  1183     05A2  1303               	bcf	3,6	;RP1=0, select bank0
  1184     05A3  00D5               	movwf	sprintf@ap
  1185     05A4                     l1359:
  1186     05A4  0850               	movf	sprintf@s,w
  1187     05A5  00D6               	movwf	sprintf@f
  1188     05A6  3000               	movlw	0
  1189     05A7  00D7               	movwf	sprintf@f+1
  1190     05A8                     l1361:
  1191     05A8  01D8               	clrf	sprintf@f+2
  1192     05A9  01D9               	clrf	sprintf@f+3
  1193     05AA                     l1363:
  1194     05AA  01DF               	clrf	sprintf@f+9
  1195     05AB  01E0               	clrf	sprintf@f+10
  1196     05AC                     l1365:
  1197     05AC  3056               	movlw	low sprintf@f
  1198     05AD  00CB               	movwf	vfprintf@fp
  1199     05AE  3000               	movlw	high sprintf@f
  1200     05AF  00CC               	movwf	vfprintf@fp+1
  1201     05B0  0851               	movf	sprintf@fmt,w
  1202     05B1  00CD               	movwf	vfprintf@fmt
  1203     05B2  3055               	movlw	(low (sprintf@ap| 0))& (0+255)
  1204     05B3  00CE               	movwf	vfprintf@ap
  1205     05B4  120A  118A  25C3  120A  118A  	fcall	_vfprintf
  1206     05B9                     l1367:
  1207     05B9  1283               	bcf	3,5	;RP0=0, select bank0
  1208     05BA  1303               	bcf	3,6	;RP1=0, select bank0
  1209     05BB  0858               	movf	sprintf@f+2,w
  1210     05BC  0750               	addwf	sprintf@s,w
  1211     05BD  00D4               	movwf	??_sprintf
  1212     05BE  0854               	movf	??_sprintf,w
  1213     05BF  0084               	movwf	4
  1214     05C0  1383               	bcf	3,7	;select IRP bank0
  1215     05C1  0180               	clrf	0
  1216     05C2                     l623:
  1217     05C2  0008               	return
  1218     05C3                     __end_of_sprintf:
  1219                           
  1220                           	psect	text2
  1221     05C3                     __ptext2:	
  1222 ;; *************** function _vfprintf *****************
  1223 ;; Defined at:
  1224 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  1225 ;; Parameters:    Size  Location     Type
  1226 ;;  fp              2   43[BANK0 ] PTR struct _IO_FILE
  1227 ;;		 -> sprintf@f(11), 
  1228 ;;  fmt             1   45[BANK0 ] PTR const unsigned char 
  1229 ;;		 -> STR_3(4), STR_2(5), STR_1(5), 
  1230 ;;  ap              1   46[BANK0 ] PTR PTR void 
  1231 ;;		 -> sprintf@ap(1), 
  1232 ;; Auto vars:     Size  Location     Type
  1233 ;;  cfmt            1   47[BANK0 ] PTR unsigned char 
  1234 ;;		 -> STR_3(4), STR_2(5), STR_1(5), 
  1235 ;; Return value:  Size  Location     Type
  1236 ;;                  2   43[BANK0 ] int 
  1237 ;; Registers used:
  1238 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1239 ;; Tracked objects:
  1240 ;;		On entry : 0/0
  1241 ;;		On exit  : 0/0
  1242 ;;		Unchanged: 0/0
  1243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1244 ;;      Params:         0       4       0       0       0
  1245 ;;      Locals:         0       1       0       0       0
  1246 ;;      Temps:          0       0       0       0       0
  1247 ;;      Totals:         0       5       0       0       0
  1248 ;;Total ram usage:        5 bytes
  1249 ;; Hardware stack levels used: 1
  1250 ;; Hardware stack levels required when called: 7
  1251 ;; This function calls:
  1252 ;;		_vfpfcnvrt
  1253 ;; This function is called by:
  1254 ;;		_sprintf
  1255 ;; This function uses a non-reentrant model
  1256 ;;
  1257                           
  1258     05C3                     _vfprintf:	
  1259                           ;psect for function _vfprintf
  1260                           
  1261     05C3                     l1347:	
  1262                           ;incstack = 0
  1263 ;; hardware stack exceeded
  1264                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1265                           
  1266                           
  1267                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  1268     05C3  1283               	bcf	3,5	;RP0=0, select bank0
  1269     05C4  1303               	bcf	3,6	;RP1=0, select bank0
  1270     05C5  084D               	movf	vfprintf@fmt,w
  1271     05C6  00CF               	movwf	vfprintf@cfmt
  1272                           
  1273                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1274     05C7  2DD5               	goto	l1351
  1275     05C8                     l1349:
  1276                           
  1277                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  1278     05C8  084B               	movf	vfprintf@fp,w
  1279     05C9  00BF               	movwf	vfpfcnvrt@fp
  1280     05CA  084C               	movf	vfprintf@fp+1,w
  1281     05CB  00C0               	movwf	vfpfcnvrt@fp+1
  1282     05CC  304F               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  1283     05CD  00C1               	movwf	vfpfcnvrt@fmt
  1284     05CE  084E               	movf	vfprintf@ap,w
  1285     05CF  00C2               	movwf	vfpfcnvrt@ap
  1286     05D0  120A  118A  226C  120A  118A  	fcall	_vfpfcnvrt
  1287     05D5                     l1351:
  1288                           
  1289                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  1290     05D5  1283               	bcf	3,5	;RP0=0, select bank0
  1291     05D6  1303               	bcf	3,6	;RP1=0, select bank0
  1292     05D7  084F               	movf	vfprintf@cfmt,w
  1293     05D8  0084               	movwf	4
  1294     05D9  120A  118A  2630  120A  118A  	fcall	stringdir
  1295     05DE  3A00               	xorlw	0
  1296     05DF  1D03               	skipz
  1297     05E0  2DE2               	goto	u1131
  1298     05E1  2DE3               	goto	u1130
  1299     05E2                     u1131:
  1300     05E2  2DC8               	goto	l1349
  1301     05E3                     u1130:
  1302     05E3                     l1353:
  1303                           
  1304                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  1305     05E3  01CB               	clrf	?_vfprintf
  1306     05E4  01CC               	clrf	?_vfprintf+1
  1307     05E5                     l693:
  1308     05E5  0008               	return
  1309     05E6                     __end_of_vfprintf:
  1310                           
  1311                           	psect	text3
  1312     026C                     __ptext3:	
  1313 ;; *************** function _vfpfcnvrt *****************
  1314 ;; Defined at:
  1315 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  1316 ;; Parameters:    Size  Location     Type
  1317 ;;  fp              2   31[BANK0 ] PTR struct _IO_FILE
  1318 ;;		 -> sprintf@f(11), 
  1319 ;;  fmt             1   33[BANK0 ] PTR PTR unsigned char 
  1320 ;;		 -> vfprintf@cfmt(1), 
  1321 ;;  ap              1   34[BANK0 ] PTR PTR void 
  1322 ;;		 -> sprintf@ap(1), 
  1323 ;; Auto vars:     Size  Location     Type
  1324 ;;  convarg         4   37[BANK0 ] struct .
  1325 ;;  cp              1   42[BANK0 ] PTR unsigned char 
  1326 ;;		 -> STR_3(4), STR_2(5), STR_1(5), 
  1327 ;;  done            1   41[BANK0 ] _Bool 
  1328 ;;  c               1    0        unsigned char 
  1329 ;; Return value:  Size  Location     Type
  1330 ;;                  1    wreg      void 
  1331 ;; Registers used:
  1332 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1333 ;; Tracked objects:
  1334 ;;		On entry : 0/0
  1335 ;;		On exit  : 0/0
  1336 ;;		Unchanged: 0/0
  1337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1338 ;;      Params:         0       4       0       0       0
  1339 ;;      Locals:         0       6       0       0       0
  1340 ;;      Temps:          0       2       0       0       0
  1341 ;;      Totals:         0      12       0       0       0
  1342 ;;Total ram usage:       12 bytes
  1343 ;; Hardware stack levels used: 1
  1344 ;; Hardware stack levels required when called: 6
  1345 ;; This function calls:
  1346 ;;		_dtoa
  1347 ;;		_fputc
  1348 ;;		_read_prec_or_width
  1349 ;; This function is called by:
  1350 ;;		_vfprintf
  1351 ;; This function uses a non-reentrant model
  1352 ;;
  1353                           
  1354     026C                     _vfpfcnvrt:	
  1355                           ;psect for function _vfpfcnvrt
  1356                           
  1357     026C                     l1289:	
  1358                           ;incstack = 0
  1359 ;; hardware stack exceeded
  1360                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1361                           
  1362                           
  1363                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  1364     026C  1283               	bcf	3,5	;RP0=0, select bank0
  1365     026D  1303               	bcf	3,6	;RP1=0, select bank0
  1366     026E  0841               	movf	vfpfcnvrt@fmt,w
  1367     026F  0084               	movwf	4
  1368     0270  1383               	bcf	3,7	;select IRP bank0
  1369     0271  0800               	movf	0,w
  1370     0272  0084               	movwf	4
  1371     0273  120A  118A  2630  120A  118A  	fcall	stringdir
  1372     0278  3A25               	xorlw	37
  1373     0279  1D03               	skipz
  1374     027A  2A7C               	goto	u1061
  1375     027B  2A7D               	goto	u1060
  1376     027C                     u1061:
  1377     027C  2B04               	goto	l1333
  1378     027D                     u1060:
  1379     027D                     l1291:
  1380                           
  1381                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  1382     027D  0841               	movf	vfpfcnvrt@fmt,w
  1383     027E  0084               	movwf	4
  1384     027F  3001               	movlw	1
  1385     0280  0780               	addwf	0,f
  1386     0281                     l1293:
  1387                           
  1388                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  1389     0281  01E4               	clrf	_width
  1390     0282  01E5               	clrf	_width+1
  1391     0283  3000               	movlw	0
  1392     0284  00E8               	movwf	_flags
  1393     0285                     l1295:
  1394                           
  1395                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  1396     0285  30FF               	movlw	255
  1397     0286  00E6               	movwf	_prec
  1398     0287  30FF               	movlw	255
  1399     0288  00E7               	movwf	_prec+1
  1400     0289                     l1297:
  1401                           
  1402                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1209:         don
      +                          e = 0;
  1403     0289  01C9               	clrf	vfpfcnvrt@done
  1404                           
  1405                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1406     028A  2AA1               	goto	l1305
  1407     028B                     l679:	
  1408                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1219:            
      +                               case '0' :
  1409                           
  1410                           
  1411                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1220:            
      +                                   flags |= (1 << 1);
  1412     028B  14E8               	bsf	_flags,1
  1413     028C                     l1299:
  1414                           
  1415                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1221:            
      +                                   ++*fmt;
  1416     028C  0841               	movf	vfpfcnvrt@fmt,w
  1417     028D  0084               	movwf	4
  1418     028E  3001               	movlw	1
  1419     028F  0780               	addwf	0,f
  1420                           
  1421                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1222:            
      +                                   break;
  1422     0290  2AA1               	goto	l1305
  1423     0291                     l681:	
  1424                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1242:            
      +                               default:
  1425                           
  1426                           
  1427                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1243:            
      +                                   done = 1;
  1428     0291  3001               	movlw	1
  1429     0292  00C9               	movwf	vfpfcnvrt@done
  1430                           
  1431                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1244:            
      +                                   break;
  1432     0293  2AA1               	goto	l1305
  1433     0294                     l1303:
  1434     0294  0841               	movf	vfpfcnvrt@fmt,w
  1435     0295  0084               	movwf	4
  1436     0296  0800               	movf	0,w
  1437     0297  0084               	movwf	4
  1438     0298  120A  118A  2630  120A  118A  	fcall	stringdir
  1439                           
  1440                           ; Switch size 1, requested type "simple"
  1441                           ; Number of cases is 1, Range of values is 48 to 48
  1442                           ; switch strategies available:
  1443                           ; Name         Instructions Cycles
  1444                           ; simple_byte            4     3 (average)
  1445                           ; direct_byte           14    11 (fixed)
  1446                           ; jumptable            263     9 (fixed)
  1447                           ;	Chosen strategy is simple_byte
  1448     029D  3A30               	xorlw	48	; case 48
  1449     029E  1903               	skipnz
  1450     029F  2A8B               	goto	l679
  1451     02A0  2A91               	goto	l681
  1452     02A1                     l1305:
  1453                           
  1454                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1210:         whi
      +                          le (!done) {
  1455     02A1  0849               	movf	vfpfcnvrt@done,w
  1456     02A2  1903               	btfsc	3,2
  1457     02A3  2AA5               	goto	u1071
  1458     02A4  2AA6               	goto	u1070
  1459     02A5                     u1071:
  1460     02A5  2A94               	goto	l1303
  1461     02A6                     u1070:
  1462     02A6                     l1307:
  1463                           
  1464                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1256:   width = r
      +                          ead_prec_or_width(fmt, ap);
  1465     02A6  0841               	movf	vfpfcnvrt@fmt,w
  1466     02A7  00F8               	movwf	read_prec_or_width@fmt
  1467     02A8  0842               	movf	vfpfcnvrt@ap,w
  1468     02A9  00F9               	movwf	read_prec_or_width@ap
  1469     02AA  120A  118A  2421  120A  118A  	fcall	_read_prec_or_width
  1470     02AF  0879               	movf	?_read_prec_or_width+1,w
  1471     02B0  1283               	bcf	3,5	;RP0=0, select bank0
  1472     02B1  1303               	bcf	3,6	;RP1=0, select bank0
  1473     02B2  00E5               	movwf	_width+1
  1474     02B3  0878               	movf	?_read_prec_or_width,w
  1475     02B4  00E4               	movwf	_width
  1476     02B5                     l1309:
  1477                           
  1478                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1257:   if (width
      +                           < 0) {
  1479     02B5  1FE5               	btfss	_width+1,7
  1480     02B6  2AB8               	goto	u1081
  1481     02B7  2AB9               	goto	u1080
  1482     02B8                     u1081:
  1483     02B8  2ABF               	goto	l1315
  1484     02B9                     u1080:
  1485     02B9                     l1311:
  1486                           
  1487                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1258:    flags |=
      +                           (1 << 0);
  1488     02B9  1468               	bsf	_flags,0
  1489     02BA                     l1313:
  1490                           
  1491                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1259:    width = 
      +                          -width;
  1492     02BA  09E4               	comf	_width,f
  1493     02BB  09E5               	comf	_width+1,f
  1494     02BC  0AE4               	incf	_width,f
  1495     02BD  1903               	skipnz
  1496     02BE  0AE5               	incf	_width+1,f
  1497     02BF                     l1315:
  1498                           
  1499                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  1500     02BF  0841               	movf	vfpfcnvrt@fmt,w
  1501     02C0  0084               	movwf	4
  1502     02C1  1383               	bcf	3,7	;select IRP bank0
  1503     02C2  0800               	movf	0,w
  1504     02C3  00CA               	movwf	vfpfcnvrt@cp
  1505     02C4                     l1317:
  1506                           
  1507                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1508     02C4  084A               	movf	vfpfcnvrt@cp,w
  1509     02C5  0084               	movwf	4
  1510     02C6  120A  118A  2630  120A  118A  	fcall	stringdir
  1511     02CB  3A64               	xorlw	100
  1512     02CC  1903               	skipnz
  1513     02CD  2ACF               	goto	u1091
  1514     02CE  2AD0               	goto	u1090
  1515     02CF                     u1091:
  1516     02CF  2ADC               	goto	l1321
  1517     02D0                     u1090:
  1518     02D0                     l1319:
  1519     02D0  084A               	movf	vfpfcnvrt@cp,w
  1520     02D1  0084               	movwf	4
  1521     02D2  120A  118A  2630  120A  118A  	fcall	stringdir
  1522     02D7  3A69               	xorlw	105
  1523     02D8  1D03               	skipz
  1524     02D9  2ADB               	goto	u1101
  1525     02DA  2ADC               	goto	u1100
  1526     02DB                     u1101:
  1527     02DB  2AFC               	goto	l1329
  1528     02DC                     u1100:
  1529     02DC                     l1321:
  1530                           
  1531                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1532     02DC  0842               	movf	vfpfcnvrt@ap,w
  1533     02DD  0084               	movwf	4
  1534     02DE  0800               	movf	0,w
  1535     02DF  00FF               	movwf	btemp+1
  1536     02E0  3002               	movlw	2
  1537     02E1  0780               	addwf	0,f
  1538     02E2  087F               	movf	btemp+1,w
  1539     02E3  0084               	movwf	4
  1540     02E4  0800               	movf	0,w
  1541     02E5  00C5               	movwf	vfpfcnvrt@convarg
  1542     02E6  0A84               	incf	4,f
  1543     02E7  0800               	movf	0,w
  1544     02E8  00C6               	movwf	vfpfcnvrt@convarg+1
  1545     02E9                     l1323:
  1546                           
  1547                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  1548     02E9  0841               	movf	vfpfcnvrt@fmt,w
  1549     02EA  0084               	movwf	4
  1550     02EB  084A               	movf	vfpfcnvrt@cp,w
  1551     02EC  3E01               	addlw	1
  1552     02ED  0080               	movwf	0
  1553     02EE                     l1325:
  1554                           
  1555                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1432:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
  1556     02EE  083F               	movf	vfpfcnvrt@fp,w
  1557     02EF  00B3               	movwf	dtoa@fp
  1558     02F0  0840               	movf	vfpfcnvrt@fp+1,w
  1559     02F1  00B4               	movwf	dtoa@fp+1
  1560     02F2  0846               	movf	vfpfcnvrt@convarg+1,w
  1561     02F3  00B6               	movwf	dtoa@d+1
  1562     02F4  0845               	movf	vfpfcnvrt@convarg,w
  1563     02F5  00B5               	movwf	dtoa@d
  1564     02F6  120A  118A  21A9  120A  118A  	fcall	_dtoa
  1565     02FB  2B1D               	goto	l687
  1566     02FC                     l1329:
  1567                           
  1568                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1569     02FC  1283               	bcf	3,5	;RP0=0, select bank0
  1570     02FD  1303               	bcf	3,6	;RP1=0, select bank0
  1571     02FE  0841               	movf	vfpfcnvrt@fmt,w
  1572     02FF  0084               	movwf	4
  1573     0300  3001               	movlw	1
  1574     0301  1383               	bcf	3,7	;select IRP bank0
  1575     0302  0780               	addwf	0,f
  1576     0303  2B1D               	goto	l687
  1577     0304                     l1333:
  1578                           
  1579                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1580     0304  0841               	movf	vfpfcnvrt@fmt,w
  1581     0305  0084               	movwf	4
  1582     0306  0800               	movf	0,w
  1583     0307  0084               	movwf	4
  1584     0308  120A  118A  2630  120A  118A  	fcall	stringdir
  1585     030D  00C3               	movwf	??_vfpfcnvrt
  1586     030E  01C4               	clrf	??_vfpfcnvrt+1
  1587     030F  0843               	movf	??_vfpfcnvrt,w
  1588     0310  00F2               	movwf	fputc@c
  1589     0311  0844               	movf	??_vfpfcnvrt+1,w
  1590     0312  00F3               	movwf	fputc@c+1
  1591     0313  083F               	movf	vfpfcnvrt@fp,w
  1592     0314  00F4               	movwf	fputc@fp
  1593     0315  0840               	movf	vfpfcnvrt@fp+1,w
  1594     0316  00F5               	movwf	fputc@fp+1
  1595     0317  120A  118A  231E  120A  118A  	fcall	_fputc
  1596     031C  2AFC               	goto	l1329
  1597     031D                     l687:
  1598     031D  0008               	return
  1599     031E                     __end_of_vfpfcnvrt:
  1600                           
  1601                           	psect	text4
  1602     0421                     __ptext4:	
  1603 ;; *************** function _read_prec_or_width *****************
  1604 ;; Defined at:
  1605 ;;		line 1158 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  1606 ;; Parameters:    Size  Location     Type
  1607 ;;  fmt             1    8[COMMON] PTR PTR const unsigned c
  1608 ;;		 -> vfprintf@cfmt(1), 
  1609 ;;  ap              1    9[COMMON] PTR PTR void [1]
  1610 ;;		 -> sprintf@ap(1), 
  1611 ;; Auto vars:     Size  Location     Type
  1612 ;;  c               1    0[BANK0 ] unsigned char 
  1613 ;;  n               2    1[BANK0 ] int 
  1614 ;; Return value:  Size  Location     Type
  1615 ;;                  2    8[COMMON] int 
  1616 ;; Registers used:
  1617 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1618 ;; Tracked objects:
  1619 ;;		On entry : 0/0
  1620 ;;		On exit  : 0/0
  1621 ;;		Unchanged: 0/0
  1622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1623 ;;      Params:         2       0       0       0       0
  1624 ;;      Locals:         0       3       0       0       0
  1625 ;;      Temps:          0       0       0       0       0
  1626 ;;      Totals:         2       3       0       0       0
  1627 ;;Total ram usage:        5 bytes
  1628 ;; Hardware stack levels used: 1
  1629 ;; Hardware stack levels required when called: 2
  1630 ;; This function calls:
  1631 ;;		___wmul
  1632 ;; This function is called by:
  1633 ;;		_vfpfcnvrt
  1634 ;; This function uses a non-reentrant model
  1635 ;;
  1636                           
  1637     0421                     _read_prec_or_width:	
  1638                           ;psect for function _read_prec_or_width
  1639                           
  1640     0421                     l1271:	
  1641                           ;incstack = 0
  1642                           ; Regs used in _read_prec_or_width: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1643                           
  1644                           
  1645                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1159:     int n =
      +                           0;
  1646     0421  1283               	bcf	3,5	;RP0=0, select bank0
  1647     0422  1303               	bcf	3,6	;RP1=0, select bank0
  1648     0423  01A1               	clrf	read_prec_or_width@n
  1649     0424  01A2               	clrf	read_prec_or_width@n+1
  1650     0425                     l1273:
  1651                           
  1652                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1160:     if ((*f
      +                          mt)[0] == '*') {
  1653     0425  0878               	movf	read_prec_or_width@fmt,w
  1654     0426  0084               	movwf	4
  1655     0427  1383               	bcf	3,7	;select IRP bank0
  1656     0428  0800               	movf	0,w
  1657     0429  0084               	movwf	4
  1658     042A  120A  118A  2630  120A  118A  	fcall	stringdir
  1659     042F  3A2A               	xorlw	42
  1660     0430  1D03               	skipz
  1661     0431  2C33               	goto	u1041
  1662     0432  2C34               	goto	u1040
  1663     0433                     u1041:
  1664     0433  2C62               	goto	l1283
  1665     0434                     u1040:
  1666     0434                     l1275:
  1667                           
  1668                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1161:         ++*
      +                          fmt;
  1669     0434  0878               	movf	read_prec_or_width@fmt,w
  1670     0435  0084               	movwf	4
  1671     0436  3001               	movlw	1
  1672     0437  0780               	addwf	0,f
  1673     0438                     l1277:
  1674                           
  1675                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1162:         n =
      +                           (*(int *)__va_arg(*(int **)*ap, (int)0));
  1676     0438  0879               	movf	read_prec_or_width@ap,w
  1677     0439  0084               	movwf	4
  1678     043A  0800               	movf	0,w
  1679     043B  00FF               	movwf	btemp+1
  1680     043C  3002               	movlw	2
  1681     043D  0780               	addwf	0,f
  1682     043E  087F               	movf	btemp+1,w
  1683     043F  0084               	movwf	4
  1684     0440  0800               	movf	0,w
  1685     0441  00A1               	movwf	read_prec_or_width@n
  1686     0442  0A84               	incf	4,f
  1687     0443  0800               	movf	0,w
  1688     0444  00A2               	movwf	read_prec_or_width@n+1
  1689                           
  1690                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1163:     } else 
      +                          {
  1691     0445  2C73               	goto	l1285
  1692     0446                     l1279:
  1693                           
  1694                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1166:            
      +                           n = n * 10 + c;
  1695     0446  0822               	movf	read_prec_or_width@n+1,w
  1696     0447  00F3               	movwf	___wmul@multiplier+1
  1697     0448  0821               	movf	read_prec_or_width@n,w
  1698     0449  00F2               	movwf	___wmul@multiplier
  1699     044A  300A               	movlw	10
  1700     044B  00F4               	movwf	___wmul@multiplicand
  1701     044C  3000               	movlw	0
  1702     044D  00F5               	movwf	___wmul@multiplicand+1
  1703     044E  120A  118A  257B  120A  118A  	fcall	___wmul
  1704     0453  1283               	bcf	3,5	;RP0=0, select bank0
  1705     0454  1303               	bcf	3,6	;RP1=0, select bank0
  1706     0455  0820               	movf	read_prec_or_width@c,w
  1707     0456  0772               	addwf	?___wmul,w
  1708     0457  00A1               	movwf	read_prec_or_width@n
  1709     0458  3000               	movlw	0
  1710     0459  1803               	skipnc
  1711     045A  3001               	movlw	1
  1712     045B  0773               	addwf	?___wmul+1,w
  1713     045C  00A2               	movwf	read_prec_or_width@n+1
  1714     045D                     l1281:
  1715                           
  1716                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1167:            
      +                           ++*fmt;
  1717     045D  0878               	movf	read_prec_or_width@fmt,w
  1718     045E  0084               	movwf	4
  1719     045F  3001               	movlw	1
  1720     0460  1383               	bcf	3,7	;select IRP bank0
  1721     0461  0780               	addwf	0,f
  1722     0462                     l1283:
  1723                           
  1724                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1165:         whi
      +                          le ((c = ((unsigned)(*fmt)[0]) - '0') < 10) {
  1725     0462  0878               	movf	read_prec_or_width@fmt,w
  1726     0463  0084               	movwf	4
  1727     0464  0800               	movf	0,w
  1728     0465  0084               	movwf	4
  1729     0466  120A  118A  2630  120A  118A  	fcall	stringdir
  1730     046B  3ED0               	addlw	208
  1731     046C  00A0               	movwf	read_prec_or_width@c
  1732     046D  300A               	movlw	10
  1733     046E  0220               	subwf	read_prec_or_width@c,w
  1734     046F  1C03               	skipc
  1735     0470  2C72               	goto	u1051
  1736     0471  2C73               	goto	u1050
  1737     0472                     u1051:
  1738     0472  2C46               	goto	l1279
  1739     0473                     u1050:
  1740     0473                     l1285:
  1741                           
  1742                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1170:     return 
      +                          n;
  1743     0473  0822               	movf	read_prec_or_width@n+1,w
  1744     0474  00F9               	movwf	?_read_prec_or_width+1
  1745     0475  0821               	movf	read_prec_or_width@n,w
  1746     0476  00F8               	movwf	?_read_prec_or_width
  1747     0477                     l672:
  1748     0477  0008               	return
  1749     0478                     __end_of_read_prec_or_width:
  1750                           
  1751                           	psect	text5
  1752     057B                     __ptext5:	
  1753 ;; *************** function ___wmul *****************
  1754 ;; Defined at:
  1755 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\Umul16.c"
  1756 ;; Parameters:    Size  Location     Type
  1757 ;;  multiplier      2    2[COMMON] unsigned int 
  1758 ;;  multiplicand    2    4[COMMON] unsigned int 
  1759 ;; Auto vars:     Size  Location     Type
  1760 ;;  product         2    6[COMMON] unsigned int 
  1761 ;; Return value:  Size  Location     Type
  1762 ;;                  2    2[COMMON] unsigned int 
  1763 ;; Registers used:
  1764 ;;		wreg, status,2, status,0
  1765 ;; Tracked objects:
  1766 ;;		On entry : 0/0
  1767 ;;		On exit  : 0/0
  1768 ;;		Unchanged: 0/0
  1769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1770 ;;      Params:         4       0       0       0       0
  1771 ;;      Locals:         2       0       0       0       0
  1772 ;;      Temps:          0       0       0       0       0
  1773 ;;      Totals:         6       0       0       0       0
  1774 ;;Total ram usage:        6 bytes
  1775 ;; Hardware stack levels used: 1
  1776 ;; Hardware stack levels required when called: 1
  1777 ;; This function calls:
  1778 ;;		Nothing
  1779 ;; This function is called by:
  1780 ;;		_read_prec_or_width
  1781 ;; This function uses a non-reentrant model
  1782 ;;
  1783                           
  1784     057B                     ___wmul:	
  1785                           ;psect for function ___wmul
  1786                           
  1787     057B                     l1105:	
  1788                           ;incstack = 0
  1789                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1790                           
  1791     057B  01F6               	clrf	___wmul@product
  1792     057C  01F7               	clrf	___wmul@product+1
  1793     057D                     l1107:
  1794     057D  1C72               	btfss	___wmul@multiplier,0
  1795     057E  2D80               	goto	u661
  1796     057F  2D81               	goto	u660
  1797     0580                     u661:
  1798     0580  2D87               	goto	l160
  1799     0581                     u660:
  1800     0581                     l1109:
  1801     0581  0874               	movf	___wmul@multiplicand,w
  1802     0582  07F6               	addwf	___wmul@product,f
  1803     0583  1803               	skipnc
  1804     0584  0AF7               	incf	___wmul@product+1,f
  1805     0585  0875               	movf	___wmul@multiplicand+1,w
  1806     0586  07F7               	addwf	___wmul@product+1,f
  1807     0587                     l160:
  1808     0587  3001               	movlw	1
  1809     0588                     u675:
  1810     0588  1003               	clrc
  1811     0589  0DF4               	rlf	___wmul@multiplicand,f
  1812     058A  0DF5               	rlf	___wmul@multiplicand+1,f
  1813     058B  3EFF               	addlw	-1
  1814     058C  1D03               	skipz
  1815     058D  2D88               	goto	u675
  1816     058E                     l1111:
  1817     058E  3001               	movlw	1
  1818     058F                     u685:
  1819     058F  1003               	clrc
  1820     0590  0CF3               	rrf	___wmul@multiplier+1,f
  1821     0591  0CF2               	rrf	___wmul@multiplier,f
  1822     0592  3EFF               	addlw	-1
  1823     0593  1D03               	skipz
  1824     0594  2D8F               	goto	u685
  1825     0595                     l1113:
  1826     0595  0872               	movf	___wmul@multiplier,w
  1827     0596  0473               	iorwf	___wmul@multiplier+1,w
  1828     0597  1D03               	btfss	3,2
  1829     0598  2D9A               	goto	u691
  1830     0599  2D9B               	goto	u690
  1831     059A                     u691:
  1832     059A  2D7D               	goto	l1107
  1833     059B                     u690:
  1834     059B                     l1115:
  1835     059B  0877               	movf	___wmul@product+1,w
  1836     059C  00F3               	movwf	?___wmul+1
  1837     059D  0876               	movf	___wmul@product,w
  1838     059E  00F2               	movwf	?___wmul
  1839     059F                     l162:
  1840     059F  0008               	return
  1841     05A0                     __end_of___wmul:
  1842                           
  1843                           	psect	text6
  1844     01A9                     __ptext6:	
  1845 ;; *************** function _dtoa *****************
  1846 ;; Defined at:
  1847 ;;		line 513 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;  fp              2   19[BANK0 ] PTR struct _IO_FILE
  1850 ;;		 -> sprintf@f(11), 
  1851 ;;  d               2   21[BANK0 ] int 
  1852 ;; Auto vars:     Size  Location     Type
  1853 ;;  i               2   29[BANK0 ] int 
  1854 ;;  w               2   26[BANK0 ] int 
  1855 ;;  s               1   28[BANK0 ] unsigned char 
  1856 ;;  p               1   25[BANK0 ] _Bool 
  1857 ;; Return value:  Size  Location     Type
  1858 ;;                  1    wreg      void 
  1859 ;; Registers used:
  1860 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1861 ;; Tracked objects:
  1862 ;;		On entry : 0/0
  1863 ;;		On exit  : 0/0
  1864 ;;		Unchanged: 0/0
  1865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1866 ;;      Params:         0       4       0       0       0
  1867 ;;      Locals:         0       8       0       0       0
  1868 ;;      Temps:          0       0       0       0       0
  1869 ;;      Totals:         0      12       0       0       0
  1870 ;;Total ram usage:       12 bytes
  1871 ;; Hardware stack levels used: 1
  1872 ;; Hardware stack levels required when called: 5
  1873 ;; This function calls:
  1874 ;;		___awdiv
  1875 ;;		___awmod
  1876 ;;		_abs
  1877 ;;		_pad
  1878 ;; This function is called by:
  1879 ;;		_vfpfcnvrt
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883     01A9                     _dtoa:	
  1884                           ;psect for function _dtoa
  1885                           
  1886     01A9                     l1225:	
  1887                           ;incstack = 0
  1888 ;; hardware stack exceeded
  1889                           ; Regs used in _dtoa: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1890                           
  1891                           
  1892                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 513: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\commo
      +                          n\doprnt.c: 514: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c:
      +                           515:  char s;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 516
      +                          :     int i, w;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 52
      +                          0:  _Bool p = 1;
  1893     01A9  3001               	movlw	1
  1894     01AA  1283               	bcf	3,5	;RP0=0, select bank0
  1895     01AB  1303               	bcf	3,6	;RP1=0, select bank0
  1896     01AC  00B9               	movwf	dtoa@p
  1897     01AD                     l1227:
  1898                           
  1899                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 524:     s = d < 
      +                          0 ? 1 : 0;
  1900     01AD  1BB6               	btfsc	dtoa@d+1,7
  1901     01AE  29B0               	goto	u941
  1902     01AF  29B2               	goto	u940
  1903     01B0                     u941:
  1904     01B0  3001               	movlw	1
  1905     01B1  29B3               	goto	u950
  1906     01B2                     u940:
  1907     01B2  3000               	movlw	0
  1908     01B3                     u950:
  1909     01B3  00BC               	movwf	dtoa@s
  1910                           
  1911                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 535:     w = widt
      +                          h;
  1912     01B4  0865               	movf	_width+1,w
  1913     01B5  00BB               	movwf	dtoa@w+1
  1914     01B6  0864               	movf	_width,w
  1915     01B7  00BA               	movwf	dtoa@w
  1916     01B8                     l1229:
  1917                           
  1918                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 536:     if (s
  1919     01B8  083C               	movf	dtoa@s,w
  1920     01B9  1903               	btfsc	3,2
  1921     01BA  29BC               	goto	u961
  1922     01BB  29BD               	goto	u960
  1923     01BC                     u961:
  1924     01BC  29D3               	goto	l651
  1925     01BD                     u960:
  1926     01BD                     l1231:
  1927                           
  1928                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 540:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 541:         --w;
  1929     01BD  30FF               	movlw	255
  1930     01BE  07BA               	addwf	dtoa@w,f
  1931     01BF  1803               	skipnc
  1932     01C0  0ABB               	incf	dtoa@w+1,f
  1933     01C1  30FF               	movlw	255
  1934     01C2  07BB               	addwf	dtoa@w+1,f
  1935     01C3                     l1233:
  1936                           
  1937                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 542:   s = s ? '-
      +                          ' : '+';
  1938     01C3  083C               	movf	dtoa@s,w
  1939     01C4  1D03               	btfss	3,2
  1940     01C5  29C7               	goto	u971
  1941     01C6  29C8               	goto	u970
  1942     01C7                     u971:
  1943     01C7  29CD               	goto	l1237
  1944     01C8                     u970:
  1945     01C8                     l1235:
  1946     01C8  302B               	movlw	43
  1947     01C9  00B7               	movwf	_dtoa$606
  1948     01CA  3000               	movlw	0
  1949     01CB  00B8               	movwf	_dtoa$606+1
  1950     01CC  29D1               	goto	l655
  1951     01CD                     l1237:
  1952     01CD  302D               	movlw	45
  1953     01CE  00B7               	movwf	_dtoa$606
  1954     01CF  3000               	movlw	0
  1955     01D0  00B8               	movwf	_dtoa$606+1
  1956     01D1                     l655:
  1957     01D1  0837               	movf	_dtoa$606,w
  1958     01D2  00BC               	movwf	dtoa@s
  1959     01D3                     l651:	
  1960                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 543:     }
  1961                           
  1962                           
  1963                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 552:     i = size
      +                          of(dbuf) - 1;
  1964     01D3  301F               	movlw	31
  1965     01D4  00BD               	movwf	dtoa@i
  1966     01D5  3000               	movlw	0
  1967     01D6  00BE               	movwf	dtoa@i+1
  1968     01D7                     l1239:
  1969                           
  1970                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 553:     dbuf[i] 
      +                          = '\0';
  1971     01D7  1683               	bsf	3,5	;RP0=1, select bank1
  1972     01D8  1303               	bcf	3,6	;RP1=0, select bank1
  1973     01D9  01C1               	clrf	(_dbuf^(0+128)+31)
  1974                           
  1975                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  1976     01DA  2A1A               	goto	l1251
  1977     01DB                     l1241:
  1978                           
  1979                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 563:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 564:         --i;
  1980     01DB  30FF               	movlw	255
  1981     01DC  07BD               	addwf	dtoa@i,f
  1982     01DD  1803               	skipnc
  1983     01DE  0ABE               	incf	dtoa@i+1,f
  1984     01DF  30FF               	movlw	255
  1985     01E0  07BE               	addwf	dtoa@i+1,f
  1986     01E1                     l1243:
  1987                           
  1988                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 565:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  1989     01E1  083D               	movf	dtoa@i,w
  1990     01E2  3EA2               	addlw	(low (_dbuf| 0))& (0+255)
  1991     01E3  0084               	movwf	4
  1992     01E4  300A               	movlw	10
  1993     01E5  00F2               	movwf	___awmod@divisor
  1994     01E6  3000               	movlw	0
  1995     01E7  00F3               	movwf	___awmod@divisor+1
  1996     01E8  0836               	movf	dtoa@d+1,w
  1997     01E9  00F5               	movwf	___awmod@dividend+1
  1998     01EA  0835               	movf	dtoa@d,w
  1999     01EB  00F4               	movwf	___awmod@dividend
  2000     01EC  120A  118A  2478  120A  118A  	fcall	___awmod
  2001     01F1  0873               	movf	?___awmod+1,w
  2002     01F2  00F9               	movwf	abs@a+1
  2003     01F3  0872               	movf	?___awmod,w
  2004     01F4  00F8               	movwf	abs@a
  2005     01F5  120A  118A  261F  120A  118A  	fcall	_abs
  2006     01FA  0878               	movf	?_abs,w
  2007     01FB  3E30               	addlw	48
  2008     01FC  1383               	bcf	3,7	;select IRP bank1
  2009     01FD  0080               	movwf	0
  2010     01FE                     l1245:
  2011                           
  2012                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 569:   p = 0;
  2013     01FE  1283               	bcf	3,5	;RP0=0, select bank0
  2014     01FF  1303               	bcf	3,6	;RP1=0, select bank0
  2015     0200  01B9               	clrf	dtoa@p
  2016     0201                     l1247:
  2017                           
  2018                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 571:         --w;
  2019     0201  30FF               	movlw	255
  2020     0202  07BA               	addwf	dtoa@w,f
  2021     0203  1803               	skipnc
  2022     0204  0ABB               	incf	dtoa@w+1,f
  2023     0205  30FF               	movlw	255
  2024     0206  07BB               	addwf	dtoa@w+1,f
  2025     0207                     l1249:
  2026                           
  2027                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 572:         d = 
      +                          d / 10;
  2028     0207  300A               	movlw	10
  2029     0208  00F2               	movwf	___awdiv@divisor
  2030     0209  3000               	movlw	0
  2031     020A  00F3               	movwf	___awdiv@divisor+1
  2032     020B  0836               	movf	dtoa@d+1,w
  2033     020C  00F5               	movwf	___awdiv@dividend+1
  2034     020D  0835               	movf	dtoa@d,w
  2035     020E  00F4               	movwf	___awdiv@dividend
  2036     020F  120A  118A  23BE  120A  118A  	fcall	___awdiv
  2037     0214  0873               	movf	?___awdiv+1,w
  2038     0215  1283               	bcf	3,5	;RP0=0, select bank0
  2039     0216  1303               	bcf	3,6	;RP1=0, select bank0
  2040     0217  00B6               	movwf	dtoa@d+1
  2041     0218  0872               	movf	?___awdiv,w
  2042     0219  00B5               	movwf	dtoa@d
  2043     021A                     l1251:
  2044                           
  2045                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 554:     while (!
      +                          (i < 1) && (d != 0
  2046     021A  1283               	bcf	3,5	;RP0=0, select bank0
  2047     021B  083E               	movf	dtoa@i+1,w
  2048     021C  3A80               	xorlw	128
  2049     021D  00FF               	movwf	btemp+1
  2050     021E  3080               	movlw	128
  2051     021F  027F               	subwf	btemp+1,w
  2052     0220  1D03               	skipz
  2053     0221  2A24               	goto	u985
  2054     0222  3001               	movlw	1
  2055     0223  023D               	subwf	dtoa@i,w
  2056     0224                     u985:
  2057     0224  1C03               	skipc
  2058     0225  2A27               	goto	u981
  2059     0226  2A28               	goto	u980
  2060     0227                     u981:
  2061     0227  2A48               	goto	l1261
  2062     0228                     u980:
  2063     0228                     l1253:
  2064     0228  1283               	bcf	3,5	;RP0=0, select bank0
  2065     0229  1303               	bcf	3,6	;RP1=0, select bank0
  2066     022A  0835               	movf	dtoa@d,w
  2067     022B  0436               	iorwf	dtoa@d+1,w
  2068     022C  1D03               	btfss	3,2
  2069     022D  2A2F               	goto	u991
  2070     022E  2A30               	goto	u990
  2071     022F                     u991:
  2072     022F  29DB               	goto	l1241
  2073     0230                     u990:
  2074     0230                     l1255:
  2075     0230  0839               	movf	dtoa@p,w
  2076     0231  1D03               	btfss	3,2
  2077     0232  2A34               	goto	u1001
  2078     0233  2A35               	goto	u1000
  2079     0234                     u1001:
  2080     0234  29DB               	goto	l1241
  2081     0235                     u1000:
  2082     0235                     l1257:
  2083     0235  083B               	movf	dtoa@w+1,w
  2084     0236  3A80               	xorlw	128
  2085     0237  00FF               	movwf	btemp+1
  2086     0238  3080               	movlw	128
  2087     0239  027F               	subwf	btemp+1,w
  2088     023A  1D03               	skipz
  2089     023B  2A3E               	goto	u1015
  2090     023C  3001               	movlw	1
  2091     023D  023A               	subwf	dtoa@w,w
  2092     023E                     u1015:
  2093     023E  1C03               	skipc
  2094     023F  2A41               	goto	u1011
  2095     0240  2A42               	goto	u1010
  2096     0241                     u1011:
  2097     0241  2A48               	goto	l1261
  2098     0242                     u1010:
  2099     0242                     l1259:
  2100     0242  1283               	bcf	3,5	;RP0=0, select bank0
  2101     0243  1303               	bcf	3,6	;RP1=0, select bank0
  2102     0244  18E8               	btfsc	_flags,1
  2103     0245  2A47               	goto	u1021
  2104     0246  2A48               	goto	u1020
  2105     0247                     u1021:
  2106     0247  29DB               	goto	l1241
  2107     0248                     u1020:
  2108     0248                     l1261:
  2109                           
  2110                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 576:     if (s !=
      +                           0) {
  2111     0248  1283               	bcf	3,5	;RP0=0, select bank0
  2112     0249  1303               	bcf	3,6	;RP1=0, select bank0
  2113     024A  083C               	movf	dtoa@s,w
  2114     024B  1903               	btfsc	3,2
  2115     024C  2A4E               	goto	u1031
  2116     024D  2A4F               	goto	u1030
  2117     024E                     u1031:
  2118     024E  2A5B               	goto	l1267
  2119     024F                     u1030:
  2120     024F                     l1263:
  2121                           
  2122                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 577:         --i;
  2123     024F  30FF               	movlw	255
  2124     0250  07BD               	addwf	dtoa@i,f
  2125     0251  1803               	skipnc
  2126     0252  0ABE               	incf	dtoa@i+1,f
  2127     0253  30FF               	movlw	255
  2128     0254  07BE               	addwf	dtoa@i+1,f
  2129     0255                     l1265:
  2130                           
  2131                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 578:         dbuf
      +                          [i] = s;
  2132     0255  083D               	movf	dtoa@i,w
  2133     0256  3EA2               	addlw	(low (_dbuf| 0))& (0+255)
  2134     0257  0084               	movwf	4
  2135     0258  083C               	movf	dtoa@s,w
  2136     0259  1383               	bcf	3,7	;select IRP bank1
  2137     025A  0080               	movwf	0
  2138     025B                     l1267:
  2139                           
  2140                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 582:     return (
      +                          void) pad(fp, &dbuf[i], w);
  2141     025B  0833               	movf	dtoa@fp,w
  2142     025C  00AC               	movwf	pad@fp
  2143     025D  0834               	movf	dtoa@fp+1,w
  2144     025E  00AD               	movwf	pad@fp+1
  2145     025F  083D               	movf	dtoa@i,w
  2146     0260  3EA2               	addlw	(low (_dbuf| 0))& (0+255)
  2147     0261  00AE               	movwf	pad@buf
  2148     0262  083B               	movf	dtoa@w+1,w
  2149     0263  00B0               	movwf	pad@p+1
  2150     0264  083A               	movf	dtoa@w,w
  2151     0265  00AF               	movwf	pad@p
  2152     0266  120A  118A  24CF  120A  118A  	fcall	_pad
  2153     026B                     l664:
  2154     026B  0008               	return
  2155     026C                     __end_of_dtoa:
  2156                           
  2157                           	psect	text7
  2158     04CF                     __ptext7:	
  2159 ;; *************** function _pad *****************
  2160 ;; Defined at:
  2161 ;;		line 193 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;  fp              2   12[BANK0 ] PTR struct _IO_FILE
  2164 ;;		 -> sprintf@f(11), 
  2165 ;;  buf             1   14[BANK0 ] PTR unsigned char 
  2166 ;;		 -> dbuf(32), 
  2167 ;;  p               2   15[BANK0 ] int 
  2168 ;; Auto vars:     Size  Location     Type
  2169 ;;  i               2   17[BANK0 ] int 
  2170 ;; Return value:  Size  Location     Type
  2171 ;;                  1    wreg      void 
  2172 ;; Registers used:
  2173 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2174 ;; Tracked objects:
  2175 ;;		On entry : 0/0
  2176 ;;		On exit  : 0/0
  2177 ;;		Unchanged: 0/0
  2178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2179 ;;      Params:         0       5       0       0       0
  2180 ;;      Locals:         0       2       0       0       0
  2181 ;;      Temps:          1       0       0       0       0
  2182 ;;      Totals:         1       7       0       0       0
  2183 ;;Total ram usage:        8 bytes
  2184 ;; Hardware stack levels used: 1
  2185 ;; Hardware stack levels required when called: 4
  2186 ;; This function calls:
  2187 ;;		_fputc
  2188 ;;		_fputs
  2189 ;; This function is called by:
  2190 ;;		_dtoa
  2191 ;; This function uses a non-reentrant model
  2192 ;;
  2193                           
  2194     04CF                     _pad:	
  2195                           ;psect for function _pad
  2196                           
  2197     04CF                     l1201:	
  2198                           ;incstack = 0
  2199 ;; hardware stack exceeded
  2200                           ; Regs used in _pad: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2201                           
  2202                           
  2203                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 193: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\com
      +                          mon\doprnt.c: 194: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.
      +                          c: 195:     int i;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c:
      +                           199:     if (flags & (1 << 0)) {
  2204     04CF  1283               	bcf	3,5	;RP0=0, select bank0
  2205     04D0  1303               	bcf	3,6	;RP1=0, select bank0
  2206     04D1  1C68               	btfss	_flags,0
  2207     04D2  2CD4               	goto	u891
  2208     04D3  2CD5               	goto	u890
  2209     04D4                     u891:
  2210     04D4  2CE0               	goto	l1205
  2211     04D5                     u890:
  2212     04D5                     l1203:
  2213                           
  2214                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 200:         fput
      +                          s((const char *)buf, fp);
  2215     04D5  082E               	movf	pad@buf,w
  2216     04D6  00F6               	movwf	fputs@s
  2217     04D7  082C               	movf	pad@fp,w
  2218     04D8  00F7               	movwf	fputs@fp
  2219     04D9  082D               	movf	pad@fp+1,w
  2220     04DA  00F8               	movwf	fputs@fp+1
  2221     04DB  120A  118A  2550  120A  118A  	fcall	_fputs
  2222     04E0                     l1205:
  2223                           
  2224                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 205:  if (p < 0) 
      +                          {
  2225     04E0  1283               	bcf	3,5	;RP0=0, select bank0
  2226     04E1  1303               	bcf	3,6	;RP1=0, select bank0
  2227     04E2  1FB0               	btfss	pad@p+1,7
  2228     04E3  2CE5               	goto	u901
  2229     04E4  2CE6               	goto	u900
  2230     04E5                     u901:
  2231     04E5  2CE8               	goto	l643
  2232     04E6                     u900:
  2233     04E6                     l1207:
  2234                           
  2235                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 206:   p = 0;
  2236     04E6  01AF               	clrf	pad@p
  2237     04E7  01B0               	clrf	pad@p+1
  2238     04E8                     l643:	
  2239                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 207:  }
  2240                           
  2241                           
  2242                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 208:     i = 0;
  2243     04E8  01B1               	clrf	pad@i
  2244     04E9  01B2               	clrf	pad@i+1
  2245                           
  2246                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2247     04EA  2D02               	goto	l1213
  2248     04EB                     l1209:
  2249                           
  2250                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 210:         fput
      +                          c(' ', fp);
  2251     04EB  3020               	movlw	32
  2252     04EC  00F2               	movwf	fputc@c
  2253     04ED  3000               	movlw	0
  2254     04EE  00F3               	movwf	fputc@c+1
  2255     04EF  1283               	bcf	3,5	;RP0=0, select bank0
  2256     04F0  1303               	bcf	3,6	;RP1=0, select bank0
  2257     04F1  082C               	movf	pad@fp,w
  2258     04F2  00F4               	movwf	fputc@fp
  2259     04F3  082D               	movf	pad@fp+1,w
  2260     04F4  00F5               	movwf	fputc@fp+1
  2261     04F5  120A  118A  231E  120A  118A  	fcall	_fputc
  2262     04FA                     l1211:
  2263                           
  2264                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 211:         ++i;
  2265     04FA  3001               	movlw	1
  2266     04FB  1283               	bcf	3,5	;RP0=0, select bank0
  2267     04FC  1303               	bcf	3,6	;RP1=0, select bank0
  2268     04FD  07B1               	addwf	pad@i,f
  2269     04FE  1803               	skipnc
  2270     04FF  0AB2               	incf	pad@i+1,f
  2271     0500  3000               	movlw	0
  2272     0501  07B2               	addwf	pad@i+1,f
  2273     0502                     l1213:
  2274                           
  2275                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 209:     while (i
      +                           < p) {
  2276     0502  0832               	movf	pad@i+1,w
  2277     0503  3A80               	xorlw	128
  2278     0504  00FB               	movwf	??_pad
  2279     0505  0830               	movf	pad@p+1,w
  2280     0506  3A80               	xorlw	128
  2281     0507  027B               	subwf	??_pad,w
  2282     0508  1D03               	skipz
  2283     0509  2D0C               	goto	u915
  2284     050A  082F               	movf	pad@p,w
  2285     050B  0231               	subwf	pad@i,w
  2286     050C                     u915:
  2287     050C  1C03               	skipc
  2288     050D  2D0F               	goto	u911
  2289     050E  2D10               	goto	u910
  2290     050F                     u911:
  2291     050F  2CEB               	goto	l1209
  2292     0510                     u910:
  2293     0510                     l646:
  2294                           
  2295                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 216:     if (!(fl
      +                          ags & (1 << 0))) {
  2296     0510  1283               	bcf	3,5	;RP0=0, select bank0
  2297     0511  1303               	bcf	3,6	;RP1=0, select bank0
  2298     0512  1868               	btfsc	_flags,0
  2299     0513  2D15               	goto	u921
  2300     0514  2D16               	goto	u920
  2301     0515                     u921:
  2302     0515  2D21               	goto	l648
  2303     0516                     u920:
  2304     0516                     l1215:
  2305                           
  2306                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 218:         fput
      +                          s((const char *)buf, fp);
  2307     0516  082E               	movf	pad@buf,w
  2308     0517  00F6               	movwf	fputs@s
  2309     0518  082C               	movf	pad@fp,w
  2310     0519  00F7               	movwf	fputs@fp
  2311     051A  082D               	movf	pad@fp+1,w
  2312     051B  00F8               	movwf	fputs@fp+1
  2313     051C  120A  118A  2550  120A  118A  	fcall	_fputs
  2314     0521                     l648:
  2315     0521  0008               	return
  2316     0522                     __end_of_pad:
  2317                           
  2318                           	psect	text8
  2319     0550                     __ptext8:	
  2320 ;; *************** function _fputs *****************
  2321 ;; Defined at:
  2322 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_fputs.c"
  2323 ;; Parameters:    Size  Location     Type
  2324 ;;  s               1    6[COMMON] PTR const unsigned char 
  2325 ;;		 -> dbuf(32), 
  2326 ;;  fp              2    7[COMMON] PTR struct _IO_FILE
  2327 ;;		 -> sprintf@f(11), 
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;  i               2   10[BANK0 ] int 
  2330 ;;  c               1    9[BANK0 ] unsigned char 
  2331 ;; Return value:  Size  Location     Type
  2332 ;;                  2    6[COMMON] int 
  2333 ;; Registers used:
  2334 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2335 ;; Tracked objects:
  2336 ;;		On entry : 0/0
  2337 ;;		On exit  : 0/0
  2338 ;;		Unchanged: 0/0
  2339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2340 ;;      Params:         3       0       0       0       0
  2341 ;;      Locals:         0       3       0       0       0
  2342 ;;      Temps:          2       0       0       0       0
  2343 ;;      Totals:         5       3       0       0       0
  2344 ;;Total ram usage:        8 bytes
  2345 ;; Hardware stack levels used: 1
  2346 ;; Hardware stack levels required when called: 3
  2347 ;; This function calls:
  2348 ;;		_fputc
  2349 ;; This function is called by:
  2350 ;;		_pad
  2351 ;; This function uses a non-reentrant model
  2352 ;;
  2353                           
  2354     0550                     _fputs:	
  2355                           ;psect for function _fputs
  2356                           
  2357     0550                     l1097:	
  2358                           ;incstack = 0
  2359 ;; hardware stack exceeded
  2360                           ; Regs used in _fputs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2361                           
  2362     0550  1283               	bcf	3,5	;RP0=0, select bank0
  2363     0551  1303               	bcf	3,6	;RP1=0, select bank0
  2364     0552  01AA               	clrf	fputs@i
  2365     0553  01AB               	clrf	fputs@i+1
  2366     0554  2D6D               	goto	l1103
  2367     0555                     l1099:
  2368     0555  0829               	movf	fputs@c,w
  2369     0556  00F9               	movwf	??_fputs
  2370     0557  01FA               	clrf	??_fputs+1
  2371     0558  0879               	movf	??_fputs,w
  2372     0559  00F2               	movwf	fputc@c
  2373     055A  087A               	movf	??_fputs+1,w
  2374     055B  00F3               	movwf	fputc@c+1
  2375     055C  0877               	movf	fputs@fp,w
  2376     055D  00F4               	movwf	fputc@fp
  2377     055E  0878               	movf	fputs@fp+1,w
  2378     055F  00F5               	movwf	fputc@fp+1
  2379     0560  120A  118A  231E  120A  118A  	fcall	_fputc
  2380     0565                     l1101:
  2381     0565  3001               	movlw	1
  2382     0566  1283               	bcf	3,5	;RP0=0, select bank0
  2383     0567  1303               	bcf	3,6	;RP1=0, select bank0
  2384     0568  07AA               	addwf	fputs@i,f
  2385     0569  1803               	skipnc
  2386     056A  0AAB               	incf	fputs@i+1,f
  2387     056B  3000               	movlw	0
  2388     056C  07AB               	addwf	fputs@i+1,f
  2389     056D                     l1103:
  2390     056D  082A               	movf	fputs@i,w
  2391     056E  0776               	addwf	fputs@s,w
  2392     056F  00F9               	movwf	??_fputs
  2393     0570  0879               	movf	??_fputs,w
  2394     0571  0084               	movwf	4
  2395     0572  1383               	bcf	3,7	;select IRP bank0
  2396     0573  0800               	movf	0,w
  2397     0574  00A9               	movwf	fputs@c
  2398     0575  0829               	movf	fputs@c,w
  2399     0576  1D03               	btfss	3,2
  2400     0577  2D79               	goto	u651
  2401     0578  2D7A               	goto	u650
  2402     0579                     u651:
  2403     0579  2D55               	goto	l1099
  2404     057A                     u650:
  2405     057A                     l720:
  2406     057A  0008               	return
  2407     057B                     __end_of_fputs:
  2408                           
  2409                           	psect	text9
  2410     031E                     __ptext9:	
  2411 ;; *************** function _fputc *****************
  2412 ;; Defined at:
  2413 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_fputc.c"
  2414 ;; Parameters:    Size  Location     Type
  2415 ;;  c               2    2[COMMON] int 
  2416 ;;  fp              2    4[COMMON] PTR struct _IO_FILE
  2417 ;;		 -> sprintf@f(11), 
  2418 ;; Auto vars:     Size  Location     Type
  2419 ;;		None
  2420 ;; Return value:  Size  Location     Type
  2421 ;;                  2    2[COMMON] int 
  2422 ;; Registers used:
  2423 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2424 ;; Tracked objects:
  2425 ;;		On entry : 0/0
  2426 ;;		On exit  : 0/0
  2427 ;;		Unchanged: 0/0
  2428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2429 ;;      Params:         4       0       0       0       0
  2430 ;;      Locals:         0       0       0       0       0
  2431 ;;      Temps:          0       9       0       0       0
  2432 ;;      Totals:         4       9       0       0       0
  2433 ;;Total ram usage:       13 bytes
  2434 ;; Hardware stack levels used: 1
  2435 ;; Hardware stack levels required when called: 2
  2436 ;; This function calls:
  2437 ;;		_putch
  2438 ;; This function is called by:
  2439 ;;		_pad
  2440 ;;		_vfpfcnvrt
  2441 ;;		_fputs
  2442 ;; This function uses a non-reentrant model
  2443 ;;
  2444                           
  2445     031E                     _fputc:	
  2446                           ;psect for function _fputc
  2447                           
  2448     031E                     l1083:	
  2449                           ;incstack = 0
  2450                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2451                           
  2452     031E  0874               	movf	fputc@fp,w
  2453     031F  0475               	iorwf	fputc@fp+1,w
  2454     0320  1903               	btfsc	3,2
  2455     0321  2B23               	goto	u601
  2456     0322  2B24               	goto	u600
  2457     0323                     u601:
  2458     0323  2B2A               	goto	l1087
  2459     0324                     u600:
  2460     0324                     l1085:
  2461     0324  0874               	movf	fputc@fp,w
  2462     0325  0475               	iorwf	fputc@fp+1,w
  2463     0326  1D03               	btfss	3,2
  2464     0327  2B29               	goto	u611
  2465     0328  2B2A               	goto	u610
  2466     0329                     u611:
  2467     0329  2B31               	goto	l1089
  2468     032A                     u610:
  2469     032A                     l1087:
  2470     032A  0872               	movf	fputc@c,w
  2471     032B  120A  118A  2647  120A  118A  	fcall	_putch
  2472     0330  2BBD               	goto	l712
  2473     0331                     l1089:
  2474     0331  0874               	movf	fputc@fp,w
  2475     0332  3E09               	addlw	9
  2476     0333  1283               	bcf	3,5	;RP0=0, select bank0
  2477     0334  1303               	bcf	3,6	;RP1=0, select bank0
  2478     0335  00A0               	movwf	??_fputc
  2479     0336  0875               	movf	fputc@fp+1,w
  2480     0337  1803               	skipnc
  2481     0338  3E01               	addlw	1
  2482     0339  3E00               	addlw	0
  2483     033A  00A1               	movwf	??_fputc+1
  2484     033B  0820               	movf	??_fputc,w
  2485     033C  0084               	movwf	4
  2486     033D  1783               	bsf	3,7
  2487     033E  1C21               	btfss	??_fputc+1,0
  2488     033F  1383               	bcf	3,7
  2489     0340  0800               	movf	0,w
  2490     0341  00A2               	movwf	??_fputc+2
  2491     0342  0A84               	incf	4,f
  2492     0343  0800               	movf	0,w
  2493     0344  00A3               	movwf	??_fputc+3
  2494     0345  0822               	movf	??_fputc+2,w
  2495     0346  0423               	iorwf	??_fputc+3,w
  2496     0347  1903               	btfsc	3,2
  2497     0348  2B4A               	goto	u621
  2498     0349  2B4B               	goto	u620
  2499     034A                     u621:
  2500     034A  2B7D               	goto	l1093
  2501     034B                     u620:
  2502     034B                     l1091:
  2503     034B  0874               	movf	fputc@fp,w
  2504     034C  3E09               	addlw	9
  2505     034D  00A0               	movwf	??_fputc
  2506     034E  0875               	movf	fputc@fp+1,w
  2507     034F  1803               	skipnc
  2508     0350  3E01               	addlw	1
  2509     0351  3E00               	addlw	0
  2510     0352  00A1               	movwf	??_fputc+1
  2511     0353  0820               	movf	??_fputc,w
  2512     0354  0084               	movwf	4
  2513     0355  1783               	bsf	3,7
  2514     0356  1C21               	btfss	??_fputc+1,0
  2515     0357  1383               	bcf	3,7
  2516     0358  0800               	movf	0,w
  2517     0359  00A2               	movwf	??_fputc+2
  2518     035A  0A84               	incf	4,f
  2519     035B  0800               	movf	0,w
  2520     035C  00A3               	movwf	??_fputc+3
  2521     035D  0874               	movf	fputc@fp,w
  2522     035E  3E02               	addlw	2
  2523     035F  00A4               	movwf	??_fputc+4
  2524     0360  0875               	movf	fputc@fp+1,w
  2525     0361  1803               	skipnc
  2526     0362  3E01               	addlw	1
  2527     0363  3E00               	addlw	0
  2528     0364  00A5               	movwf	??_fputc+5
  2529     0365  0824               	movf	??_fputc+4,w
  2530     0366  0084               	movwf	4
  2531     0367  1783               	bsf	3,7
  2532     0368  1C25               	btfss	??_fputc+5,0
  2533     0369  1383               	bcf	3,7
  2534     036A  0800               	movf	0,w
  2535     036B  00A6               	movwf	??_fputc+6
  2536     036C  0A84               	incf	4,f
  2537     036D  0800               	movf	0,w
  2538     036E  00A7               	movwf	??_fputc+7
  2539     036F  0827               	movf	??_fputc+7,w
  2540     0370  3A80               	xorlw	128
  2541     0371  00A8               	movwf	??_fputc+8
  2542     0372  0823               	movf	??_fputc+3,w
  2543     0373  3A80               	xorlw	128
  2544     0374  0228               	subwf	??_fputc+8,w
  2545     0375  1D03               	skipz
  2546     0376  2B79               	goto	u635
  2547     0377  0822               	movf	??_fputc+2,w
  2548     0378  0226               	subwf	??_fputc+6,w
  2549     0379                     u635:
  2550     0379  1803               	skipnc
  2551     037A  2B7C               	goto	u631
  2552     037B  2B7D               	goto	u630
  2553     037C                     u631:
  2554     037C  2BBD               	goto	l712
  2555     037D                     u630:
  2556     037D                     l1093:
  2557     037D  0874               	movf	fputc@fp,w
  2558     037E  0084               	movwf	4
  2559     037F  1783               	bsf	3,7
  2560     0380  1C75               	btfss	fputc@fp+1,0
  2561     0381  1383               	bcf	3,7
  2562     0382  0800               	movf	0,w
  2563     0383  1283               	bcf	3,5	;RP0=0, select bank0
  2564     0384  1303               	bcf	3,6	;RP1=0, select bank0
  2565     0385  00A0               	movwf	??_fputc
  2566     0386  0A84               	incf	4,f
  2567     0387  0800               	movf	0,w
  2568     0388  00A1               	movwf	??_fputc+1
  2569     0389  0874               	movf	fputc@fp,w
  2570     038A  3E02               	addlw	2
  2571     038B  00A2               	movwf	??_fputc+2
  2572     038C  0875               	movf	fputc@fp+1,w
  2573     038D  1803               	skipnc
  2574     038E  3E01               	addlw	1
  2575     038F  3E00               	addlw	0
  2576     0390  00A3               	movwf	??_fputc+3
  2577     0391  0822               	movf	??_fputc+2,w
  2578     0392  0084               	movwf	4
  2579     0393  1783               	bsf	3,7
  2580     0394  1C23               	btfss	??_fputc+3,0
  2581     0395  1383               	bcf	3,7
  2582     0396  0800               	movf	0,w
  2583     0397  0720               	addwf	??_fputc,w
  2584     0398  00A5               	movwf	??_fputc+5
  2585     0399  0821               	movf	??_fputc+1,w
  2586     039A  00A4               	movwf	??_fputc+4
  2587     039B  1803               	skipnc
  2588     039C  0AA4               	incf	??_fputc+4,f
  2589     039D  1F80               	btfss	0,7
  2590     039E  2BA0               	goto	u640
  2591     039F  03A4               	decf	??_fputc+4,f
  2592     03A0                     u640:
  2593     03A0  1283               	bcf	3,5	;RP0=0, select bank0
  2594     03A1  1303               	bcf	3,6	;RP1=0, select bank0
  2595     03A2  0824               	movf	??_fputc+4,w
  2596     03A3  00A6               	movwf	??_fputc+6
  2597     03A4  0825               	movf	??_fputc+5,w
  2598     03A5  0084               	movwf	4
  2599     03A6  1783               	bsf	3,7
  2600     03A7  1C26               	btfss	??_fputc+6,0
  2601     03A8  1383               	bcf	3,7
  2602     03A9  0872               	movf	fputc@c,w
  2603     03AA  0080               	movwf	0
  2604     03AB  0874               	movf	fputc@fp,w
  2605     03AC  3E02               	addlw	2
  2606     03AD  00A0               	movwf	??_fputc
  2607     03AE  0875               	movf	fputc@fp+1,w
  2608     03AF  1803               	skipnc
  2609     03B0  3E01               	addlw	1
  2610     03B1  3E00               	addlw	0
  2611     03B2  00A1               	movwf	??_fputc+1
  2612     03B3  0820               	movf	??_fputc,w
  2613     03B4  0084               	movwf	4
  2614     03B5  1783               	bsf	3,7
  2615     03B6  1C21               	btfss	??_fputc+1,0
  2616     03B7  1383               	bcf	3,7
  2617     03B8  3001               	movlw	1
  2618     03B9  0780               	addwf	0,f
  2619     03BA  0A84               	incf	4,f
  2620     03BB  1803               	skipnc
  2621     03BC  0A80               	incf	0,f
  2622     03BD                     l712:
  2623     03BD  0008               	return
  2624     03BE                     __end_of_fputc:
  2625                           
  2626                           	psect	text10
  2627     0647                     __ptext10:	
  2628 ;; *************** function _putch *****************
  2629 ;; Defined at:
  2630 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\putch.c"
  2631 ;; Parameters:    Size  Location     Type
  2632 ;;  c               1    wreg     unsigned char 
  2633 ;; Auto vars:     Size  Location     Type
  2634 ;;  c               1    0[COMMON] unsigned char 
  2635 ;; Return value:  Size  Location     Type
  2636 ;;                  1    wreg      void 
  2637 ;; Registers used:
  2638 ;;		wreg
  2639 ;; Tracked objects:
  2640 ;;		On entry : 0/0
  2641 ;;		On exit  : 0/0
  2642 ;;		Unchanged: 0/0
  2643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2644 ;;      Params:         0       0       0       0       0
  2645 ;;      Locals:         0       0       0       0       0
  2646 ;;      Temps:          0       0       0       0       0
  2647 ;;      Totals:         0       0       0       0       0
  2648 ;;Total ram usage:        0 bytes
  2649 ;; Hardware stack levels used: 1
  2650 ;; Hardware stack levels required when called: 1
  2651 ;; This function calls:
  2652 ;;		Nothing
  2653 ;; This function is called by:
  2654 ;;		_fputc
  2655 ;; This function uses a non-reentrant model
  2656 ;;
  2657                           
  2658     0647                     _putch:	
  2659                           ;psect for function _putch
  2660                           
  2661     0647                     l723:	
  2662                           ;incstack = 0
  2663                           ; Regs used in _putch: [wreg]
  2664                           
  2665     0647  0008               	return
  2666     0648                     __end_of_putch:
  2667                           
  2668                           	psect	text11
  2669     061F                     __ptext11:	
  2670 ;; *************** function _abs *****************
  2671 ;; Defined at:
  2672 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\abs.c"
  2673 ;; Parameters:    Size  Location     Type
  2674 ;;  a               2    8[COMMON] int 
  2675 ;; Auto vars:     Size  Location     Type
  2676 ;;		None
  2677 ;; Return value:  Size  Location     Type
  2678 ;;                  2    8[COMMON] int 
  2679 ;; Registers used:
  2680 ;;		wreg, status,2, status,0
  2681 ;; Tracked objects:
  2682 ;;		On entry : 0/0
  2683 ;;		On exit  : 0/0
  2684 ;;		Unchanged: 0/0
  2685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2686 ;;      Params:         2       0       0       0       0
  2687 ;;      Locals:         0       0       0       0       0
  2688 ;;      Temps:          2       0       0       0       0
  2689 ;;      Totals:         4       0       0       0       0
  2690 ;;Total ram usage:        4 bytes
  2691 ;; Hardware stack levels used: 1
  2692 ;; Hardware stack levels required when called: 1
  2693 ;; This function calls:
  2694 ;;		Nothing
  2695 ;; This function is called by:
  2696 ;;		_dtoa
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700     061F                     _abs:	
  2701                           ;psect for function _abs
  2702                           
  2703     061F                     l1217:	
  2704                           ;incstack = 0
  2705                           ; Regs used in _abs: [wreg+status,2+status,0]
  2706                           
  2707     061F  1BF9               	btfsc	abs@a+1,7
  2708     0620  2E22               	goto	u931
  2709     0621  2E23               	goto	u930
  2710     0622                     u931:
  2711     0622  2E24               	goto	l1221
  2712     0623                     u930:
  2713     0623                     l1219:
  2714     0623  2E2F               	goto	l700
  2715     0624                     l1221:
  2716     0624  0978               	comf	abs@a,w
  2717     0625  00FA               	movwf	??_abs
  2718     0626  0979               	comf	abs@a+1,w
  2719     0627  00FB               	movwf	??_abs+1
  2720     0628  0AFA               	incf	??_abs,f
  2721     0629  1903               	skipnz
  2722     062A  0AFB               	incf	??_abs+1,f
  2723     062B  087A               	movf	??_abs,w
  2724     062C  00F8               	movwf	?_abs
  2725     062D  087B               	movf	??_abs+1,w
  2726     062E  00F9               	movwf	?_abs+1
  2727     062F                     l700:
  2728     062F  0008               	return
  2729     0630                     __end_of_abs:
  2730                           
  2731                           	psect	text12
  2732     0478                     __ptext12:	
  2733 ;; *************** function ___awmod *****************
  2734 ;; Defined at:
  2735 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
  2736 ;; Parameters:    Size  Location     Type
  2737 ;;  divisor         2    2[COMMON] int 
  2738 ;;  dividend        2    4[COMMON] int 
  2739 ;; Auto vars:     Size  Location     Type
  2740 ;;  sign            1    7[COMMON] unsigned char 
  2741 ;;  counter         1    6[COMMON] unsigned char 
  2742 ;; Return value:  Size  Location     Type
  2743 ;;                  2    2[COMMON] int 
  2744 ;; Registers used:
  2745 ;;		wreg, status,2, status,0
  2746 ;; Tracked objects:
  2747 ;;		On entry : 0/0
  2748 ;;		On exit  : 0/0
  2749 ;;		Unchanged: 0/0
  2750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2751 ;;      Params:         4       0       0       0       0
  2752 ;;      Locals:         2       0       0       0       0
  2753 ;;      Temps:          0       0       0       0       0
  2754 ;;      Totals:         6       0       0       0       0
  2755 ;;Total ram usage:        6 bytes
  2756 ;; Hardware stack levels used: 1
  2757 ;; Hardware stack levels required when called: 1
  2758 ;; This function calls:
  2759 ;;		Nothing
  2760 ;; This function is called by:
  2761 ;;		_dtoa
  2762 ;; This function uses a non-reentrant model
  2763 ;;
  2764                           
  2765     0478                     ___awmod:	
  2766                           ;psect for function ___awmod
  2767                           
  2768     0478                     l1163:	
  2769                           ;incstack = 0
  2770                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  2771                           
  2772     0478  01F7               	clrf	___awmod@sign
  2773     0479                     l1165:
  2774     0479  1FF5               	btfss	___awmod@dividend+1,7
  2775     047A  2C7C               	goto	u801
  2776     047B  2C7D               	goto	u800
  2777     047C                     u801:
  2778     047C  2C84               	goto	l1171
  2779     047D                     u800:
  2780     047D                     l1167:
  2781     047D  09F4               	comf	___awmod@dividend,f
  2782     047E  09F5               	comf	___awmod@dividend+1,f
  2783     047F  0AF4               	incf	___awmod@dividend,f
  2784     0480  1903               	skipnz
  2785     0481  0AF5               	incf	___awmod@dividend+1,f
  2786     0482                     l1169:
  2787     0482  3001               	movlw	1
  2788     0483  00F7               	movwf	___awmod@sign
  2789     0484                     l1171:
  2790     0484  1FF3               	btfss	___awmod@divisor+1,7
  2791     0485  2C87               	goto	u811
  2792     0486  2C88               	goto	u810
  2793     0487                     u811:
  2794     0487  2C8D               	goto	l1175
  2795     0488                     u810:
  2796     0488                     l1173:
  2797     0488  09F2               	comf	___awmod@divisor,f
  2798     0489  09F3               	comf	___awmod@divisor+1,f
  2799     048A  0AF2               	incf	___awmod@divisor,f
  2800     048B  1903               	skipnz
  2801     048C  0AF3               	incf	___awmod@divisor+1,f
  2802     048D                     l1175:
  2803     048D  0872               	movf	___awmod@divisor,w
  2804     048E  0473               	iorwf	___awmod@divisor+1,w
  2805     048F  1903               	btfsc	3,2
  2806     0490  2C92               	goto	u821
  2807     0491  2C93               	goto	u820
  2808     0492                     u821:
  2809     0492  2CC0               	goto	l1193
  2810     0493                     u820:
  2811     0493                     l1177:
  2812     0493  3001               	movlw	1
  2813     0494  00F6               	movwf	___awmod@counter
  2814     0495  2C9F               	goto	l1183
  2815     0496                     l1179:
  2816     0496  3001               	movlw	1
  2817     0497                     u835:
  2818     0497  1003               	clrc
  2819     0498  0DF2               	rlf	___awmod@divisor,f
  2820     0499  0DF3               	rlf	___awmod@divisor+1,f
  2821     049A  3EFF               	addlw	-1
  2822     049B  1D03               	skipz
  2823     049C  2C97               	goto	u835
  2824     049D                     l1181:
  2825     049D  3001               	movlw	1
  2826     049E  07F6               	addwf	___awmod@counter,f
  2827     049F                     l1183:
  2828     049F  1FF3               	btfss	___awmod@divisor+1,7
  2829     04A0  2CA2               	goto	u841
  2830     04A1  2CA3               	goto	u840
  2831     04A2                     u841:
  2832     04A2  2C96               	goto	l1179
  2833     04A3                     u840:
  2834     04A3                     l1185:
  2835     04A3  0873               	movf	___awmod@divisor+1,w
  2836     04A4  0275               	subwf	___awmod@dividend+1,w
  2837     04A5  1D03               	skipz
  2838     04A6  2CA9               	goto	u855
  2839     04A7  0872               	movf	___awmod@divisor,w
  2840     04A8  0274               	subwf	___awmod@dividend,w
  2841     04A9                     u855:
  2842     04A9  1C03               	skipc
  2843     04AA  2CAC               	goto	u851
  2844     04AB  2CAD               	goto	u850
  2845     04AC                     u851:
  2846     04AC  2CB3               	goto	l1189
  2847     04AD                     u850:
  2848     04AD                     l1187:
  2849     04AD  0872               	movf	___awmod@divisor,w
  2850     04AE  02F4               	subwf	___awmod@dividend,f
  2851     04AF  0873               	movf	___awmod@divisor+1,w
  2852     04B0  1C03               	skipc
  2853     04B1  03F5               	decf	___awmod@dividend+1,f
  2854     04B2  02F5               	subwf	___awmod@dividend+1,f
  2855     04B3                     l1189:
  2856     04B3  3001               	movlw	1
  2857     04B4                     u865:
  2858     04B4  1003               	clrc
  2859     04B5  0CF3               	rrf	___awmod@divisor+1,f
  2860     04B6  0CF2               	rrf	___awmod@divisor,f
  2861     04B7  3EFF               	addlw	-1
  2862     04B8  1D03               	skipz
  2863     04B9  2CB4               	goto	u865
  2864     04BA                     l1191:
  2865     04BA  3001               	movlw	1
  2866     04BB  02F6               	subwf	___awmod@counter,f
  2867     04BC  1D03               	btfss	3,2
  2868     04BD  2CBF               	goto	u871
  2869     04BE  2CC0               	goto	u870
  2870     04BF                     u871:
  2871     04BF  2CA3               	goto	l1185
  2872     04C0                     u870:
  2873     04C0                     l1193:
  2874     04C0  0877               	movf	___awmod@sign,w
  2875     04C1  1903               	btfsc	3,2
  2876     04C2  2CC4               	goto	u881
  2877     04C3  2CC5               	goto	u880
  2878     04C4                     u881:
  2879     04C4  2CCA               	goto	l1197
  2880     04C5                     u880:
  2881     04C5                     l1195:
  2882     04C5  09F4               	comf	___awmod@dividend,f
  2883     04C6  09F5               	comf	___awmod@dividend+1,f
  2884     04C7  0AF4               	incf	___awmod@dividend,f
  2885     04C8  1903               	skipnz
  2886     04C9  0AF5               	incf	___awmod@dividend+1,f
  2887     04CA                     l1197:
  2888     04CA  0875               	movf	___awmod@dividend+1,w
  2889     04CB  00F3               	movwf	?___awmod+1
  2890     04CC  0874               	movf	___awmod@dividend,w
  2891     04CD  00F2               	movwf	?___awmod
  2892     04CE                     l326:
  2893     04CE  0008               	return
  2894     04CF                     __end_of___awmod:
  2895                           
  2896                           	psect	text13
  2897     03BE                     __ptext13:	
  2898 ;; *************** function ___awdiv *****************
  2899 ;; Defined at:
  2900 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awdiv.c"
  2901 ;; Parameters:    Size  Location     Type
  2902 ;;  divisor         2    2[COMMON] int 
  2903 ;;  dividend        2    4[COMMON] int 
  2904 ;; Auto vars:     Size  Location     Type
  2905 ;;  quotient        2    8[COMMON] int 
  2906 ;;  sign            1    7[COMMON] unsigned char 
  2907 ;;  counter         1    6[COMMON] unsigned char 
  2908 ;; Return value:  Size  Location     Type
  2909 ;;                  2    2[COMMON] int 
  2910 ;; Registers used:
  2911 ;;		wreg, status,2, status,0
  2912 ;; Tracked objects:
  2913 ;;		On entry : 0/0
  2914 ;;		On exit  : 0/0
  2915 ;;		Unchanged: 0/0
  2916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2917 ;;      Params:         4       0       0       0       0
  2918 ;;      Locals:         4       0       0       0       0
  2919 ;;      Temps:          0       0       0       0       0
  2920 ;;      Totals:         8       0       0       0       0
  2921 ;;Total ram usage:        8 bytes
  2922 ;; Hardware stack levels used: 1
  2923 ;; Hardware stack levels required when called: 1
  2924 ;; This function calls:
  2925 ;;		Nothing
  2926 ;; This function is called by:
  2927 ;;		_dtoa
  2928 ;; This function uses a non-reentrant model
  2929 ;;
  2930                           
  2931     03BE                     ___awdiv:	
  2932                           ;psect for function ___awdiv
  2933                           
  2934     03BE                     l1119:	
  2935                           ;incstack = 0
  2936                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2937                           
  2938     03BE  01F7               	clrf	___awdiv@sign
  2939     03BF                     l1121:
  2940     03BF  1FF3               	btfss	___awdiv@divisor+1,7
  2941     03C0  2BC2               	goto	u701
  2942     03C1  2BC3               	goto	u700
  2943     03C2                     u701:
  2944     03C2  2BCA               	goto	l1127
  2945     03C3                     u700:
  2946     03C3                     l1123:
  2947     03C3  09F2               	comf	___awdiv@divisor,f
  2948     03C4  09F3               	comf	___awdiv@divisor+1,f
  2949     03C5  0AF2               	incf	___awdiv@divisor,f
  2950     03C6  1903               	skipnz
  2951     03C7  0AF3               	incf	___awdiv@divisor+1,f
  2952     03C8                     l1125:
  2953     03C8  3001               	movlw	1
  2954     03C9  00F7               	movwf	___awdiv@sign
  2955     03CA                     l1127:
  2956     03CA  1FF5               	btfss	___awdiv@dividend+1,7
  2957     03CB  2BCD               	goto	u711
  2958     03CC  2BCE               	goto	u710
  2959     03CD                     u711:
  2960     03CD  2BD5               	goto	l1133
  2961     03CE                     u710:
  2962     03CE                     l1129:
  2963     03CE  09F4               	comf	___awdiv@dividend,f
  2964     03CF  09F5               	comf	___awdiv@dividend+1,f
  2965     03D0  0AF4               	incf	___awdiv@dividend,f
  2966     03D1  1903               	skipnz
  2967     03D2  0AF5               	incf	___awdiv@dividend+1,f
  2968     03D3                     l1131:
  2969     03D3  3001               	movlw	1
  2970     03D4  06F7               	xorwf	___awdiv@sign,f
  2971     03D5                     l1133:
  2972     03D5  01F8               	clrf	___awdiv@quotient
  2973     03D6  01F9               	clrf	___awdiv@quotient+1
  2974     03D7                     l1135:
  2975     03D7  0872               	movf	___awdiv@divisor,w
  2976     03D8  0473               	iorwf	___awdiv@divisor+1,w
  2977     03D9  1903               	btfsc	3,2
  2978     03DA  2BDC               	goto	u721
  2979     03DB  2BDD               	goto	u720
  2980     03DC                     u721:
  2981     03DC  2C12               	goto	l1155
  2982     03DD                     u720:
  2983     03DD                     l1137:
  2984     03DD  3001               	movlw	1
  2985     03DE  00F6               	movwf	___awdiv@counter
  2986     03DF  2BE9               	goto	l1143
  2987     03E0                     l1139:
  2988     03E0  3001               	movlw	1
  2989     03E1                     u735:
  2990     03E1  1003               	clrc
  2991     03E2  0DF2               	rlf	___awdiv@divisor,f
  2992     03E3  0DF3               	rlf	___awdiv@divisor+1,f
  2993     03E4  3EFF               	addlw	-1
  2994     03E5  1D03               	skipz
  2995     03E6  2BE1               	goto	u735
  2996     03E7                     l1141:
  2997     03E7  3001               	movlw	1
  2998     03E8  07F6               	addwf	___awdiv@counter,f
  2999     03E9                     l1143:
  3000     03E9  1FF3               	btfss	___awdiv@divisor+1,7
  3001     03EA  2BEC               	goto	u741
  3002     03EB  2BED               	goto	u740
  3003     03EC                     u741:
  3004     03EC  2BE0               	goto	l1139
  3005     03ED                     u740:
  3006     03ED                     l1145:
  3007     03ED  3001               	movlw	1
  3008     03EE                     u755:
  3009     03EE  1003               	clrc
  3010     03EF  0DF8               	rlf	___awdiv@quotient,f
  3011     03F0  0DF9               	rlf	___awdiv@quotient+1,f
  3012     03F1  3EFF               	addlw	-1
  3013     03F2  1D03               	skipz
  3014     03F3  2BEE               	goto	u755
  3015     03F4  0873               	movf	___awdiv@divisor+1,w
  3016     03F5  0275               	subwf	___awdiv@dividend+1,w
  3017     03F6  1D03               	skipz
  3018     03F7  2BFA               	goto	u765
  3019     03F8  0872               	movf	___awdiv@divisor,w
  3020     03F9  0274               	subwf	___awdiv@dividend,w
  3021     03FA                     u765:
  3022     03FA  1C03               	skipc
  3023     03FB  2BFD               	goto	u761
  3024     03FC  2BFE               	goto	u760
  3025     03FD                     u761:
  3026     03FD  2C05               	goto	l1151
  3027     03FE                     u760:
  3028     03FE                     l1147:
  3029     03FE  0872               	movf	___awdiv@divisor,w
  3030     03FF  02F4               	subwf	___awdiv@dividend,f
  3031     0400  0873               	movf	___awdiv@divisor+1,w
  3032     0401  1C03               	skipc
  3033     0402  03F5               	decf	___awdiv@dividend+1,f
  3034     0403  02F5               	subwf	___awdiv@dividend+1,f
  3035     0404                     l1149:
  3036     0404  1478               	bsf	___awdiv@quotient,0
  3037     0405                     l1151:
  3038     0405  3001               	movlw	1
  3039     0406                     u775:
  3040     0406  1003               	clrc
  3041     0407  0CF3               	rrf	___awdiv@divisor+1,f
  3042     0408  0CF2               	rrf	___awdiv@divisor,f
  3043     0409  3EFF               	addlw	-1
  3044     040A  1D03               	skipz
  3045     040B  2C06               	goto	u775
  3046     040C                     l1153:
  3047     040C  3001               	movlw	1
  3048     040D  02F6               	subwf	___awdiv@counter,f
  3049     040E  1D03               	btfss	3,2
  3050     040F  2C11               	goto	u781
  3051     0410  2C12               	goto	u780
  3052     0411                     u781:
  3053     0411  2BED               	goto	l1145
  3054     0412                     u780:
  3055     0412                     l1155:
  3056     0412  0877               	movf	___awdiv@sign,w
  3057     0413  1903               	btfsc	3,2
  3058     0414  2C16               	goto	u791
  3059     0415  2C17               	goto	u790
  3060     0416                     u791:
  3061     0416  2C1C               	goto	l1159
  3062     0417                     u790:
  3063     0417                     l1157:
  3064     0417  09F8               	comf	___awdiv@quotient,f
  3065     0418  09F9               	comf	___awdiv@quotient+1,f
  3066     0419  0AF8               	incf	___awdiv@quotient,f
  3067     041A  1903               	skipnz
  3068     041B  0AF9               	incf	___awdiv@quotient+1,f
  3069     041C                     l1159:
  3070     041C  0879               	movf	___awdiv@quotient+1,w
  3071     041D  00F3               	movwf	?___awdiv+1
  3072     041E  0878               	movf	___awdiv@quotient,w
  3073     041F  00F2               	movwf	?___awdiv
  3074     0420                     l313:
  3075     0420  0008               	return
  3076     0421                     __end_of___awdiv:
  3077                           
  3078                           	psect	text14
  3079     0522                     __ptext14:	
  3080 ;; *************** function _display_string *****************
  3081 ;; Defined at:
  3082 ;;		line 69 in file "newmain.c"
  3083 ;; Parameters:    Size  Location     Type
  3084 ;;  a               1    8[COMMON] PTR unsigned char 
  3085 ;;		 -> main@arr(10), 
  3086 ;; Auto vars:     Size  Location     Type
  3087 ;;  i               2    0[BANK0 ] int 
  3088 ;; Return value:  Size  Location     Type
  3089 ;;                  1    wreg      void 
  3090 ;; Registers used:
  3091 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3092 ;; Tracked objects:
  3093 ;;		On entry : 0/0
  3094 ;;		On exit  : 0/0
  3095 ;;		Unchanged: 0/0
  3096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3097 ;;      Params:         1       0       0       0       0
  3098 ;;      Locals:         0       2       0       0       0
  3099 ;;      Temps:          3       0       0       0       0
  3100 ;;      Totals:         4       2       0       0       0
  3101 ;;Total ram usage:        6 bytes
  3102 ;; Hardware stack levels used: 1
  3103 ;; Hardware stack levels required when called: 2
  3104 ;; This function calls:
  3105 ;;		_display
  3106 ;; This function is called by:
  3107 ;;		_main
  3108 ;; This function uses a non-reentrant model
  3109 ;;
  3110                           
  3111     0522                     _display_string:	
  3112                           ;psect for function _display_string
  3113                           
  3114     0522                     l1371:	
  3115                           ;incstack = 0
  3116                           ; Regs used in _display_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3117                           
  3118                           
  3119                           ;newmain.c: 69: void display_string(char *a);newmain.c: 70: {;newmain.c: 71:     for(int
      +                           i=0;a[i]!='\0';i++)
  3120     0522  1283               	bcf	3,5	;RP0=0, select bank0
  3121     0523  1303               	bcf	3,6	;RP1=0, select bank0
  3122     0524  01A0               	clrf	display_string@i
  3123     0525  01A1               	clrf	display_string@i+1
  3124     0526  2D44               	goto	l1377
  3125     0527                     l1373:
  3126                           
  3127                           ;newmain.c: 72:     {;newmain.c: 73:         display(1, a[i]);
  3128     0527  3001               	movlw	1
  3129     0528  00F2               	movwf	display@RS
  3130     0529  3000               	movlw	0
  3131     052A  00F3               	movwf	display@RS+1
  3132     052B  0820               	movf	display_string@i,w
  3133     052C  0778               	addwf	display_string@a,w
  3134     052D  00F9               	movwf	??_display_string
  3135     052E  0879               	movf	??_display_string,w
  3136     052F  0084               	movwf	4
  3137     0530  0800               	movf	0,w
  3138     0531  00FA               	movwf	??_display_string+1
  3139     0532  01FB               	clrf	??_display_string+2
  3140     0533  087A               	movf	??_display_string+1,w
  3141     0534  00F4               	movwf	display@DC
  3142     0535  087B               	movf	??_display_string+2,w
  3143     0536  00F5               	movwf	display@DC+1
  3144     0537  120A  118A  25E6  120A  118A  	fcall	_display
  3145     053C                     l1375:
  3146                           
  3147                           ;newmain.c: 74:     }
  3148     053C  3001               	movlw	1
  3149     053D  1283               	bcf	3,5	;RP0=0, select bank0
  3150     053E  1303               	bcf	3,6	;RP1=0, select bank0
  3151     053F  07A0               	addwf	display_string@i,f
  3152     0540  1803               	skipnc
  3153     0541  0AA1               	incf	display_string@i+1,f
  3154     0542  3000               	movlw	0
  3155     0543  07A1               	addwf	display_string@i+1,f
  3156     0544                     l1377:
  3157     0544  0820               	movf	display_string@i,w
  3158     0545  0778               	addwf	display_string@a,w
  3159     0546  00F9               	movwf	??_display_string
  3160     0547  0879               	movf	??_display_string,w
  3161     0548  0084               	movwf	4
  3162     0549  1383               	bcf	3,7	;select IRP bank0
  3163     054A  0800               	movf	0,w
  3164     054B  1D03               	btfss	3,2
  3165     054C  2D4E               	goto	u1141
  3166     054D  2D4F               	goto	u1140
  3167     054E                     u1141:
  3168     054E  2D27               	goto	l1373
  3169     054F                     u1140:
  3170     054F                     l65:
  3171     054F  0008               	return
  3172     0550                     __end_of_display_string:
  3173                           
  3174                           	psect	text15
  3175     05E6                     __ptext15:	
  3176 ;; *************** function _display *****************
  3177 ;; Defined at:
  3178 ;;		line 76 in file "newmain.c"
  3179 ;; Parameters:    Size  Location     Type
  3180 ;;  RS              2    2[COMMON] int 
  3181 ;;  DC              2    4[COMMON] int 
  3182 ;; Auto vars:     Size  Location     Type
  3183 ;;		None
  3184 ;; Return value:  Size  Location     Type
  3185 ;;                  1    wreg      void 
  3186 ;; Registers used:
  3187 ;;		wreg
  3188 ;; Tracked objects:
  3189 ;;		On entry : 0/0
  3190 ;;		On exit  : 0/0
  3191 ;;		Unchanged: 0/0
  3192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3193 ;;      Params:         4       0       0       0       0
  3194 ;;      Locals:         0       0       0       0       0
  3195 ;;      Temps:          2       0       0       0       0
  3196 ;;      Totals:         6       0       0       0       0
  3197 ;;Total ram usage:        6 bytes
  3198 ;; Hardware stack levels used: 1
  3199 ;; Hardware stack levels required when called: 1
  3200 ;; This function calls:
  3201 ;;		Nothing
  3202 ;; This function is called by:
  3203 ;;		_main
  3204 ;;		_display_string
  3205 ;; This function uses a non-reentrant model
  3206 ;;
  3207                           
  3208     05E6                     _display:	
  3209                           ;psect for function _display
  3210                           
  3211     05E6                     l1339:	
  3212                           ;incstack = 0
  3213                           ; Regs used in _display: [wreg]
  3214                           
  3215                           
  3216                           ;newmain.c: 77:     RD0=RS;
  3217     05E6  1872               	btfsc	display@RS,0
  3218     05E7  2DE9               	goto	u1111
  3219     05E8  2DED               	goto	u1110
  3220     05E9                     u1111:
  3221     05E9  1283               	bcf	3,5	;RP0=0, select bank0
  3222     05EA  1303               	bcf	3,6	;RP1=0, select bank0
  3223     05EB  1408               	bsf	8,0	;volatile
  3224     05EC  2DF0               	goto	u1124
  3225     05ED                     u1110:
  3226     05ED  1283               	bcf	3,5	;RP0=0, select bank0
  3227     05EE  1303               	bcf	3,6	;RP1=0, select bank0
  3228     05EF  1008               	bcf	8,0	;volatile
  3229     05F0                     u1124:
  3230     05F0                     l1341:
  3231                           
  3232                           ;newmain.c: 78:     PORTC = DC;
  3233     05F0  0874               	movf	display@DC,w
  3234     05F1  0087               	movwf	7	;volatile
  3235     05F2                     l1343:
  3236                           
  3237                           ;newmain.c: 79:     RD1=1;
  3238     05F2  1488               	bsf	8,1	;volatile
  3239                           
  3240                           ;newmain.c: 80:     _delay((unsigned long)((10)*(10000000/4000.0)));
  3241     05F3  3021               	movlw	33
  3242     05F4  00F7               	movwf	??_display+1
  3243     05F5  3076               	movlw	118
  3244     05F6  00F6               	movwf	??_display
  3245     05F7                     u1227:
  3246     05F7  0BF6               	decfsz	??_display,f
  3247     05F8  2DF7               	goto	u1227
  3248     05F9  0BF7               	decfsz	??_display+1,f
  3249     05FA  2DF7               	goto	u1227
  3250     05FB  0000               	nop
  3251     05FC                     l1345:
  3252                           
  3253                           ;newmain.c: 81:     RD1=0;
  3254     05FC  1283               	bcf	3,5	;RP0=0, select bank0
  3255     05FD  1303               	bcf	3,6	;RP1=0, select bank0
  3256     05FE  1088               	bcf	8,1	;volatile
  3257                           
  3258                           ;newmain.c: 82:     _delay((unsigned long)((10)*(10000000/4000.0)));
  3259     05FF  3021               	movlw	33
  3260     0600  00F7               	movwf	??_display+1
  3261     0601  3076               	movlw	118
  3262     0602  00F6               	movwf	??_display
  3263     0603                     u1237:
  3264     0603  0BF6               	decfsz	??_display,f
  3265     0604  2E03               	goto	u1237
  3266     0605  0BF7               	decfsz	??_display+1,f
  3267     0606  2E03               	goto	u1237
  3268     0607  0000               	nop
  3269     0608                     l68:
  3270     0608  0008               	return
  3271     0609                     __end_of_display:
  3272                           
  3273                           	psect	text16
  3274     0609                     __ptext16:	
  3275 ;; *************** function _ISR *****************
  3276 ;; Defined at:
  3277 ;;		line 84 in file "newmain.c"
  3278 ;; Parameters:    Size  Location     Type
  3279 ;;		None
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;		None
  3282 ;; Return value:  Size  Location     Type
  3283 ;;                  1    wreg      void 
  3284 ;; Registers used:
  3285 ;;		wreg, status,2, status,0
  3286 ;; Tracked objects:
  3287 ;;		On entry : 0/0
  3288 ;;		On exit  : 0/0
  3289 ;;		Unchanged: 0/0
  3290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3291 ;;      Params:         0       0       0       0       0
  3292 ;;      Locals:         0       0       0       0       0
  3293 ;;      Temps:          2       0       0       0       0
  3294 ;;      Totals:         2       0       0       0       0
  3295 ;;Total ram usage:        2 bytes
  3296 ;; Hardware stack levels used: 1
  3297 ;; This function calls:
  3298 ;;		Nothing
  3299 ;; This function is called by:
  3300 ;;		Interrupt level 1
  3301 ;; This function uses a non-reentrant model
  3302 ;;
  3303                           
  3304     0609                     _ISR:	
  3305                           ;psect for function _ISR
  3306                           
  3307     0609                     i1l1435:
  3308                           
  3309                           ;newmain.c: 86:     if(INTF ==1) {
  3310     0609  1C8B               	btfss	11,1	;volatile
  3311     060A  2E0C               	goto	u118_21
  3312     060B  2E0D               	goto	u118_20
  3313     060C                     u118_21:
  3314     060C  2E18               	goto	i1l74
  3315     060D                     u118_20:
  3316     060D                     i1l1437:
  3317                           
  3318                           ;newmain.c: 87:         count=count+1;
  3319     060D  1683               	bsf	3,5	;RP0=1, select bank1
  3320     060E  1303               	bcf	3,6	;RP1=0, select bank1
  3321     060F  0820               	movf	_count^(0+128),w
  3322     0610  3E01               	addlw	1
  3323     0611  00A0               	movwf	_count^(0+128)
  3324     0612  0821               	movf	(_count+1)^(0+128),w
  3325     0613  1803               	skipnc
  3326     0614  3E01               	addlw	1
  3327     0615  3E00               	addlw	0
  3328     0616  00A1               	movwf	(_count+1)^(0+128)
  3329     0617                     i1l1439:
  3330                           
  3331                           ;newmain.c: 88:         INTF=0;
  3332     0617  108B               	bcf	11,1	;volatile
  3333     0618                     i1l74:
  3334     0618  0871               	movf	??_ISR+1,w
  3335     0619  008A               	movwf	10
  3336     061A  0E70               	swapf	??_ISR,w
  3337     061B  0083               	movwf	3
  3338     061C  0EFE               	swapf	btemp,f
  3339     061D  0E7E               	swapf	btemp,w
  3340     061E  0009               	retfie
  3341     061F                     __end_of_ISR:
  3342     0002                     ___latbits      equ	2
  3343     007E                     btemp           set	126	;btemp
  3344     007E                     wtemp0          set	126
  3345                           
  3346                           	psect	intentry
  3347     0004                     __pintentry:	
  3348                           ;incstack = 0
  3349 ;; hardware stack exceeded
  3350                           ; Regs used in _ISR: [wreg+status,2+status,0]
  3351                           
  3352     0004                     interrupt_function:
  3353     007E                     saved_w         set	btemp
  3354     0004  00FE               	movwf	btemp
  3355     0005  0E03               	swapf	3,w
  3356     0006  00F0               	movwf	??_ISR
  3357     0007  080A               	movf	10,w
  3358     0008  00F1               	movwf	??_ISR+1
  3359     0009  120A  118A  2E09   	ljmp	_ISR
  3360                           
  3361                           	psect	config
  3362                           
  3363                           ;Config register CONFIG @ 0x2007
  3364                           ;	Oscillator Selection bits
  3365                           ;	FOSC = HS, HS oscillator
  3366                           ;	Watchdog Timer Enable bit
  3367                           ;	WDTE = OFF, WDT disabled
  3368                           ;	Power-up Timer Enable bit
  3369                           ;	PWRTE = OFF, PWRT disabled
  3370                           ;	Brown-out Reset Enable bit
  3371                           ;	BOREN = OFF, BOR disabled
  3372                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  3373                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  3374                           ;	Data EEPROM Memory Code Protection bit
  3375                           ;	CPD = OFF, Data EEPROM code protection off
  3376                           ;	Flash Program Memory Write Enable bits
  3377                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  3378                           ;	In-Circuit Debugger Mode bit
  3379                           ;	DEBUG = 0x1, unprogrammed default
  3380                           ;	Flash Program Memory Code Protection bit
  3381                           ;	CP = OFF, Code protection off
  3382     2007                     	org	8199
  3383     2007  3F3A               	dw	16186

Data Sizes:
    Strings     9
    Constant    0
    Data        0
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     68      73
    BANK1            80     18      52
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    display_string@a	PTR unsigned char  size(1) Largest target is 10
		 -> main@arr(BANK1[10]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    f$.$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@arr(BANK1[10]), 

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@arr(BANK1[10]), 

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK1[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    read_prec_or_width@ap	PTR PTR void [1] size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    read_prec_or_width@fmt	PTR PTR const unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    S527$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@arr(BANK1[10]), 

    S527$source	PTR const unsigned char  size(1) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), STR_2(CODE[5]), STR_3(CODE[4]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 10
		 -> main@arr(BANK1[10]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), STR_2(CODE[5]), STR_3(CODE[4]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), STR_2(CODE[5]), STR_3(CODE[4]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), STR_2(CODE[5]), STR_3(CODE[4]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    _main->_display_string
    _read_prec_or_width->___wmul
    _dtoa->_abs
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _display_string->_display

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0    3657
                                             65 BANK0      3     3      0
                                              0 BANK1     18    18      0
                            _display
                     _display_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             19    15      4    3103
                                             48 BANK0     17    13      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             5     1      4    2892
                                             43 BANK0      5     1      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           13     9      4    2758
                                             31 BANK0     12     8      4
                               _dtoa
                              _fputc
                 _read_prec_or_width
 ---------------------------------------------------------------------------------
 (4) _read_prec_or_width                                   5     3      2     276
                                              8 COMMON     2     0      2
                                              0 BANK0      3     3      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4      94
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                12     8      4    1825
                                             19 BANK0     12     8      4
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                  8     3      5     747
                                             11 COMMON     1     1      0
                                             12 BANK0      7     2      5
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                8     5      3     333
                                              6 COMMON     5     2      3
                                              9 BANK0      3     3      0
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                               13     9      4     232
                                              2 COMMON     4     0      4
                                              0 BANK0      9     9      0
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2      67
                                              8 COMMON     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     298
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     302
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _display_string                                       6     5      1     150
                                              8 COMMON     4     3      1
                                              0 BANK0      2     2      0
                            _display
 ---------------------------------------------------------------------------------
 (2) _display                                              6     2      4      58
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _display
   _display_string
     _display
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___awdiv
           ___awmod
           _abs
             ___awmod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
         _read_prec_or_width
           ___wmul

 _ISR (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14     12      12     85.7%
BANK0               80     68      73     91.2%
BANK1               80     18      52     65.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     137      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Sat Dec 21 21:13:21 2024

                         pc 0002                          l54 0110                          l48 0061  
                        l65 054F                          l68 0608                ___awdiv@sign 0077  
                        fsr 0004         ___wmul@multiplicand 0074                         l160 0587  
                       l313 0420                         l162 059F                         l326 04CE  
                       l700 062F                         l623 05C2                         l712 03BD  
                       l720 057A                         l723 0647                         l643 04E8  
                       l651 01D3                         l646 0510                         l655 01D1  
                       l648 0521                         l664 026B                         l672 0477  
                       l681 0291                         l693 05E5                         l687 031D  
                       l679 028B                         _GIE 005F                         _RD0 0040  
                       _RD1 0041                         u600 0324                         u601 0323  
                       u610 032A                         u611 0329                         u700 03C3  
                       u620 034B                         _ISR 0609                         u701 03C2  
                       u621 034A                         u710 03CE                         u630 037D  
                       u711 03CD                         u631 037C                         u720 03DD  
                       u800 047D                         u640 03A0                         u721 03DC  
                       u801 047C                         u810 0488                         u650 057A  
                       u811 0487                         u635 0379                         u651 0579  
                       u740 03ED                         u820 0493                         u900 04E6  
                       u660 0581                         u741 03EC                         u821 0492  
                       u901 04E5                         u661 0580                         u910 0510  
                       u735 03E1                         u911 050F                         u760 03FE  
                       u840 04A3                         u920 0516                         u761 03FD  
                       u841 04A2                         u921 0515                         u850 04AD  
                       u930 0623                         u690 059B                         u755 03EE  
                       u851 04AC                         u835 0497                         u931 0622  
                       u915 050C                         u691 059A                         u675 0588  
                       u780 0412                         u940 01B2                         u781 0411  
                       u765 03FA                         u941 01B0                         u685 058F  
                       u790 0417                         u870 04C0                         u950 01B3  
                       u791 0416                         u775 0406                         u871 04BF  
                       u855 04A9                         u880 04C5                         u960 01BD  
                       u881 04C4                         u865 04B4                         u961 01BC  
                       u890 04D5                         u970 01C8                         u891 04D4  
                       u971 01C7                         u980 0228                         u981 0227  
                       u990 0230                         u991 022F                         u985 0224  
                       _abs 061F                         _pad 04CF                         fsr0 0004  
                       indf 0000                ___awmod@sign 0077      __end_of_display_string 0550  
                      ?_ISR 0070                        l1101 0565                        l1103 056D  
                      l1111 058E                        l1121 03BF                        l1201 04CF  
                      l1113 0595                        l1105 057B                        l1131 03D3  
                      l1123 03C3                        l1211 04FA                        l1203 04D5  
                      l1115 059B                        l1107 057D                        ?_abs 0078  
                      l1141 03E7                        l1133 03D5                        l1125 03C8  
                      l1221 0624                        l1213 0502                        l1205 04E0  
                      l1109 0581                        l1151 0405                        l1143 03E9  
                      l1135 03D7                        l1127 03CA                        l1119 03BE  
                      l1215 0516                        l1207 04E6                        l1231 01BD  
                      l1311 02B9                        l1303 0294                        l1153 040C  
                      l1145 03ED                        l1137 03DD                        l1129 03CE  
                      l1217 061F                        l1209 04EB                        l1241 01DB  
                      l1233 01C3                        l1225 01A9                        l1321 02DC  
                      l1313 02BA                        l1305 02A1                        l1401 00A2  
                      l1147 03FE                        l1139 03E0                        l1155 0412  
                      l1171 0484                        l1163 0478                        l1219 0623  
                      l1091 034B                        l1083 031E                        l1243 01E1  
                      l1251 021A                        l1235 01C8                        l1227 01AD  
                      l1323 02E9                        l1315 02BF                        l1307 02A6  
                      l1411 00E7                        l1403 00B9                        l1341 05F0  
                      l1157 0417                        l1149 0404                        l1181 049D  
                      l1173 0488                        l1165 0479                        l1093 037D  
                      l1085 0324                        l1253 0228                        l1261 0248  
                      l1245 01FE                        l1237 01CD                        l1229 01B8  
                      l1325 02EE                        l1317 02C4                        l1309 02B5  
                      l1333 0304                        l1421 0134                        l1413 00F0  
                      l1405 00C5                        l1343 05F2                        l1159 041C  
                      l1191 04BA                        l1183 049F                        l1175 048D  
                      l1167 047D                        l1087 032A                        l1263 024F  
                      l1255 0230                        l1247 0201                        l1239 01D7  
                      l1271 0421                        l1319 02D0                        l1351 05D5  
                      l1431 0192                        l1423 0151                        l1415 00FE  
                      l1407 00CA                        l1345 05FC                        l1185 04A3  
                      l1177 0493                        l1193 04C0                        l1169 0482  
                      l1089 0331                        l1097 0550                        l1265 0255  
                      l1257 0235                        l1249 0207                        l1281 045D  
                      l1273 0425                        l1329 02FC                        l1353 05E3  
                      l1361 05A8                        l1433 019E                        l1425 0168  
                      l1417 010D                        l1409 00DF                        l1339 05E6  
                      l1371 0522                        l1195 04C5                        l1187 04AD  
                      l1179 0496                        l1099 0555                        l1267 025B  
                      l1259 0242                        l1275 0434                        l1283 0462  
                      l1291 027D                        l1347 05C3                        l1363 05AA  
                      l1427 0174                        l1419 0114                        l1373 0527  
                      l1197 04CA                        l1189 04B3                        l1285 0473  
                      l1277 0438                        l1293 0281                        l1349 05C8  
                      l1365 05AC                        l1357 05A0                        l1429 017B  
                      l1381 002B                        l1375 053C                        l1279 0446  
                      l1295 0285                        l1367 05B9                        l1359 05A4  
                      l1391 004F                        l1383 0035                        l1377 0544  
                      l1297 0289                        l1289 026C                        l1393 0053  
                      l1385 0036                        l1299 028C                        l1395 005E  
                      l1387 0037                        l1379 0023                        l1397 0065  
                      l1389 0043                        l1399 0085                        ?_pad 002C  
                      STR_1 0636                        STR_2 0636                        STR_3 063B  
                      u1000 0235                        u1001 0234                        u1010 0242  
                      u1011 0241                        u1020 0248                        u1100 02DC  
                      u1021 0247                        u1101 02DB                        u1110 05ED  
                      u1030 024F                        u1111 05E9                        u1031 024E  
                      u1015 023E                        u1040 0434                        u1041 0433  
                      u1050 0473                        u1130 05E3                        u1051 0472  
                      u1131 05E2                        u1124 05F0                        u1140 054F  
                      u1060 027D                        u1141 054E                        u1061 027C  
                      u1070 02A6                        u1150 0065                        u1071 02A5  
                      u1207 00F8                        u1151 0064                        u1080 02B9  
                      u1160 00F0                        u1081 02B8                        u1217 0108  
                      u1161 00EF                        u1090 02D0                        u1170 0114  
                      u1227 05F7                        u1091 02CF                        u1171 0113  
                      u1237 0603                        u1197 0059                        _INTE 005C  
                      _INTF 0059                        i1l74 0618                        abs@a 0078  
                      _dbuf 00A2                 main@low_bit 00CC                        _main 0023  
                      _dtoa 01A9                        _prec 0066                        pad@i 0031  
                      pad@p 002F                        btemp 007E                        start 000C  
                     ??_ISR 0070                       ??_abs 007A                       ??_pad 007B  
              main@high_bit 00CE                       ?_main 0070                       ?_dtoa 0033  
           __end_of___awdiv 0421             __end_of___awmod 04CF             ___awdiv@divisor 0072  
           ___awdiv@counter 0076                vfpfcnvrt@fmt 0041                       _PORTB 0006  
                     _PORTC 0007                       _PORTD 0008                       _TRISC 0087  
                     _TRISD 0088             ?_display_string 0078             __end_of_display 0609  
                     _flags 0068                       _count 00A0         read_prec_or_width@c 0020  
       read_prec_or_width@n 0021                       _fputc 031E                       _fputs 0550  
                     pad@fp 002C                       _width 0064                       _putch 0647  
                     main@i 00D2                       dtoa@d 0035                       dtoa@i 003D  
                     dtoa@p 0039                       dtoa@s 003C                       dtoa@w 003A  
                     pclath 000A                       status 0003                       wtemp0 007E  
           __end_of_sprintf 05C3             __initialization 000F                __end_of_main 01A9  
              __end_of_dtoa 026C                      ??_main 0061                      ??_dtoa 007C  
__end_of_read_prec_or_width 0478                      _ADCON0 001F                      _ADCON1 009F  
                    ?_fputc 0072                      ?_fputs 0076                      _ADRESH 001E  
                    _ADRESL 009E            ___awdiv@dividend 0074                      ?_putch 0070  
                    i1l1435 0609                      i1l1437 060D                      i1l1439 0617  
                    u118_20 060D                      u118_21 060C               vfpfcnvrt@done 0049  
              vfprintf@cfmt 004F                      ___wmul 057B                   ??___awdiv 0076  
                 ??___awmod 0076        read_prec_or_width@ap 0079            ___awdiv@quotient 0078  
           ___awmod@divisor 0072             ___awmod@counter 0076                      pad@buf 002E  
                    dtoa@fp 0033                   ??_display 0076                      fputc@c 0072  
                    fputs@c 0029                      fputs@i 002A                      fputs@s 0076  
                    saved_w 007E                      putch@c 0070            __end_of_vfprintf 05E6  
                 ??_sprintf 0054     __end_of__initialization 001F              __pcstackCOMMON 0070  
             __end_of_fputc 03BE               __end_of_fputs 057B               __end_of_putch 0648  
                   ??_fputc 0020                     ??_fputs 0079                     ??_putch 0072  
                __pbssBANK0 0064                  __pbssBANK1 00A0                  __pmaintext 0023  
                   ?___wmul 0072                  __pintentry 0004            ??_display_string 0079  
                __stringtab 0630                     ___awdiv 03BE                     ___awmod 0478  
                 ?_vfprintf 004B                     __ptext1 05A0                     __ptext2 05C3  
                   __ptext3 026C                     __ptext4 0421                     __ptext5 057B  
                   __ptext6 01A9                     __ptext7 04CF                     __ptext8 0550  
                   __ptext9 031E                     _display 05E6       read_prec_or_width@fmt 0078  
          ___awmod@dividend 0074                     main@arr 00C2                     _sprintf 05A0  
                   clrloop0 0640        end_of_initialization 001F                     fputc@fp 0074  
                   fputs@fp 0077          _read_prec_or_width 0421           __end_of_vfpfcnvrt 031E  
       ?_read_prec_or_width 0078            vfpfcnvrt@convarg 0045                  ??_vfprintf 007C  
      ??_read_prec_or_width 007A                 vfpfcnvrt@ap 0042                 vfpfcnvrt@cp 004A  
               vfpfcnvrt@fp 003F              __end_of___wmul 05A0         start_initialization 000F  
               __end_of_ISR 061F                 __end_of_abs 0630                 __end_of_pad 0522  
               vfprintf@fmt 004D                    ??___wmul 0076                   ___latbits 0002  
             __pcstackBANK0 0020               __pcstackBANK1 00C2                    ?___awdiv 0072  
                  ?___awmod 0072                   __pstrings 0630                    ?_display 0072  
                  ?_sprintf 0050           interrupt_function 0004              ___wmul@product 0076  
                 clear_ram0 063F                    _GO_nDONE 00FA                   _vfpfcnvrt 026C  
               __stringbase 0635           ___wmul@multiplier 0072                   display@DC 0074  
                 display@RS 0072                  vfprintf@ap 004E                  vfprintf@fp 004B  
                ?_vfpfcnvrt 003F          __end_of__stringtab 0636                  sprintf@fmt 0051  
                  _dtoa$606 0037                    __ptext10 0647                    __ptext11 061F  
                  __ptext12 0478                    __ptext13 03BE                    __ptext14 0522  
                  __ptext15 05E6                    __ptext16 0609                    _vfprintf 05C3  
                  main@bits 00D0                    intlevel1 0000                   sprintf@ap 0055  
                 stringcode 0630                 ??_vfpfcnvrt 0043                  _OPTION_REG 0081  
                  sprintf@f 0056                    sprintf@s 0050                    stringdir 0630  
                  stringtab 0630             display_string@a 0078             display_string@i 0020  
            _display_string 0522  
